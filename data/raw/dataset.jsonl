{"input persona": "A die-hard fan of \"Chasing Life\" who supports renewal of the show.", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Rating and Review Interface\\\",\\n\\\"description\\\": \\\"An interface that takes the name of a TV show as input and returns the current rating, number of reviews, and the latest 5 reviews of the show.\\\",\\n\\\"function_name\\\": \\\"get_tv_show_rating_and_reviews\\\",\\n\\\"input_args\\\": \\\"show_name\\\",\\n\\\"return\\\": \\\"rating, num_reviews, reviews[:5]\\\",\\n\\\"depend\\\": \\\"requests, TMDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sports journalist who has interviewed Michael Jordan multiple times and has insider stories about his career", "synthesized text": "\"{\\n\\\"name\\\": \\\"Michael Jordan Career Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface provides the annual statistics of Michael Jordan's career in the NBA. Given a specific year as input, it returns a detailed summary of his performance during that season.\\\",\\n\\\"function_name\\\": \\\"get_michael_jordan_statistics\\\",\\n\\\"input_args\\\": \\\"year\\\",\\n\\\"return\\\": \\\"A JSON object containing Michael Jordan's statistics for the specified year.\\\",\\n\\\"depend\\\": \\\"Sports Open Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A WWII veteran who didn't finish high school.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"This interface converts the text content of a given document into speech, saving the output as an audio file.\\\",\\n\\\"function_name\\\": \\\"document_to_speech\\\",\\n\\\"input_args\\\": [\\\"doc_path\\\"],\\n\\\"return\\\": \\\"audio_path\\\",\\n\\\"depend\\\": \\\"Google Text-to-Speech (gTTS) Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A novelist with an interest in history and a love for dogs.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Event and Dog Breed Information Interface\\\",\\n\\\"description\\\": \\\"This interface provides information about a major historical event that occurred in a specific year and details about a specific dog breed.\\\",\\n\\\"function_name\\\": \\\"get_historical_event_and_dog_breed_info\\\",\\n\\\"input_args\\\": {\\n    \\\"year\\\": \\\"The year for which the user wants to find a major historical event.\\\",\\n    \\\"breed_name\\\": \\\"The breed of the dog about which the user wants information.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"Historical Event\\\": \\\"Information about a major historical event in the specified year.\\\",\\n    \\\"Dog Breed Info\\\": \\\"Details about the specified dog breed.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"resources\\\": [\\n        \\\"Python requests library\\\",\\n        \\\"Wikipedia API\\\",\\n        \\\"TheDogAPI\\\"\\n    ]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A senior patent officer with years of experience in the field", "synthesized text": "\"{\\n\\\"name\\\": \\\"Patent Search Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to input a patent number and returns all the patent details.\\\",\\n\\\"function_name\\\": \\\"get_patent_details\\\",\\n\\\"input_args\\\": {\\\"patent_number\\\": \\\"An integer or string that represents the patent number.\\\"},\\n\\\"return\\\": \\\"A string that contains all the patent details including the patent title, patent number, date of filing, assignee details, abstract, and all related information.\\\",\\n\\\"depend\\\": \\\"USPTO's Patent Full-Text and Image Database (PatFT) API, Python requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A heavy metal musician who loves boxing.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Song Lyrics Generator Interface\\\",\\n\\\"description\\\": \\\"This interface uses a GPT-2 model to generate heavy metal song lyrics with a specific theme. The user provides a seed line or phrase related to boxing, and the interface generates a full set of lyrics for a song.\\\",\\n\\\"function_name\\\": \\\"generate_song_lyrics\\\",\\n\\\"input_args\\\": {\\n    \\\"seed_line\\\": \\\"a string that serves as the seed for the song lyrics. It should be related to boxing.\\\",\\n    \\\"num_lines\\\": \\\"an integer that determines how many lines the song should have. Default is 12.\\\"\\n},\\n\\\"return\\\": \\\"a string that represents the lyrics of the generated song.\\\",\\n\\\"depend\\\": \\\"Huggingface's Transformers library, including the GPT2Tokenizer and GPT2LMHeadModel classes.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A teenager fascinated by the early days of the internet and eager to learn about BBS systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"BBS Post Search Interface\\\",\\n\\\"description\\\": \\\"Interface to search for posts in BBS systems using keywords.\\\",\\n\\\"function_name\\\": \\\"search_bbs_posts\\\",\\n\\\"input_args\\\": [\\\"keywords\\\"],\\n\\\"return\\\": \\\"List of relevant BBS posts.\\\",\\n\\\"depend\\\": \\\"requests library, BBS data provider API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fact-checker at Global Press Journal", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fact-Check Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to verify the facts by using Google Fact Check Tools API. The user inputs a claim and the interface returns the fact-checking results related to the claim.\\\",\\n\\\"function_name\\\": \\\"fact_check\\\",\\n\\\"input_args\\\": [\\\"claim\\\"],\\n\\\"return\\\": \\\"list of dictionaries containing fact-check results\\\",\\n\\\"depend\\\": [\\\"Google Fact Check Tools API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A college theater major revealing a natural knack for comedic timing in family gatherings", "synthesized text": "\"{\\n\\\"name\\\": \\\"Comedy Script Generator Interface\\\",\\n\\\"description\\\": \\\"This interface takes a start of a comedy scene and generates a funny continuation. It uses a GPT-2 model trained on a diverse range of internet text, but has been fine-tuned for humor.\\\",\\n\\\"function_name\\\": \\\"generate_comedy_script\\\",\\n\\\"input_args\\\": {\\n    \\\"scene_start\\\": \\\"string - The initial part of the comedy scene\\\",\\n    \\\"num_return_sequences\\\": \\\"integer - The number of different continuations to generate (default=1)\\\",\\n    \\\"max_length\\\": \\\"integer - The maximum length of each generated script (default=250)\\\"\\n},\\n\\\"return\\\": \\\"list of strings - The generated funny continuations\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A safety officer often consulted for precautionary measures when working on high power electronics", "synthesized text": "\"{\\n\\\"name\\\": \\\"High Voltage Safety Check Interface\\\",\\n\\\"description\\\": \\\"Predicts the risk level of a job involving high voltage electronics based on details of the job such as maximum voltage, job duration, and equipment type.\\\",\\n\\\"function_name\\\": \\\"predict_risk_level\\\",\\n\\\"input_args\\\": {\\n    \\\"model_path\\\": \\\"Path to the trained model\\\",\\n    \\\"max_voltage\\\": \\\"The maximum voltage involved in the job\\\",\\n    \\\"job_duration\\\": \\\"Expected duration of the job in hours\\\",\\n    \\\"equipment_type\\\": \\\"Type of equipment used in the job\\\"\\n},\\n\\\"return\\\": \\\"Predicted risk level as 'Low', 'Medium', or 'High'\\\",\\n\\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"sklearn\\\", \\\"joblib\\\"],\\n    \\\"machine_learning_models\\\": [\\\"RandomForestClassifier\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A racing fanatic who first heard about the Race of Champions.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Race Info Fetch Interface\\\",\\n\\\"description\\\": \\\"Fetches the details about a specific F1 race like race name, date, time, circuit and the winner.\\\",\\n\\\"function_name\\\": \\\"get_race_details\\\",\\n\\\"input_args\\\": {\\n    \\\"year\\\": \\\"The year when the race was conducted.\\\",\\n    \\\"round\\\": \\\"The round of the race.\\\"\\n    },\\n\\\"return\\\": \\\"A dictionary containing details about the race.\\\",\\n\\\"depend\\\": \\\"Uses the Ergast Developer API to fetch data.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a retired grocery store owner from Colorado who hates alcohol.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Alcohol Content Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained model to analyze the alcohol content in a list of beverages. The user inputs a list of beverage names, and the interface returns a list of the beverages with their respective alcohol content.\\\",\\n\\\"function_name\\\": \\\"analyze_alcohol_content\\\",\\n\\\"input_args\\\": {\\n    \\\"beverages\\\": \\\"List of beverage names as strings\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries, each dictionary contains the beverage name and a boolean indicating whether the beverage contains alcohol or not.\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library and a pre-trained DistilBERT model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A customer service representative familiar with the SourceTree system", "synthesized text": "\"{\\n\\\"name\\\": \\\"Git Repository Management Interface\\\",\\n\\\"description\\\": \\\"An interface for managing Git repositories. The user inputs the path to a Git repository and a command, and the interface executes the command and returns the result.\\\",\\n\\\"function_name\\\": \\\"manage_git_repo\\\",\\n\\\"input_args\\\": [\\\"repo_path\\\", \\\"command\\\", \\\"commit_message\\\"],\\n\\\"return\\\": \\\"The result of executing the Git command.\\\",\\n\\\"depend\\\": \\\"GitPython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a software engineer with expertise in DLL handling.", "synthesized text": "\"{\\n\\\"name\\\": \\\"DLL Handling Interface\\\",\\n\\\"description\\\": \\\"Load a Dynamic-Link Library (DLL) and return an object that can be used to access the functions within the DLL.\\\",\\n\\\"function_name\\\": \\\"load_dll\\\",\\n\\\"input_args\\\": {\\n    \\\"dll_path\\\": \\\"The file path to the DLL file.\\\"\\n},\\n\\\"return\\\": \\\"An object that represents the loaded DLL. Functions within the DLL can be accessed as attributes of this object.\\\",\\n\\\"depend\\\": \\\"Python's ctypes library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A novelist who crafts characters based on the interesting faces seen on public transit", "synthesized text": "\"{\\n\\\"name\\\": \\\"Face Features Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to extract complex and high dimensional features from face images. The model used in this interface is a pre-trained MobileNetV2 model from TensorFlow Hub, which was trained on a large number of images and can extract a rich set of features.\\\",\\n\\\"function_name\\\": \\\"extract_face_features\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"A numpy array of face features\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, MobileNetV2 Feature Vector\\\"\\n}\"", "description": "tool development"}
{"input persona": "a language teacher frustrated with automated translation errors", "synthesized text": "\"{\\n\\\"name\\\": \\\"Language Checker and Corrector Interface\\\",\\n\\\"description\\\": \\\"This interface uses the language_tool_python library to check and correct text inputs for grammar, style, and spelling errors.\\\",\\n\\\"function_name\\\": \\\"correct_text\\\",\\n\\\"input_args\\\": \\\"text_to_correct - the text to be corrected, language - the language of the input text (default is 'en-US')\\\",\\n\\\"return\\\": \\\"Corrected text string\\\",\\n\\\"depend\\\": \\\"language_tool_python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A large-scale farmer who shares their knowledge and resources to help navigate the changing tariffs", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Tariff Change Alert Interface\\\",\\n  \\\"description\\\": \\\"This interface uses Trade Tariff Service API to monitor the changes in tariffs for a given list of commodities. The user inputs a list of commodity codes, and the interface returns a dictionary with the commodity code as the key and the latest tariff as the value.\\\",\\n  \\\"function_name\\\": \\\"get_latest_tariffs\\\",\\n  \\\"input_args\\\": [\\\"commodity_codes\\\"],\\n  \\\"return\\\": \\\"dictionary with commodity code as key and latest tariff as value\\\",\\n  \\\"depend\\\": \\\"Trade Tariff Service API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local tour guide who knows the ins and outs of the Australian football scene and can recommend the best stadiums and matches to attend", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stadium and Match Recommendation Interface\\\",\\n\\\"description\\\": \\\"Return the best matches to attend and the stadiums where they will be held, given a date range and a preferred team, leveraging the Sportradar API.\\\",\\n\\\"function_name\\\": \\\"get_best_matches\\\",\\n\\\"input_args\\\": {\\n    \\\"team\\\": \\\"ID of the preferred team\\\",\\n    \\\"start_date\\\": \\\"Start date of the date range in the format 'YYYY-MM-DD'\\\",\\n    \\\"end_date\\\": \\\"End date of the date range in the format 'YYYY-MM-DD'\\\"\\n},\\n\\\"return\\\": \\\"List of dictionaries, each containing a 'match' and 'stadium' key\\\",\\n\\\"depend\\\": \\\"Sportradar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a local community leader in the 140th district of the Texas House of Representatives, who has been advocating for equal representation and social justice for decades.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legislative Bill Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches and summarizes bill details from the Texas House of Representatives using the ProPublica Congress API.\\\",\\n\\\"function_name\\\": \\\"fetch_bill_details\\\",\\n\\\"input_args\\\": {\\\"bill_id\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"Bill Title\\\": \\\"string\\\", \\\"Bill Summary\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\"], \\\"Web APIs\\\": [\\\"ProPublica Congress API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A person from Kodad constituency who always votes against TRS in assembly elections", "synthesized text": "\"{\\n\\\"name\\\": \\\"Electoral Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the outcome of the next election based on the user's constituency and political preference.\\\",\\n\\\"function_name\\\": \\\"predict_election\\\",\\n\\\"input_args\\\": {\\n    \\\"constituency\\\": \\\"The constituency of the user (e.g., 'Kodad')\\\",\\n    \\\"preference\\\": \\\"The political preference of the user (e.g., 'Against TRS')\\\"\\n},\\n\\\"return\\\": \\\"A string that represents the predicted outcome of the next election.\\\",\\n\\\"depend\\\": \\\"Pandas, Scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dermatologist who appreciates the natural ingredients and recommends the handmade soap to patients", "synthesized text": "\"{\\n\\\"name\\\": \\\"Natural Ingredient Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to get the ingredients of a product by inputting the barcode. It uses the OpenFoodFacts API.\\\",\\n\\\"function_name\\\": \\\"get_soap_ingredients\\\",\\n\\\"input_args\\\": \\\"barcode - the barcode of the product\\\",\\n\\\"return\\\": \\\"A string of the ingredients in the product, or 'Product not found' if the barcode is not found in the database.\\\",\\n\\\"depend\\\": \\\"requests library, OpenFoodFacts API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A group of school children who are invited to engage with the interactive installations and explore math in a creative way", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface takes a mathematical function as input and returns a 3D visualization of the function using PyVista. It is intended for educational purposes, specifically for helping students visualize mathematical concepts in 3D.\\\",\\n\\\"function_name\\\": \\\"plot_math_function\\\",\\n\\\"input_args\\\": {\\n    \\\"function\\\": \\\"A mathematical function that takes two input variables and returns a scalar. Must be a valid Python function.\\\"\\n},\\n\\\"return\\\": \\\"A 3D visualization of the input function. This is displayed in the notebook and is not a return value in the traditional sense.\\\",\\n\\\"depend\\\": \\\"This function depends on the numpy and PyVista Python libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A resilient agricultural worker who has overcome obstacles and adapted to various work environments", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Crop Disease Detection Interface\\\",\\n  \\\"description\\\": \\\"Detects the disease from a crop leaf image using a TensorFlow model.\\\",\\n  \\\"function_name\\\": \\\"detect_crop_disease\\\",\\n  \\\"input_args\\\": {\\n    \\\"path_to_img\\\": \\\"The path to the image file of the crop leaf.\\\"\\n  },\\n  \\\"return\\\": \\\"The class ID of the detected disease, which can be matched to the actual disease using the TensorFlow Hub model documentation.\\\",\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\"],\\n    \\\"machine_learning_model\\\": \\\"TensorFlow Hub AIY Vision Classifier (Plants V1)\\\"\\n  }\\n}\"", "description": "tool development"}
{"input persona": "An Afghan Hound breeder who seeks advice on genetic health testing and coat care", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Dog Breed Genetic Health and Coat Care Advice Interface\\\",\\n    \\\"description\\\": \\\"This interface provides advice on genetic health testing and coat care for a specified dog breed. The advice is generated by the OpenAI GPT-3 model based on the breed's characteristics obtained from the Dog API.\\\",\\n    \\\"function_name\\\": \\\"get_genetic_health_and_coat_care_advice\\\",\\n    \\\"input_args\\\": {\\n        \\\"breed\\\": \\\"The name of the dog breed\\\"\\n    },\\n    \\\"return\\\": \\\"Advice on genetic health testing and coat care for the breed.\\\",\\n    \\\"depend\\\": \\\"This function depends on the Dog API for breed information and the OpenAI GPT-3 model for advice generation.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A front desk staff member at various hotels who assists the traveling salesman in finding accommodation near Jon Pardi's tour locations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hotel Search Interface\\\",\\n\\\"description\\\": \\\"This interface utilizes APIs such as Google Places to search for hotels near Jon Pardi's tour locations. It takes the tour location as input and returns a list of nearby hotels.\\\",\\n\\\"function_name\\\": \\\"get_nearby_hotels\\\",\\n\\\"input_args\\\": \\\"tour_location\\\",\\n\\\"return\\\": \\\"A list of nearby hotels.\\\",\\n\\\"depend\\\": \\\"Google Places API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An emergency management director who seeks the aerospace engineer's expertise in developing response plans for potential comet impacts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Comet Impact Probability Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the probability of a given comet impacting Earth based on its current trajectory and other factors.\\\",\\n\\\"function_name\\\": \\\"calculate_impact_probability\\\",\\n\\\"input_args\\\": \\\"comet_id - The name or ID of the comet.\\\",\\n\\\"return\\\": \\\"The probability of the comet impacting Earth.\\\",\\n\\\"depend\\\": \\\"JPL Small-Body Database API, Python requests library, Python scipy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A caring and responsible older brother who shares his experiences of adopting a pet and offers advice on pet care", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pet Adoption Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the RescueGroups API to return a list of adoptable pets based on user's preferences.\\\",\\n\\\"function_name\\\": \\\"get_pet_adoption_recommendations\\\",\\n\\\"input_args\\\": {\\n    \\\"animal_type\\\": \\\"The type of animal user wants to adopt (e.g., Dog, Cat).\\\",\\n    \\\"breed\\\": \\\"The breed of the animal user prefers (e.g., Labrador Retriever, Persian).\\\",\\n    \\\"age\\\": \\\"The age of the animal user prefers (e.g., Young, Adult).\\\",\\n    \\\"size\\\": \\\"The size of the animal user prefers (e.g., Small, Medium, Large).\\\",\\n    \\\"location\\\": \\\"The location of the user (e.g., 90210, Seattle WA).\\\"\\n},\\n\\\"return\\\": \\\"A list of adoptable pets that match user's preferences. Each pet includes its ID, name, breed, description, sex, and thumbnail URL.\\\",\\n\\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"requests\\\"],\\n    \\\"Web_APIs\\\": [\\\"RescueGroups API\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A politician who believes that animal welfare laws place unnecessary burdens on pet store owners", "synthesized text": "\"{\\n\\\"name\\\": \\\"Animal Welfare Legislation Impact Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses OpenAI's GPT-3 model to analyze the impact of animal welfare legislation on pet store owners. The user provides the text of the legislation, and the interface returns an analysis of the potential burdens and benefits.\\\",\\n\\\"function_name\\\": \\\"analyze_legislation_impact\\\",\\n\\\"input_args\\\": {\\n    \\\"legislation_text\\\": \\\"The text of the legislation related to animal welfare\\\"\\n},\\n\\\"return\\\": \\\"A string of text analyzing the potential burdens and benefits of the legislation on pet store owners.\\\",\\n\\\"depend\\\": \\\"OpenAI API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A space engineer working on designing spacecraft capable of exploring black holes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Black Hole Trajectory Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface simulates the trajectory of a spacecraft around a black hole using the Python library poliastro. Users input the initial position and velocity of the spacecraft, and the mass and position of the black hole, and the interface returns a plot of the spacecraft's trajectory.\\\",\\n\\\"function_name\\\": \\\"simulate_trajectory\\\",\\n\\\"input_args\\\": [\\\"spacecraft_position\\\", \\\"spacecraft_velocity\\\", \\\"blackhole_mass\\\", \\\"blackhole_position\\\"],\\n\\\"return\\\": \\\"A plot of the spacecraft's trajectory around the black hole.\\\",\\n\\\"depend\\\": [\\\"poliastro\\\", \\\"astropy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A physicist researching nuclear physics and its applications in energy production", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nuclear Decay Simulator\\\",\\n\\\"description\\\": \\\"Simulates a nuclear decay process given the initial number of atoms, decay constant, and time duration.\\\",\\n\\\"function_name\\\": \\\"simulate_nuclear_decay\\\",\\n\\\"input_args\\\": {\\n\\\"N0\\\": \\\"Initial number of atoms\\\",\\n\\\"k\\\": \\\"Decay constant\\\",\\n\\\"t\\\": \\\"Time duration\\\"\\n},\\n\\\"return\\\": \\\"Number of atoms remaining after the decay process\\\",\\n\\\"depend\\\": \\\"SciPy, NumPy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A seasoned bullfighter who constantly challenges them for the title of the best in the arena", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bullfighting Score Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the score of a bullfight based on the bullfighter's name, the bull's breed, and the location of the fight\\\",\\n\\\"function_name\\\": \\\"predict_bullfighting_score\\\",\\n\\\"input_args\\\": [\\\"bullfighter_name\\\", \\\"bull_breed\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"Predicted score (integer)\\\",\\n\\\"depend\\\": \\\"huggingface's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A potential patient who's been struggling with depression and considering seeking professional help for a while", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mental Health Professional Finder Interface\\\", \\n\\\"description\\\": \\\"This interface uses the U.S. Department of Health & Human Services' API to find mental health professionals in a specific area. The user inputs their location and the interface returns a list of professionals, their specialties, and contact information.\\\", \\n\\\"function_name\\\": \\\"find_mental_health_professionals\\\", \\n\\\"input_args\\\": {\\\"location\\\": \\\"string\\\"}, \\n\\\"return\\\": {\\\"name\\\": \\\"string\\\", \\\"specialty\\\": \\\"string\\\", \\\"contact\\\": \\\"string\\\"}, \\n\\\"depend\\\": [\\\"requests\\\", \\\"U.S. Department of Health & Human Services' API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a vintage store owner in Erlanger who's lived all their life in the town.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Vintage Item Price Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the price of a vintage item based on its attributes like category, condition, brand, and size using a pre-trained model from huggingface.\\\",\\n  \\\"function_name\\\": \\\"predict_vintage_item_price\\\",\\n  \\\"input_args\\\": {\\n    \\\"category\\\": \\\"The category of the vintage item (e.g., 'clothing', 'furniture', 'toys').\\\",\\n    \\\"condition\\\": \\\"The condition of the vintage item (e.g., 'excellent', 'good', 'fair').\\\",\\n    \\\"brand\\\": \\\"The brand of the vintage item, if applicable.\\\",\\n    \\\"size\\\": \\\"The size of the vintage item, if applicable.\\\"\\n  },\\n  \\\"return\\\": \\\"The predicted price of the vintage item (in dollars).\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"torch\\\", \\\"transformers\\\"],\\n    \\\"pre-trained model\\\": [\\\"distilbert-base-uncased-finetuned-sst-2-english from huggingface\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "An eco-conscious packaging company that provides the coffee roaster with sustainable and biodegradable coffee bags", "synthesized text": "\"{\\n\\\"name\\\": \\\"Carbon Footprint Calculator Interface\\\",\\n\\\"description\\\": \\\"An interface to calculate the carbon footprint of a coffee bag. The user needs to provide the material used, the weight of the material, and the production process.\\\",\\n\\\"function_name\\\": \\\"calculate_carbon_footprint\\\",\\n\\\"input_args\\\": {\\n    \\\"material\\\": \\\"The material used to produce the coffee bag, e.g., 'bioplastic', 'paper', 'cotton'\\\",\\n    \\\"weight\\\": \\\"The weight of the material used to produce the coffee bag, in grams\\\",\\n    \\\"production_process\\\": \\\"The production process used, e.g., 'standard', 'green'\\\"\\n},\\n\\\"return\\\": \\\"The total carbon footprint of the coffee bag, in grams of CO2 equivalent (gCO2e)\\\",\\n\\\"depend\\\": \\\"This function depends on a database or API that provides accurate emission factors for different materials and processes. In this example, we use a simple dictionary for demonstration purposes.\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an elderly bookkeeper who has dedicated his life to meticulous manual record-keeping and has recently been introduced to time-tracking software.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Time Log Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a CSV file path as input and returns a summary of the time spent on different tasks, which is represented as a dictionary where the keys are the tasks and the values are the total time spent on each task in hours.\\\",\\n\\\"function_name\\\": \\\"analyze_time_log\\\",\\n\\\"input_args\\\": \\\"csv_file_path\\\",\\n\\\"return\\\": \\\"A dictionary where the keys are the tasks and the values are the total time spent on each task in hours.\\\",\\n\\\"depend\\\": \\\"pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ignorant individual who has no knowledge about Blumkin", "synthesized text": "\"{\\n\\\"name\\\": \\\"Knowledge Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to input a topic and returns a summary of that topic using the Wikipedia API.\\\",\\n\\\"function_name\\\": \\\"get_wikipedia_summary\\\",\\n\\\"input_args\\\": {\\\"topic\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string (summary of the topic)\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"Wikipedia API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A history buff who shares fascinating stories about the origins of different writing systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Writing Systems Origin Information Interface\\\",\\n\\\"description\\\": \\\"Fetches information about the origin and historical background of a given writing system from Wikipedia.\\\",\\n\\\"function_name\\\": \\\"get_writing_system_origin_info\\\",\\n\\\"input_args\\\": {\\\"writing_system\\\": \\\"Name of the writing system as a string\\\"},\\n\\\"return\\\": \\\"A string containing the origin and historical information about the writing system. Returns 'No information available' if no data is found.\\\",\\n\\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An honor roll high school student who aspires to be a software engineer and always helps around the house", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chores Reminder Interface\\\",\\n\\\"description\\\": \\\"An interface for setting up reminders for daily chores. It takes a chore and a time, and gives a reminder when the time comes.\\\",\\n\\\"function_name\\\": \\\"chores_reminder\\\",\\n\\\"input_args\\\": {\\n  \\\"chore\\\": \\\"The chore that needs to be done, as a string.\\\",\\n  \\\"time_to_do\\\": \\\"The time when the chore needs to be done, as a string in 24-hour format ('HH:MM').\\\"\\n},\\n\\\"return\\\": \\\"Prints a reminder when the time to do the chore comes. Runs indefinitely until manually interrupted.\\\",\\n\\\"depend\\\": \\\"Python's datetime and schedule libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An immunologist who specializes in studying the body's immune response to different pathogens", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pathogen Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface for analysing the genetic sequence of a pathogen, returning its length, GC content, and a frequency distribution of all codons.\\\",\\n\\\"function_name\\\": \\\"analyse_pathogen_sequence\\\",\\n\\\"input_args\\\": [\\\"fasta_file\\\"],\\n\\\"return\\\": {\\\"sequence_length\\\": \\\"int\\\", \\\"gc_content\\\": \\\"float\\\", \\\"codon_usage\\\": \\\"dict\\\"},\\n\\\"depend\\\": [\\\"BioPython\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A resident of the city of Burton who works as an accountant but doesn't pay much attention to local government affairs.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Local Government Affairs News Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches the latest local government affairs news for a specified city.\\\",\\n\\\"function_name\\\": \\\"get_local_government_news\\\",\\n\\\"input_args\\\": \\\"city - Name of the city\\\",\\n\\\"return\\\": \\\"A list of titles of the latest local government affairs news articles for the specified city\\\",\\n\\\"depend\\\": \\\"NewsAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "A project coordinator working on similar projects, offering tips and tricks for effective project execution", "synthesized text": "\"{\\n\\\"name\\\": \\\"Project Management Interface\\\",\\n\\\"description\\\": \\\"Generates a project plan with timelines, cost estimates, and risk factors. Returns a project object that contains all the task details and displays a Gantt chart visualization.\\\",\\n\\\"function_name\\\": \\\"generate_project_plan\\\",\\n\\\"input_args\\\": \\\"project_details\\\",\\n\\\"return\\\": \\\"Project object and Gantt chart visualization\\\",\\n\\\"depend\\\": \\\"python-gantt, matplotlib, datetime\\\"\\n}\"", "description": "tool development"}
{"input persona": "A veteran basketball coach from the Summit League, who has seen his fair share of victories and losses, enjoys following the season closely, and likes to compare the pre-season polls and predictions against the actual outcomes.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"NCAA Basketball Prediction Comparison Interface\\\",\\n  \\\"description\\\": \\\"Compares the pre-season predictions against the actual outcomes for NCAA basketball. User inputs a year and the interface returns a comparison between the pre-season predictions and the actual outcomes.\\\",\\n  \\\"function_name\\\": \\\"compare_preseason_postseason\\\",\\n  \\\"input_args\\\": \\\"year\\\",\\n  \\\"return\\\": \\\"DataFrame of schools with their pre-season and post-season ranks\\\",\\n  \\\"depend\\\": \\\"collegefootballdata API, pandas, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "a physical therapist who has treated many patients with Achilles tendon rupture.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Achilles Tendon Recovery Progress Interface\\\",\\n  \\\"description\\\": \\\"Predict the recovery progress of a patient with Achilles tendon rupture based on their age, gender, and how many weeks since the injury.\\\",\\n  \\\"function_name\\\": \\\"predict_recovery_progress\\\",\\n  \\\"input_args\\\": [\\\"age\\\", \\\"gender\\\", \\\"weeks_since_injury\\\"],\\n  \\\"return\\\": \\\"JSON object containing the input data and the predicted recovery progress\\\",\\n  \\\"depend\\\": [\\\"sklearn.ensemble.RandomForestRegressor\\\", \\\"pandas\\\", \\\"trained model on past patient data\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am a proud alumnus of Chandpur Government College, a seasoned educator, and a mentor to young minds embarking on their higher education path.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Plagiarism Detection Interface\\\",\\n  \\\"description\\\": \\\"Detects plagiarism in text submitted by students by comparing it to the original text. The higher the similarity score, the more likely the text is plagiarized.\\\",\\n  \\\"function_name\\\": \\\"detect_plagiarism\\\",\\n  \\\"input_args\\\": [\\\"original_text\\\", \\\"suspected_text\\\"],\\n  \\\"return\\\": \\\"A similarity score between the original and suspected plagiarized text. The higher the score, the more likely the text is plagiarized.\\\",\\n  \\\"depend\\\": [\\\"requests library\\\", \\\"DeepAI Text Similarity API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An artist who finds inspiration in the engineer's ability to stay composed under pressure", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stress Level Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a machine learning model from TensorFlow Hub to analyze the stress level from a voice recording.\\\",\\n\\\"function_name\\\": \\\"analyze_stress_level\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"The estimated stress level from the voice recording.\\\",\\n\\\"depend\\\": [\\\"TensorFlow\\\", \\\"TensorFlow Hub\\\", \\\"SciPy\\\", \\\"YAMNet (a pre-trained model from TensorFlow Hub)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A university research administrator offering advice to faculty members on nomination processes for prestigious awards.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nomination Process Guidance Interface\\\",\\n\\\"description\\\": \\\"An interface that provides guidance on the nomination process for prestigious awards. It uses a BERT model for Question Answering to extract relevant information from the award nomination process documents.\\\",\\n\\\"function_name\\\": \\\"provide_guidance\\\",\\n\\\"input_args\\\": [\\\"question\\\", \\\"file_path\\\"],\\n\\\"return\\\": \\\"A string that answers the user's question about the nomination process.\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library (BERT for Question Answering)\\\"\\n}\"", "description": "tool development"}
{"input persona": "a traveller looking for unconventional and chill places to visit", "synthesized text": "\"{\\n\\\"name\\\": \\\"Travel Destination Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that recommends lesser-known and relaxing travel destinations within a specified distance from the user's current location.\\\",\\n\\\"function_name\\\": \\\"get_chill_travel_destinations\\\",\\n\\\"input_args\\\": {\\n    \\\"current_location\\\": \\\"The user's current location.\\\",\\n    \\\"max_distance\\\": \\\"The maximum distance the user is willing to travel (in kilometers).\\\"\\n},\\n\\\"return\\\": \\\"A list of suggested travel destinations that are less popular and thus likely to be more relaxing.\\\",\\n\\\"depend\\\": \\\"TripAdvisor API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A group of roommates who are dealing with conflicts over sharing responsibilities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Responsibility Allocation Interface\\\",\\n\\\"description\\\": \\\"This interface helps to fairly distribute responsibilities among roommates. The user inputs the tasks and the names of the roommates, and the interface will return a schedule assigning tasks to each roommate evenly.\\\",\\n\\\"function_name\\\": \\\"assign_responsibilities\\\",\\n\\\"input_args\\\": [\\\"roommates - a list of roommate names\\\", \\\"tasks - a list of tasks to be done\\\"],\\n\\\"return\\\": \\\"A dictionary where the keys are the names of the roommates and the values are lists of tasks for each roommate.\\\",\\n\\\"depend\\\": \\\"Python's built-in library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Alexa skill developer who has been experienced in Alexa App-to-App feature", "synthesized text": "\"{\\n\\\"name\\\": \\\"Alexa Skill Invocation Interface\\\",\\n\\\"description\\\": \\\"This interface generates a deep link URL for a specific Alexa skill and command.\\\",\\n\\\"function_name\\\": \\\"generate_alexa_deep_link\\\",\\n\\\"input_args\\\": {\\n    \\\"skill_id\\\": \\\"The ID of the Alexa skill.\\\",\\n    \\\"command\\\": \\\"The specific command to be invoked.\\\"\\n},\\n\\\"return\\\": \\\"A deep link URL for the specified Alexa skill and command.\\\",\\n\\\"depend\\\": \\\"None\\\"\\n}\"", "description": "tool development"}
{"input persona": "A JavaScript developer new to Tizen's TAU library", "synthesized text": "\"{\\n  \\\"name\\\": \\\"TAU Widget Creation\\\",\\n  \\\"description\\\": \\\"Generate the JavaScript code for creating a widget using Tizen's TAU library. The user only needs to provide the type of widget and the target element id.\\\",\\n  \\\"function_name\\\": \\\"generate_widget_code\\\",\\n  \\\"input_args\\\": {\\n    \\\"widget_type\\\": \\\"The type of the TAU widget to create (e.g., 'Slider', 'Button').\\\",\\n    \\\"element_id\\\": \\\"The id of the target element in the HTML file where the widget should be created.\\\"\\n  },\\n  \\\"return\\\": \\\"The JavaScript code for creating the widget.\\\",\\n  \\\"depend\\\": \\\"Jinja2\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young child who becomes captivated by the immersive sound design in animated films", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sound Effect Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates sound effects based on the description provided by the user.\\\",\\n\\\"function_name\\\": \\\"text_to_sound\\\",\\n\\\"input_args\\\": {\\\"text\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"An AudioSegment instance representing the generated sound effect.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\", \\\"pydub\\\"], \\\"machine learning models\\\": [\\\"facebook/wav2vec2-large-960h\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A parent blogger who shares resources and tips for supporting children's math learning at home", "synthesized text": "\"{\\n\\\"name\\\": \\\"Math Problem Solver Interface\\\",\\n\\\"description\\\": \\\"This interface takes a mathematical problem as a string and returns the solution.\\\",\\n\\\"function_name\\\": \\\"math_problem_solver\\\",\\n\\\"input_args\\\": \\\"problem_string\\\",\\n\\\"return\\\": \\\"solution\\\",\\n\\\"depend\\\": \\\"Sympy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Friday the 13th super fan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Rating and Review Interface\\\",\\n\\\"description\\\": \\\"Fetch ratings, reviews, and other details about a movie.\\\",\\n\\\"function_name\\\": \\\"get_movie_details\\\",\\n\\\"input_args\\\": \\\"movie_title\\\",\\n\\\"return\\\": \\\"Dictionary with movie's title, release date, average vote rating, and overview.\\\",\\n\\\"depend\\\": \\\"The Movie Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An underpaid teacher in the UK", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automatic Quiz Generator\\\",\\n\\\"description\\\": \\\"This interface utilizes the Wikipedia API to extract information on a given topic and the GPT-3 model from OpenAI to generate multiple-choice questions based on the extracted information.\\\",\\n\\\"function_name\\\": \\\"generate_quiz\\\",\\n\\\"input_args\\\": [\\n    {\\\"name\\\": \\\"topic\\\", \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The topic on which to generate the quiz.\\\"},\\n    {\\\"name\\\": \\\"num_questions\\\", \\\"type\\\": \\\"int\\\", \\\"description\\\": \\\"The number of quiz questions to generate.\\\"}\\n  ],\\n\\\"return\\\": \\\"A list of multiple-choice questions in string format.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"openai\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An Indian film enthusiast and reporter who has a great memory for award ceremonies.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Awards Information Interface\\\",\\n\\\"description\\\": \\\"This interface provides information about the awards won and nominations for a specific movie.\\\",\\n\\\"function_name\\\": \\\"get_movie_awards\\\",\\n\\\"input_args\\\": \\\"title\\\",\\n\\\"return\\\": \\\"A string that describes the awards won and nominations for the movie.\\\",\\n\\\"depend\\\": \\\"OMDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a local cycling enthusiast from Almería", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Elevation Profile Interface\\\",\\n\\\"description\\\": \\\"Provides the elevation profile of a given cycling route using Google's Elevation API.\\\",\\n\\\"function_name\\\": \\\"get_route_elevation\\\",\\n\\\"input_args\\\": {\\n    \\\"start_point\\\": \\\"The starting point of the route.\\\",\\n    \\\"end_point\\\": \\\"The ending point of the route.\\\"\\n},\\n\\\"return\\\": \\\"A list of tuples, where each tuple contains the latitude, longitude, and elevation (in meters) of a certain point along the route.\\\",\\n\\\"depend\\\": [\\\"Google's Elevation API\\\", \\\"Requests library\\\", \\\"Polyline library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A historian focusing on Iraq's political history during the 20th century.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Historical Event Extraction Interface\\\",\\n    \\\"description\\\": \\\"Extracts historical events from a given text focused on Iraq's political history during the 20th century using a Named Entity Recognition model.\\\",\\n    \\\"function_name\\\": \\\"extract_historical_events\\\",\\n    \\\"input_args\\\": {\\\"text\\\": \\\"string\\\"},\\n    \\\"return\\\": {\\\"events\\\": \\\"list of strings\\\"},\\n    \\\"depend\\\": \\\"Hugging Face Transformers library, Named Entity Recognition model ('dbmdz/bert-large-cased-finetuned-conll03-english')\\\"\\n}\"", "description": "tool development"}
{"input persona": "I'm a local business owner who is deeply invested in community development and political affairs in Shoalhaven, New South Wales.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Local Government Meeting Minutes Search Interface\\\",\\n\\\"description\\\": \\\"An interface to search keywords in the minutes from local council meetings on the Shoalhaven City Council website.\\\",\\n\\\"function_name\\\": \\\"search_meeting_minutes\\\",\\n\\\"input_args\\\": \\\"keyword\\\",\\n\\\"return\\\": \\\"A list of tuples, each containing a meeting date and a link to the meeting minutes where the keyword was mentioned.\\\",\\n\\\"depend\\\": \\\"requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced epidemiologist sharing firsthand knowledge of disease prevention strategies", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Virus Spread Simulation Interface\\\",\\n  \\\"description\\\": \\\"An interface to simulate the spread of a virus in a network using the EpiModel library in R. The user inputs the basic reproduction number (R0), the recovery rate, and the network size, and the interface returns a simulation of the disease spread.\\\",\\n  \\\"function_name\\\": \\\"simulate_virus_spread\\\",\\n  \\\"input_args\\\": {\\n    \\\"R0\\\": \\\"The basic reproduction number of the virus\\\",\\n    \\\"recovery_rate\\\": \\\"The recovery rate of the virus\\\",\\n    \\\"network_size\\\": \\\"The size of the network to simulate the spread in\\\"\\n  },\\n  \\\"return\\\": \\\"A simulation of the disease spread in the network.\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"rpy2.robjects\\\"],\\n    \\\"R libraries\\\": [\\\"EpiModel\\\"],\\n    \\\"Web APIs\\\": [],\\n    \\\"Machine Learning Models\\\": []\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A frustrated former AT&T customer who had difficulty with MicroCell deactivation", "synthesized text": "\"{\\n    \\\"name\\\": \\\"MicroCell Deactivation Interface\\\",\\n    \\\"description\\\": \\\"An interface for deactivating a MicroCell using AT&T's web API. The user only needs to provide their account credentials and the MicroCell's serial number.\\\",\\n    \\\"function_name\\\": \\\"deactivate_microcell\\\",\\n    \\\"input_args\\\": {\\n        \\\"account_username\\\": \\\"The user's AT&T account username\\\",\\n        \\\"account_password\\\": \\\"The user's AT&T account password\\\",\\n        \\\"microcell_serial\\\": \\\"The serial number of the MicroCell to be deactivated\\\"\\n    },\\n    \\\"return\\\": \\\"A message confirming the MicroCell has been deactivated\\\",\\n    \\\"depend\\\": \\\"requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A chemist with a background in developing e-liquid flavors and nicotine alternatives", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flavor Compound Analysis Interface\\\",\\n\\\"description\\\": \\\"Predicts the flavor profile of a chemical compound given its molecular structure in SMILES format\\\",\\n\\\"function_name\\\": \\\"predict_flavor\\\",\\n\\\"input_args\\\": {\\n    \\\"smiles\\\": \\\"String - Molecular structure of the compound in SMILES format\\\"\\n},\\n\\\"return\\\": \\\"List - Predicted flavor profile of the compound\\\",\\n\\\"depend\\\": \\\"rdkit, pytorch, pre-trained flavor prediction model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A startup founder seeking guidance on structuring their build process using MSBuild", "synthesized text": "\"{\\n\\\"name\\\": \\\"MSBuild Project Dependency Graph Interface\\\",\\n\\\"description\\\": \\\"An interface to extract a dependency graph from an MSBuild project file (.csproj or .vbproj). This can help users understand the structure of their build process.\\\",\\n\\\"function_name\\\": \\\"create_dependency_graph\\\",\\n\\\"input_args\\\": [\\\"project_file\\\"],\\n\\\"return\\\": \\\"A dependency graph dictionary where keys are project file names and values are lists of dependent project file names.\\\",\\n\\\"depend\\\": [\\\"Python's xml library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A professional Node.js programmer working on geospatial applications", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Geospatial Data Processing Interface\\\",\\n  \\\"description\\\": \\\"An interface to simplify geospatial data from a shapefile or GeoJSON file using the Douglas-Peucker algorithm. Higher tolerance values will result in more simplified shapes.\\\",\\n  \\\"function_name\\\": \\\"simplify_geospatial_data\\\",\\n  \\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"The path to the shapefile or GeoJSON file.\\\",\\n    \\\"tolerance\\\": \\\"The tolerance parameter for the Douglas-Peucker algorithm. Higher values will result in more simplified shapes.\\\"\\n  },\\n  \\\"return\\\": \\\"A GeoDataFrame with simplified geometric objects.\\\",\\n  \\\"depend\\\": \\\"This function leverages the Geopandas Python library and the Shapely library for geometric operations.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A person who frequently shops at COSTCO and always mistakenly searches \"Cosco\".", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Store Name Correction Interface\\\",\\n  \\\"description\\\": \\\"Corrects common misspellings of the word 'COSTCO'. Currently only corrects 'Cosco' to 'COSTCO', but can be expanded to other misspellings.\\\",\\n  \\\"function_name\\\": \\\"correct_store_name\\\",\\n  \\\"input_args\\\": {\\n    \\\"name\\\": \\\"the store name the user is looking for\\\"\\n  },\\n  \\\"return\\\": \\\"the corrected store name\\\",\\n  \\\"depend\\\": \\\"None\\\"\\n}\"", "description": "tool development"}
{"input persona": "a prospective student looking to study Publishing at George Washington University", "synthesized text": "\"{\\n\\\"name\\\": \\\"University Course Information Interface\\\",\\n\\\"description\\\": \\\"An interface to gather information about a specific course from a university's website. The user provides the name of the university and the course, and receives a description of the course, its requirements, and the faculty members teaching it.\\\",\\n\\\"function_name\\\": \\\"get_course_info\\\",\\n\\\"input_args\\\": [\\\"university_name\\\", \\\"course_name\\\"],\\n\\\"return\\\": {\\\"description\\\": \\\"string\\\", \\\"requirements\\\": \\\"list of strings\\\", \\\"faculty\\\": \\\"list of strings\\\"},\\n\\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Excitable '80s music enthusiast", "synthesized text": "\"{\\n\\\"name\\\": \\\"Spotify Playlist Generator Interface\\\",\\n\\\"description\\\": \\\"Generates a Spotify playlist of '80s music based on the user's favorite '80s artist. The playlist includes songs from the specified artist and similar ones.\\\",\\n\\\"function_name\\\": \\\"generate_80s_playlist\\\",\\n\\\"input_args\\\": {\\\"favorite_artist\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"URL of the generated Spotify playlist (string)\\\",\\n\\\"depend\\\": {\\\"Web APIs\\\": [\\\"Spotify Web API\\\"], \\\"Python libraries\\\": [\\\"spotipy\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "Annoyed and Worried Parent", "synthesized text": "\"{\\n\\\"name\\\": \\\"Child Online Activity Monitor\\\",\\n\\\"description\\\": \\\"This interface monitors a child's online activity and alerts the parent if any inappropriate content is detected.\\\",\\n\\\"function_name\\\": \\\"monitor_child_activity\\\",\\n\\\"input_args\\\": [\\\"url\\\"],\\n\\\"return\\\": \\\"An alert message if inappropriate content is detected or a message indicating no inappropriate content was found.\\\",\\n\\\"depend\\\": [\\\"Python's request library\\\", \\\"BeautifulSoup for web scraping\\\", \\\"Perspective API for content moderation\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A financial institution representative who is interested in implementing the secure payment system", "synthesized text": "\"{\\n\\\"name\\\": \\\"Secure Payment Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Stripe API to process secure payments. It takes the amount, currency, and customer's card details as input and returns the status of the payment.\\\",\\n\\\"function_name\\\": \\\"process_payment\\\",\\n\\\"input_args\\\": [\\\"amount\\\", \\\"currency\\\", \\\"card_number\\\", \\\"exp_month\\\", \\\"exp_year\\\", \\\"cvc\\\"],\\n\\\"return\\\": \\\"The status of the payment (e.g., 'succeeded')\\\",\\n\\\"depend\\\": \\\"Stripe API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Finnish airline pilot with 15 years of experience flying commercial planes.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Flight Weather Information Interface\\\",\\n  \\\"description\\\": \\\"Fetches and returns the current weather information for a specified city. Useful for pilots to check weather conditions.\\\",\\n  \\\"function_name\\\": \\\"get_weather_info\\\",\\n  \\\"input_args\\\": \\\"city_name\\\",\\n  \\\"return\\\": \\\"Dictionary with weather information or error message.\\\",\\n  \\\"depend\\\": \\\"Python requests library, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A counter-terrorism expert who regularly contributes to think tank discussions on South Asian security issues", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Terrorist Activity Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses the Global Terrorism Database API to fetch and summarize information about terrorist activities in a given country.\\\",\\n  \\\"function_name\\\": \\\"get_terrorist_activities\\\",\\n  \\\"input_args\\\": \\\"country - a string that represents the name of the country\\\",\\n  \\\"return\\\": \\\"A dictionary with a summary of terrorist activities in the country. The dictionary includes total number of incidents, number of major attacks, and a count of incidents by the terrorist group.\\\",\\n  \\\"depend\\\": \\\"Python libraries: requests, pandas; Web APIs: Global Terrorism Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A legal expert who ensures that OVS implementation aligns with telecommunications regulations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Telecommunications Regulation Compliance Interface\\\",\\n\\\"description\\\": \\\"This interface checks whether the current OVS implementation is compliant with a specific telecommunications regulation.\\\",\\n\\\"function_name\\\": \\\"check_compliance_with_regulation\\\",\\n\\\"input_args\\\": \\\"regulation_id - the ID of the regulation to check for compliance with\\\",\\n\\\"return\\\": \\\"boolean value - True if the OVS implementation is compliant with the regulation, False otherwise.\\\",\\n\\\"depend\\\": \\\"Legal database API, Internal system API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced XAML developer who shares tips and tricks to optimize code and improve performance", "synthesized text": "\"{\\n\\\"name\\\": \\\"XAML Code Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface optimizes a XAML code file by removing unnecessary attributes, improving performance and code readability.\\\",\\n\\\"function_name\\\": \\\"optimize_xaml\\\",\\n\\\"input_args\\\": \\\"path_to_xaml\\\",\\n\\\"return\\\": \\\"This function doesn't return a value. The input XAML file is modified in-place.\\\",\\n\\\"depend\\\": \\\"python's xml.etree.ElementTree module\\\"\\n}\"", "description": "tool development"}
{"input persona": "A CEO of a large electronics manufacturing company resistant to implementing sustainable practices due to cost factors", "synthesized text": "\"{\\n\\\"name\\\": \\\"Carbon Footprint Calculation Interface\\\",\\n\\\"description\\\": \\\"Estimates the carbon footprint of a company based on its operations and manufacturing processes.\\\",\\n\\\"function_name\\\": \\\"calculate_carbon_footprint\\\",\\n\\\"input_args\\\": {\\n    \\\"energy_usage\\\": \\\"Annual energy usage of the company in kilowatt-hours (kWh)\\\",\\n    \\\"waste_produced\\\": \\\"Annual waste produced by the company in tonnes\\\",\\n    \\\"transportation_distance\\\": \\\"Annual distance covered by the company's transportation in kilometres\\\",\\n    \\\"num_employees\\\": \\\"Number of employees in the company\\\"\\n},\\n\\\"return\\\": \\\"Estimated annual carbon footprint of the company in tonnes of CO2 equivalent.\\\",\\n\\\"depend\\\": [\\\"sklearn.externals.joblib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A competitor who focuses on creating extravagant, modern casinos with flashy attractions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Casino Design Inspiration Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the latest design trends and inspirations from Pinterest based on the input design type. It uses web scraping to fetch the relevant Pinterest pins.\\\",\\n\\\"function_name\\\": \\\"get_design_inspiration\\\",\\n\\\"input_args\\\": \\\"design_type - A string indicating the type of design inspiration user is looking for.\\\",\\n\\\"return\\\": \\\"A list of URLs of Pinterest pins related to the input design type.\\\",\\n\\\"depend\\\": \\\"Python libraries: BeautifulSoup, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "as an emerging artist who have worked in multiple art galleries, looking for opportunities in bigger platforms.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Art Exhibition Opportunity Finder\\\",\\n\\\"description\\\": \\\"This interface provides users with a list of art exhibition opportunities that match their art style.\\\",\\n\\\"function_name\\\": \\\"get_art_exhibition_opportunities\\\",\\n\\\"input_args\\\": [\\\"style\\\"],\\n\\\"return\\\": \\\"A list of art exhibition opportunities that match the given style.\\\",\\n\\\"depend\\\": [\\\"Art Institute of Chicago API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A webmaster who is always conscious about user security and web standards compliance.", "synthesized text": "\"{\\n\\\"Issued To\\\": {\\n    \\\"C\\\": \\\"US\\\",\\n    \\\"ST\\\": \\\"California\\\",\\n    \\\"L\\\": \\\"Mountain View\\\",\\n    \\\"O\\\": \\\"Google LLC\\\",\\n    \\\"CN\\\": \\\"*.google.com\\\"\\n},\\n\\\"Issued By\\\": {\\n    \\\"C\\\": \\\"US\\\",\\n    \\\"O\\\": \\\"Google Trust Services\\\",\\n    \\\"CN\\\": \\\"GTS CA 1O1\\\"\\n},\\n\\\"Validity Start\\\": \\\"20210803083636Z\\\",\\n\\\"Validity End\\\": \\\"20211026183635Z\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional athlete who credits the optometrist's treatment for improving their performance on the field", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Visual Acuity Test Interface\\\",\\n  \\\"description\\\": \\\"An interface for a visual acuity test. The user inputs the path to a video file where they are identifying objects from a distance, and the interface returns a score based on how accurately and quickly they identified the objects.\\\",\\n  \\\"function_name\\\": \\\"object_detection\\\",\\n  \\\"input_args\\\": \\\"path_to_video\\\",\\n  \\\"return\\\": \\\"score\\\",\\n  \\\"depend\\\": \\\"OpenCV, TensorFlow Hub, TensorFlow, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A busy working professional who relies on the kitchen automation system to simplify meal preparation", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Recipe Recommendation Interface\\\",\\n  \\\"description\\\": \\\"This interface uses Spoonacular Food API to recommend recipes based on the ingredients provided by the user. It returns a recipe that includes the title, ingredients, and cooking instructions.\\\",\\n  \\\"function_name\\\": \\\"get_recipe_from_ingredients\\\",\\n  \\\"input_args\\\": [\\\"ingredients\\\"],\\n  \\\"return\\\": {\\n    \\\"title\\\": \\\"Recipe Title\\\",\\n    \\\"ingredients\\\": \\\"List of Ingredients\\\",\\n    \\\"instructions\\\": \\\"Cooking Instructions\\\"\\n  },\\n  \\\"depend\\\": \\\"Spoonacular Food API\\\"\\n}\"", "description": "tool development"}
{"input persona": "an existing investor in Outdoor Voices", "synthesized text": "\"{\\n\\\"name\\\": \\\"Investor Information Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a company name as input and returns a list of investors in that company.\\\",\\n\\\"function_name\\\": \\\"get_investors\\\",\\n\\\"input_args\\\": \\\"company_name\\\",\\n\\\"return\\\": \\\"List of investors in the company\\\",\\n\\\"depend\\\": \\\"Python's requests and Beautiful Soup libraries for web scraping\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sports physiologist who collaborates on research projects and provides expertise on the physiological aspects of running", "synthesized text": "\"{\\n\\\"name\\\": \\\"Running Performance Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model trained on physiological metrics to predict running performance, such as the time to complete a marathon.\\\",\\n\\\"function_name\\\": \\\"predict_marathon_time\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"weight\\\", \\\"height\\\", \\\"resting_hr\\\", \\\"max_hr\\\"],\\n\\\"return\\\": \\\"Predicted marathon completion time in minutes\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"numpy\\\", \\\"scikit-learn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Ali, a 22-year-old university student studying Software Engineering with a keen interest in new and emerging technologies", "synthesized text": "\"{\\n\\\"name\\\": \\\"AI News Article Summarization Interface\\\",\\n\\\"description\\\": \\\"An interface that accepts the URL of an article and returns a short summary of the article.\\\",\\n\\\"function_name\\\": \\\"summarize_article\\\",\\n\\\"input_args\\\": [\\\"url\\\"],\\n\\\"return\\\": \\\"Summary of the article as a string\\\",\\n\\\"depend\\\": [\\\"gensim\\\", \\\"requests\\\", \\\"bs4\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Ruby developer who actively participates in online forums and can provide advice and resources specific to Ruby and Azure API", "synthesized text": "\"{\\n\\\"name\\\": \\\"Azure Resource Management Interface\\\",\\n\\\"description\\\": \\\"Interface to interact with Azure Resource Manager for managing resources in Azure\\\",\\n\\\"function_name\\\": \\\"get_azure_resource_management_client\\\",\\n\\\"input_args\\\": {\\\"subscription_id\\\": \\\"string\\\", \\\"client_id\\\": \\\"string\\\", \\\"client_secret\\\": \\\"string\\\", \\\"tenant_id\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"ResourceManagementClient object\\\",\\n\\\"depend\\\": \\\"Azure SDK for Python\\\"\\n}\"", "description": "tool development"}
{"input persona": "a big fan of Frank Sinatra", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Spotify's Web API to recommend similar artists based on a given artist's name.\\\",\\n\\\"function_name\\\": \\\"get_similar_artists\\\",\\n\\\"input_args\\\": [\\n    {\\n        \\\"name\\\": \\\"artist_name\\\",\\n        \\\"type\\\": \\\"string\\\",\\n        \\\"description\\\": \\\"Name of the artist\\\"\\n    }\\n],\\n\\\"return\\\": {\\n    \\\"type\\\": \\\"list of strings\\\",\\n    \\\"description\\\": \\\"List of names of similar artists\\\"\\n},\\n\\\"depend\\\": [\\\"spotipy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "As an alumnus of Boston College and a former college athlete with a deep passion for collegiate sports and its positive impact on students and institutions.", "synthesized text": "\"{\\n\\\"name\\\": \\\"NCAA Sports Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface that returns a wealth of statistical data about a specified NCAA football team's performance in the current season using the collegefootballdata.com API.\\\",\\n\\\"function_name\\\": \\\"get_ncaa_team_stats\\\",\\n\\\"input_args\\\": {\\n    \\\"team\\\": \\\"string\\\"\\n    },\\n\\\"return\\\": {\\n    \\\"type\\\": \\\"json\\\",\\n    \\\"description\\\": \\\"A json object containing a wealth of statistical data about the team's performance in the current season\\\"\\n    },\\n\\\"depend\\\": {\\n    \\\"python library\\\": [\\\"requests\\\"],\\n    \\\"web API\\\": [\\\"https://api.collegefootballdata.com\\\"]\\n    }\\n}\"", "description": "tool development"}
{"input persona": "A proponent of simplified global communication who advocates for a single universal language", "synthesized text": "\"{\\n\\\"name\\\": \\\"Language Translation Interface\\\", \\n\\\"description\\\": \\\"This interface takes a piece of text and a target language as input, and returns the text translated into the target language. It uses the Google Translate API for translation.\\\", \\n\\\"function_name\\\": \\\"translate_text\\\", \\n\\\"input_args\\\": {\\\"input_text\\\": \\\"string\\\", \\\"target_language\\\": \\\"string\\\"}, \\n\\\"return\\\": \\\"string\\\", \\n\\\"depend\\\": \\\"Google Translate API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cybersecurity analyst who helps identify potential security risks and vulnerabilities in jailbroken devices", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Jailbroken Device Risk Assessment Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses the VirusTotal API to generate a threat analysis report for a given file or URL. This report can help identify potential security risks and vulnerabilities in jailbroken devices.\\\",\\n  \\\"function_name\\\": \\\"get_threat_report\\\",\\n  \\\"input_args\\\": {\\n    \\\"resource\\\": \\\"The file or URL to be analysed for potential security risks.\\\"\\n  },\\n  \\\"return\\\": \\\"A threat analysis report, returned as a JSON object, detailing the potential risks and vulnerabilities associated with the input file or URL.\\\",\\n  \\\"depend\\\": \\\"VirusTotal API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computer science major fascinated by the potential applications of bioinformatics in cybersecurity", "synthesized text": "\"{\\n  \\\"name\\\": \\\"DNA Sequence Alignment Interface\\\",\\n  \\\"description\\\": \\\"An interface to align two DNA, RNA, or protein sequences using the Biopython library. This function will return the optimal alignment between the two sequences.\\\",\\n  \\\"function_name\\\": \\\"align_sequences\\\",\\n  \\\"input_args\\\": [\\\"seq1\\\", \\\"seq2\\\"],\\n  \\\"return\\\": \\\"A string representing the optimal alignment between the two sequences\\\",\\n  \\\"depend\\\": [\\\"Biopython\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A first-time parent looking for effective strategies to manage twins' sleep schedules", "synthesized text": "\"{\\n\\\"name\\\": \\\"Baby Sleep Schedule Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to suggest an optimized sleep schedule for managing twins based on current sleep patterns, feeding times, and other relevant factors.\\\",\\n\\\"function_name\\\": \\\"optimize_sleep_schedule\\\",\\n\\\"input_args\\\": \\\"input_data - A dictionary containing details about the twins' current sleep patterns, feeding times, and any other relevant factors\\\",\\n\\\"return\\\": \\\"A list containing the suggested optimized sleep schedule for managing the twins\\\",\\n\\\"depend\\\": \\\"sklearn, pandas, joblib\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Montana local who believes in the importance of science and public health regulations", "synthesized text": "\"{\\n  \\\"name\\\": \\\"COVID-19 Data Retrieval\\\",\\n  \\\"description\\\": \\\"Fetches the latest COVID-19 data for the user's specified location\\\",\\n  \\\"function_name\\\": \\\"get_covid19_data\\\",\\n  \\\"input_args\\\": {\\\"location\\\": \\\"string\\\"},\\n  \\\"return\\\": {\\\"Confirmed Cases\\\": \\\"int\\\", \\\"Deaths\\\": \\\"int\\\", \\\"Recovered\\\": \\\"int\\\", \\\"Active Cases\\\": \\\"int\\\", \\\"Last Updated\\\": \\\"datetime\\\"},\\n  \\\"depend\\\": {\\\"requests\\\": \\\"Python library\\\", \\\"COVID-19 Data API\\\": \\\"Web API\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A playwright who draws inspiration from the iconic films and screenplays of old Hollywood", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Script Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to analyze film scripts, extracting key elements such as character names, locations, and actions.\\\",\\n\\\"function_name\\\": \\\"analyze_script\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_script\\\": \\\"The path to the script file to be analyzed.\\\"\\n},\\n\\\"return\\\": \\\"A structured analysis of the script, including character names, locations, and actions.\\\",\\n\\\"depend\\\": \\\"Python libraries: transformers, torch\\\"\\n}\"", "description": "tool development"}
{"input persona": "A chemical engineer who applies principles of molecular interactions to design and optimize chemical processes", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Molecular Interactions Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts properties of a molecule crucial for drug design, based on its SMILES notation. Properties include molecular weight, number of hydrogen bond donors and acceptors, and logP value.\\\",\\n  \\\"function_name\\\": \\\"predict_molecular_interactions\\\",\\n  \\\"input_args\\\": {\\n    \\\"smiles\\\": \\\"string representation of a molecule (SMILES notation)\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"molecular_weight\\\": \\\"Predicted molecular weight\\\",\\n    \\\"num_h_donors\\\": \\\"Predicted number of hydrogen bond donors\\\",\\n    \\\"num_h_acceptors\\\": \\\"Predicted number of hydrogen bond acceptors\\\",\\n    \\\"logp\\\": \\\"Predicted logP value\\\"\\n  },\\n  \\\"depend\\\": \\\"RDKit Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a graduate chemistry student who admires Emily Carter and David MacMillan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Molecule Structure Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the 3D structure of a molecule based on its SMILES representation using the AlphaFold2 model.\\\",\\n\\\"function_name\\\": \\\"smiles_to_3d_structure\\\",\\n\\\"input_args\\\": {\\\"smiles\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"3D coordinates of the atoms in the molecule (numpy array)\\\",\\n\\\"depend\\\": \\\"rdkit, alphafold2_pytorch\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Greek scientist who has worked at FORTH for several years", "synthesized text": "\"{\\n\\\"name\\\": \\\"Protein Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes in a protein sequence and returns a detailed analysis about the composition and properties of the protein.\\\",\\n\\\"function_name\\\": \\\"protein_analysis\\\",\\n\\\"input_args\\\": {\\n    \\\"protein_sequence\\\": \\\"A string of amino acids representing a protein sequence.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"Molecular Weight\\\": \\\"The molecular weight of the protein.\\\",\\n    \\\"Aromaticity\\\": \\\"The proportion of aromatic amino acids (Phe+Trp+Tyr).\\\",\\n    \\\"Instability Index\\\": \\\"This index provides a measure of the stability of the protein in a test tube.\\\",\\n    \\\"Secondary Structure Fraction\\\": \\\"A tuple with information about the fraction of amino acids which tend to be in helix, turn or sheet.\\\",\\n    \\\"Amino Acid Percent\\\": \\\"A dictionary of the percent occurrence for each amino acid in the protein.\\\"\\n},\\n\\\"depend\\\": \\\"Biopython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A representative from the Ministry of Education, advocating for the incorporation of VR technology in the national curriculum", "synthesized text": "\"{\\n\\\"name\\\": \\\"VR Educational Content Interface\\\",\\n\\\"description\\\": \\\"This interface provides access to a large collection of 3D assets and VR scenes that can be used for educational purposes. Users input a search term related to the content they are looking for, and the interface returns a list of related VR content available.\\\",\\n\\\"function_name\\\": \\\"get_vr_educational_content\\\",\\n\\\"input_args\\\": {\\n    \\\"search_term\\\": \\\"A string representing the educational content the user is looking for (e.g., 'biology', 'history', 'mathematics')\\\"\\n},\\n\\\"return\\\": \\\"A list of strings representing the names of the related VR content available.\\\",\\n\\\"depend\\\": \\\"This function leverages the Google Poly API\\\"\\n}\"", "description": "tool development"}
{"input persona": "As a community manager of an online quilting forum", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Text to Speech Interface\\\",\\n  \\\"description\\\": \\\"Converts a given text into speech and saves it as an MP3 file.\\\",\\n  \\\"function_name\\\": \\\"text_to_speech\\\",\\n  \\\"input_args\\\": {\\\"text\\\": \\\"string\\\", \\\"language\\\": \\\"string (optional)\\\", \\\"slow\\\": \\\"bool (optional)\\\"},\\n  \\\"return\\\": \\\"string (path to the generated MP3 file)\\\",\\n  \\\"depend\\\": \\\"gtts library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A popular gaming content creator who showcases the modder's voice packs in their videos", "synthesized text": "\"{\\n\\\"name\\\": \\\"Voice Change Interface\\\",\\n\\\"description\\\": \\\"This interface takes the path to a source audio file and a target audio file, and returns an audio file where the source voice is modified to sound like the target voice.\\\",\\n\\\"function_name\\\": \\\"change_voice\\\",\\n\\\"input_args\\\": [\\\"source_voice_path\\\", \\\"target_voice_path\\\"],\\n\\\"return\\\": \\\"Path to the converted audio file\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"numpy\\\", \\\"soundfile\\\", \\\"librosa\\\"], \\\"Machine Learning Models\\\": [\\\"Voice conversion model from TensorFlow Hub\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A journalist interested in understanding the limitations and controversies of IQ testing", "synthesized text": "\"{\\n\\\"name\\\": \\\"IQ Test Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes a provided text and returns the major limitations, controversies and criticisms associated with IQ testing mentioned in the text.\\\",\\n\\\"function_name\\\": \\\"analyze_iq_controversies\\\",\\n\\\"input_args\\\": {\\\"text\\\": \\\"A text string about IQ test.\\\"},\\n\\\"return\\\": {\\\"Controversies\\\": \\\"A Counter object with controversy-related words and their frequencies.\\\", \\\"Limitations\\\": \\\"A Counter object with limitation-related words and their frequencies.\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"NLTK\\\"], \\\"web APIs\\\": [\\\"WordNet\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "I am a diplomat with extensive experience in international relations, particularly in matters concerning sovereignty, territorial integrity, and international law.", "synthesized text": "\"{\\n\\\"name\\\": \\\"UN Resolutions Search Interface\\\",\\n\\\"description\\\": \\\"An interface to search for United Nations resolutions based on a specific topic. The user inputs a topic and gets back the titles and document symbols of related UN resolutions.\\\",\\n\\\"function_name\\\": \\\"search_un_resolutions\\\",\\n\\\"input_args\\\": {\\\"topic\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"list of dicts: [{'title': 'string', 'symbol': 'string'}, ...]\\\",\\n\\\"depend\\\": \\\"requests library, UN documentation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A traditional muralist who believes in seeking permissions and following the rules set by local authorities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Muralist Legal Permit Interface\\\",\\n\\\"description\\\": \\\"An interface for muralists to get information about the necessary legal permits in their city. The interface will return the contact information of the local authorities responsible for granting such permits.\\\",\\n\\\"function_name\\\": \\\"get_muralist_permit_info\\\",\\n\\\"input_args\\\": \\\"city - The city where the muralist plans to paint a mural.\\\",\\n\\\"return\\\": \\\"Returns a list of dictionaries. Each dictionary contains the name, office, phone numbers, and email addresses (if available) of a local authority responsible for granting muralist permits.\\\",\\n\\\"depend\\\": \\\"Python requests library, Google Civic Information API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An elderly woman suffering from hypertension in rural China.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Blood Pressure Prediction Interface\\\",\\n  \\\"description\\\": \\\"This interface predicts a user's blood pressure based on their lifestyle factors such as diet, exercise, smoking, alcohol consumption, sleep, and stress. The user inputs their lifestyle factors and the interface returns a blood pressure prediction.\\\",\\n  \\\"function_name\\\": \\\"predict_blood_pressure\\\",\\n  \\\"input_args\\\": [\\\"diet\\\", \\\"exercise\\\", \\\"smoking\\\", \\\"alcohol\\\", \\\"sleep\\\", \\\"stress\\\"],\\n  \\\"return\\\": \\\"A prediction of the user's blood pressure.\\\",\\n  \\\"depend\\\": \\\"scikit-learn library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a stage play enthusiast living in Danville, California.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Theater Show Finder\\\",\\n\\\"description\\\": \\\"Finds upcoming theater shows in a specified location and date range using the Ticketmaster API.\\\",\\n\\\"function_name\\\": \\\"get_upcoming_shows\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"start_date\\\", \\\"end_date\\\"],\\n\\\"return\\\": \\\"List of dictionaries, each representing a theater show with its name, date, and venue.\\\",\\n\\\"depend\\\": \\\"requests library, Ticketmaster API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cloud architect specializing in designing and implementing distributed database systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Database Health Check Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to check the health status of their PostgreSQL database by connecting to the database using the provided connection details. If the connection is successful, the database is considered healthy.\\\",\\n\\\"function_name\\\": \\\"check_database_health\\\",\\n\\\"input_args\\\": [\\\"database_name\\\", \\\"user\\\", \\\"password\\\", \\\"host\\\", \\\"port\\\"],\\n\\\"return\\\": \\\"Returns 'Healthy' if the database connection is successful, 'Unhealthy' otherwise.\\\",\\n\\\"depend\\\": \\\"psycopg2 Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a young aspiring female tennis player and Constance Luard's fan.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tennis Match Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface that uses sports data APIs to fetch the latest match statistics of a specified professional tennis player.\\\",\\n\\\"function_name\\\": \\\"get_player_statistics\\\",\\n\\\"input_args\\\": \\\"player_name - The name of the professional tennis player whose statistics are to be fetched.\\\",\\n\\\"return\\\": \\\"A JSON object containing the player's latest match statistics such as aces, double faults, first serve percentage, etc.\\\",\\n\\\"depend\\\": \\\"Uses the SportsData.io Tennis API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a happy and satisfied patient of Dr. Shishir Agarwal", "synthesized text": "\"{\\n\\\"name\\\": \\\"Doctor Rating Interface\\\",\\n\\\"description\\\": \\\"This interface provides the average rating and total number of reviews for a specified doctor using the Healthgrades API.\\\",\\n\\\"function_name\\\": \\\"get_doctor_rating\\\",\\n\\\"input_args\\\": {\\\"doctor_name\\\": \\\"String representing the doctor's name\\\"},\\n\\\"return\\\": {\\\"average_rating\\\": \\\"Float representing the average rating\\\", \\\"total_reviews\\\": \\\"Integer representing the total number of reviews\\\"},\\n\\\"depend\\\": \\\"Web API: Healthgrades API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A drunken Alehouse Bard who sees the humor in everything.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Joke Generation Interface\\\",\\n\\\"description\\\": \\\"This interface generates a joke related to the given topic by leveraging the GPT-2 model from Huggingface.\\\",\\n\\\"function_name\\\": \\\"generate_joke\\\",\\n\\\"input_args\\\": {\\n    \\\"topic\\\": \\\"A string representing the topic for the joke.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"joke\\\": \\\"A string representing the generated joke.\\\"\\n},\\n\\\"depend\\\": \\\"Huggingface's transformers library (GPT2LMHeadModel and GPT2Tokenizer)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A topiary enthusiast from a different country, sharing techniques and inspiration through online forums", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Plant Image Classification Interface\\\",\\n  \\\"description\\\": \\\"A high-level interface that uses a pre-trained model from TensorFlow Hub to classify plant species based on images. The user inputs the path to an image file and the interface returns the identified plant species.\\\",\\n  \\\"function_name\\\": \\\"classify_plant\\\",\\n  \\\"input_args\\\": \\\"path_to_img\\\",\\n  \\\"return\\\": \\\"class_id\\\",\\n  \\\"depend\\\": \\\"tensorflow, tensorflow_hub, google/aiy/vision/classifier/plants_V1/1\\\"\\n}\"", "description": "tool development"}
{"input persona": "a travel blogger who specializes in remote paradise islands and had to cancel the planned trip to the Cook Islands due to the pandemic", "synthesized text": "\"{\\n\\\"name\\\": \\\"Virtual Travel Guide Interface\\\",\\n\\\"description\\\": \\\"This interface returns a summary of a location from its Wikipedia page, allowing users to virtually explore places they cannot visit.\\\",\\n\\\"function_name\\\": \\\"get_location_info\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": \\\"A string containing a summary of the location.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A distillery owner looking to collaborate on creating limited-edition whiskey releases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Whiskey Flavor Profile Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface compares the flavor profiles of two whiskeys based on reviews and tasting notes, returning a similarity score.\\\",\\n\\\"function_name\\\": \\\"compare_whiskeys\\\",\\n\\\"input_args\\\": [\\\"whiskey1\\\", \\\"whiskey2\\\"],\\n\\\"return\\\": \\\"A dictionary containing the flavor profiles of the two whiskeys and a similarity score\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A fellow executive who has found balance through implementing strict boundaries between work and personal life", "synthesized text": "\"{\\n\\\"name\\\": \\\"Work-Life Balance Reminder Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that allows users to set strict time boundaries for work and personal life. Sends a reminder when it's time to switch from work to personal life or vice versa.\\\",\\n\\\"function_name\\\": \\\"work_life_balance_reminder\\\",\\n\\\"input_args\\\": \\n    {\\n        \\\"work_start_time\\\": \\\"The time when the work day starts, in 24-hour format (e.g., '09:00')\\\",\\n        \\\"work_end_time\\\": \\\"The time when the work day ends, in 24-hour format (e.g., '17:00')\\\",\\n        \\\"reminder\\\": \\\"A function that takes a string message as input and sends a reminder to the user\\\"\\n    },\\n\\\"return\\\": \\\"This function does not return a value. It runs indefinitely, sending reminders at the specified times.\\\",\\n\\\"depend\\\": \\\"Python's built-in datetime module and third-party library schedule\\\"\\n}\"", "description": "tool development"}
{"input persona": "I'm a local Hong Konger and urban explorer who is passionate about modern architecture and sustainable urban design. I keep an eye on new developments reshaping the cityscape and I'm particularly interested in the transformation of Kowloon East.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Construction Status Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Buildings Department of Hong Kong's API to return the current status of a building's construction.\\\",\\n\\\"function_name\\\": \\\"get_building_status\\\",\\n\\\"input_args\\\": \\\"application_number\\\",\\n\\\"return\\\": \\\"The current status of the building's construction.\\\",\\n\\\"depend\\\": \\\"requests library, Buildings Department of Hong Kong API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A TV producer responsible for broadcasting and staging major baseball matches", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Baseball Pitch Type Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the type of pitch a pitcher is going to throw next based on available game data.\\\",\\n  \\\"function_name\\\": \\\"predict_pitch_type\\\",\\n  \\\"input_args\\\": [\\\"pitcher_id\\\", \\\"arm_angle\\\", \\\"release_speed\\\", \\\"spin_rate\\\", \\\"release_pos_x\\\", \\\"release_pos_z\\\"],\\n  \\\"return\\\": \\\"Pitch type (one of 'Fastball', 'Curveball', 'Slider', 'Changeup', 'Sinker', 'Cutter', 'Splitter')\\\",\\n  \\\"depend\\\": \\\"Uses a pre-trained model from PyTorch\\\"\\n}\"", "description": "tool development"}
{"input persona": "A vocational guidance counselor specialized in helping workers transition to emerging industries", "synthesized text": "\"{\\n\\\"name\\\": \\\"Skill Gap Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the skill gap between two industries using the ONET Web Services API. It returns a list of new skills needed to transition to the target industry and a list of skills that can be transferred from the current industry.\\\",\\n\\\"function_name\\\": \\\"analyze_skill_gap\\\",\\n\\\"input_args\\\": {\\n    \\\"current_industry\\\": \\\"The industry in which the user is currently working. This should be a string that corresponds to an industry recognized by the ONET Web Services API.\\\",\\n    \\\"target_industry\\\": \\\"The industry to which the user wants to transition. This should be a string that corresponds to an industry recognized by the ONET Web Services API.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"new_skills_needed\\\": \\\"A list of skills that the user needs to acquire in order to transition to the target industry.\\\",\\n    \\\"transferable_skills\\\": \\\"A list of skills that the user can leverage when transitioning to the target industry.\\\"\\n},\\n\\\"depend\\\": \\\"Python's requests library, ONET Web Services API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A firefighter working in a metropolitan city, dealing with the unique challenges of night shifts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Night Shift Sleep Cycle Adjustment Interface\\\",\\n\\\"description\\\": \\\"An interface to help firefighters adjust their sleep cycle for night shifts. The user inputs the start and end times of their night shift, and the interface returns a recommended sleep schedule.\\\",\\n\\\"function_name\\\": \\\"adjust_to_night_shift\\\",\\n\\\"input_args\\\": [\\\"start_time\\\", \\\"end_time\\\"],\\n\\\"return\\\": \\\"Dictionary with 'Sleep Start Time' and 'Sleep End Time'\\\",\\n\\\"depend\\\": \\\"Python's datetime library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An 80-year-old architect retired in Perth after a long career in Australia and Europe.", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model Viewer Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to view 3D models of architectural designs.\\\",\\n\\\"function_name\\\": \\\"view_3d_model\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"The file path of the 3D model to be viewed\\\"},\\n\\\"return\\\": \\\"Renders and displays the 3D model in a new window\\\",\\n\\\"depend\\\": \\\"Python library: PyVista\\\"\\n}\"", "description": "tool development"}
{"input persona": "A high school agriculture teacher looking for resources to teach students about soil fertility", "synthesized text": "\"{\\n\\\"name\\\": \\\"Soil Fertility Data Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch soil fertility-related data using the SoilGrids API. It provides information about organic carbon, pH level, sand, silt and clay fractions, bulk density, cation-exchange capacity, depth to bedrock, etc. for a given location.\\\",\\n\\\"function_name\\\": \\\"get_soil_fertility_data\\\",\\n\\\"input_args\\\": [\\\"latitude\\\", \\\"longitude\\\"],\\n\\\"return\\\": \\\"A dictionary containing soil fertility-related data for the given location\\\",\\n\\\"depend\\\": \\\"ISRIC \\u2014 World Soil Information's SoilGrids API\\\"\\n}\"", "description": "tool development"}
{"input persona": "The founder of the Hope Family Village community, who advocates for single parents and organizes resources", "synthesized text": "\"{\\n\\\"name\\\": \\\"Resource Availability Checker Interface\\\",\\n\\\"description\\\": \\\"This interface checks the availability of specific resources like child care, financial aid, etc. in zip codes within a certain distance from a given zip code.\\\",\\n\\\"function_name\\\": \\\"check_resource_availability\\\",\\n\\\"input_args\\\": [\\\"zip_code\\\", \\\"resource\\\"],\\n\\\"return\\\": \\\"A list of nearby zip codes where the specified resource is available.\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"ZipCodeAPI\\\", \\\"US Department of Health & Human Services API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An astrophysicist who always gives scientifically accurate insights and plot twists", "synthesized text": "\"{\\n\\\"name\\\": \\\"Star Position Interface\\\", \\n\\\"description\\\": \\\"This interface returns the RA (Right Ascension) and Dec (Declination) coordinates of a given star using the Astropy Python library.\\\", \\n\\\"function_name\\\": \\\"get_star_coordinates\\\", \\n\\\"input_args\\\": {\\\"star_name\\\": \\\"Name of the star\\\"}, \\n\\\"return\\\": {\\\"RA (Right Ascension)\\\": \\\"Tuple of hours, minutes, seconds\\\", \\\"Dec (Declination)\\\": \\\"Tuple of degrees, arcminutes, arcseconds\\\"}, \\n\\\"depend\\\": \\\"Astropy Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An expert in peacebuilding and conflict transformation presenting their latest research at international conferences", "synthesized text": "\"{\\n\\\"name\\\": \\\"Conference Speech Summarizer Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face Transformers to produce a concise summary of a long speech. This can be useful for presenters who need to provide a brief overview of their presentation for conference attendees or for social media sharing.\\\",\\n\\\"function_name\\\": \\\"summarize_speech\\\",\\n\\\"input_args\\\": \\\"speech_text - A string of the text of the speaker's presentation\\\",\\n\\\"return\\\": \\\"A string of the summarized text of the speaker's presentation\\\",\\n\\\"depend\\\": \\\"The function depends on the Hugging Face Transformers library, specifically the 'facebook/bart-large-cnn' model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A painter who incorporates Gord Downie's music into their artistic expression", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Mood Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Spotify Web API to analyze the mood of a song using audio features such as danceability, energy, and valence. It then uses the matplotlib library to create a color map of the song's mood.\\\",\\n\\\"function_name\\\": \\\"visualize_song_mood\\\",\\n\\\"input_args\\\": [\\\"song_name\\\", \\\"artist\\\", \\\"client_id\\\", \\\"client_secret\\\"],\\n\\\"return\\\": \\\"A bar chart representing the mood of the song.\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"requests\\\", \\\"json\\\", \\\"matplotlib.pyplot\\\"], \\\"Web APIs\\\": [\\\"Spotify Web API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a Muslim Indian who has completed the Haj pilgrimage twice.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Qibla Direction Finder Interface\\\",\\n\\\"description\\\": \\\"An interface to find the Qibla direction from any geographical location. It uses the Aladhan API to get the Qibla direction in degrees from true North.\\\",\\n\\\"function_name\\\": \\\"get_qibla_direction\\\",\\n\\\"input_args\\\": \\\"latitude, longitude\\\",\\n\\\"return\\\": \\\"Direction of Qibla in degrees from true North.\\\",\\n\\\"depend\\\": \\\"Aladhan API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A recent transplant who fell in love with the destination and decided to make it their permanent home", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface uses OpenWeatherMap API to fetch current weather and forecast based on the city name input by the user.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": {\\n    \\\"city_name\\\": \\\"Name of the city to get the weather forecast.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"Temperature\\\": \\\"Current temperature in the city in Kelvin.\\\",\\n    \\\"Atmospheric pressure\\\": \\\"Current atmospheric pressure in the city in hPa.\\\",\\n    \\\"Humidity\\\": \\\"Current humidity in the city in percentage.\\\",\\n    \\\"Description\\\": \\\"Brief description of the current weather.\\\"\\n},\\n\\\"depend\\\": \\\"This function leverages the OpenWeatherMap API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An African-American woman who is the owner of a Crossfit Affiliate gym", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Workout Recommendation Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a recommender system to suggest workouts based on the user's personal information and workout history.\\\",\\n  \\\"function_name\\\": \\\"recommend_workout\\\",\\n  \\\"input_args\\\": {\\n    \\\"user_info\\\": \\\"A 1D array representing the user's preferences and abilities (age, gender, fitness level, preferred intensity, etc.)\\\"\\n  },\\n  \\\"return\\\": \\\"A series representing the recommended workout.\\\",\\n  \\\"depend\\\": \\\"Sklearn library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A developer pushing for urban renewal projects that may involve demolishing historically significant structures", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Demolition Risk Assessment Interface\\\",\\n\\\"description\\\": \\\"An interface for assessing the risk associated with the demolition of a building. This can be used to preserve historically and architecturally significant structures.\\\",\\n\\\"function_name\\\": \\\"predict_demolition_risk\\\",\\n\\\"input_args\\\": {\\\"building_id\\\": \\\"Identifying information for the building to assess\\\"},\\n\\\"return\\\": {\\\"building_id\\\": \\\"Identifying information for the building assessed\\\", \\\"risk_level\\\": \\\"The risk level associated with the demolition of the building\\\"},\\n\\\"depend\\\": \\\"External building and architectural databases, Machine Learning model (Random Forest Classifier)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced .NET developer working on optimizing SSL connections.", "synthesized text": "\"{\\n\\\"name\\\": \\\"SSL Certificate Expiry Check Interface\\\",\\n\\\"description\\\": \\\"An interface to get the SSL certificate's expiry date of a domain.\\\",\\n\\\"function_name\\\": \\\"get_ssl_expiry_date\\\",\\n\\\"input_args\\\": \\\"domain_name\\\",\\n\\\"return\\\": \\\"SSL certificate's expiry date\\\",\\n\\\"depend\\\": \\\"Python OpenSSL library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional cricket player seeking the perfect bat for their playing style", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Cricket Bat Recommendation Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a pre-trained machine learning model to predict the best cricket bat for a player based on their playing style, batting position, and strength. The user inputs these parameters, and the interface returns the recommended bat.\\\",\\n  \\\"function_name\\\": \\\"recommend_cricket_bat\\\",\\n  \\\"input_args\\\": {\\n    \\\"playing_style\\\": \\\"The playing style of the cricketer. Possible values could be 'aggressive', 'defensive', etc.\\\",\\n    \\\"batting_position\\\": \\\"The position in the batting order where the player usually plays. This is an integer value.\\\",\\n    \\\"strength\\\": \\\"The strength of the player. This could be a measure of the player's physical strength or their skill level.\\\"\\n  },\\n  \\\"return\\\": \\\"The recommended cricket bat for the player, represented as a string.\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"pandas\\\", \\\"sklearn\\\"],\\n    \\\"machine learning models\\\": [\\\"RandomForestClassifier\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A bartender who believes that the revenue from the gambling industry helps the local economy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Gambling Industry Revenue Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves and analyzes the revenue from the gambling industry in a specific region. It also compares this revenue with the total revenue generated by all industries in the same region.\\\",\\n\\\"function_name\\\": [\\\"get_gambling_revenue\\\", \\\"compare_industries\\\"],\\n\\\"input_args\\\": {\\\"get_gambling_revenue\\\": [\\\"region\\\"], \\\"compare_industries\\\": [\\\"region\\\"]},\\n\\\"return\\\": {\\\"get_gambling_revenue\\\": \\\"gambling_revenue\\\", \\\"compare_industries\\\": {\\\"gambling_revenue\\\": \\\"gambling_revenue\\\", \\\"total_revenue\\\": \\\"total_revenue\\\", \\\"percentage\\\": \\\"percentage\\\"}},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"pandas\\\"], \\\"web_apis\\\": [\\\"economicdata.com\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A bookworm from another country who shares recommendations for translated versions of classic novels", "synthesized text": "\"{\\n\\\"name\\\": \\\"Translation Availability Checker Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google Books API to check if the translated version of a book is available in a specific language.\\\",\\n\\\"function_name\\\": \\\"check_translation_availability\\\",\\n\\\"input_args\\\": [\\\"book_title\\\", \\\"language\\\"],\\n\\\"return\\\": \\\"True if the translated version is available, False if not.\\\",\\n\\\"depend\\\": \\\"Google Books API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A skeptic housewife considering hiring an interior designer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Room Style Transfer Interface\\\",\\n\\\"description\\\": \\\"This interface transfers the style of one image to another. It is useful for interior design purposes, allowing users to preview how their room might look with a different style.\\\",\\n\\\"function_name\\\": \\\"style_transfer\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_room_img\\\": \\\"The path to the image of user's room\\\",\\n    \\\"path_to_style_img\\\": \\\"The path to the image of the style the user wants to apply\\\"\\n},\\n\\\"return\\\": \\\"An image with the style of the second image applied to the first\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "a mother from Turkey who named her daughter Zümra", "synthesized text": "\"{\\n\\\"name\\\": \\\"Turkish Name Meaning and Origin Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Nationalize.io API to return the meaning and origin of a given name. It simplifies the process of understanding the cultural and historical significance of names.\\\",\\n\\\"function_name\\\": \\\"get_name_meaning_and_origin\\\",\\n\\\"input_args\\\": {\\\"name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"name\\\": \\\"string\\\", \\\"origin\\\": \\\"string\\\"},\\n\\\"depend\\\": \\\"requests library and Nationalize.io API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A meticulous car tuner who fine-tunes the drifting champion's vehicle for optimal performance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Car Performance Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to predict the performance of a car based on its specifications. The user just needs to input the car specifications and the interface will return the estimated performance metrics.\\\",\\n\\\"function_name\\\": \\\"predict_performance\\\",\\n\\\"input_args\\\": {\\n    \\\"car_specs\\\": {\\n        \\\"type\\\": \\\"dict\\\",\\n        \\\"description\\\": \\\"A dictionary containing the car specifications, such as weight, engine power, tire grip etc.\\\"\\n    }\\n},\\n\\\"return\\\": {\\n    \\\"type\\\": \\\"dict\\\", \\n    \\\"description\\\": \\\"A dictionary containing the estimated performance metrics, such as acceleration, top speed, and drift ability.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"resources\\\": [\\n        \\\"Python library: sklearn\\\",\\n        \\\"Machine learning model: RandomForestRegressor\\\"\\n    ]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A Bed Bath & Beyond loyal customer who is both sad and hopeful about the changes.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Price Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Semantics3 API to compare the prices of a specific product across different online stores.\\\",\\n\\\"function_name\\\": \\\"get_price_comparison\\\",\\n\\\"input_args\\\": \\\"product_name\\\",\\n\\\"return\\\": \\\"A dictionary with each key being a product name and each value being another dictionary that shows the price of this product in different sites.\\\",\\n\\\"depend\\\": \\\"Python 'requests' library, Semantics3 API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A plant chemist with extensive experience in industrial production lines, especially those involving calcium compounds", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chemical Compound Prediction Interface\\\",\\n\\\"description\\\": \\\"Given a chemical reaction, predicts the resultant chemical compound.\\\",\\n\\\"function_name\\\": \\\"get_compound\\\",\\n\\\"input_args\\\": [\\\"reactants\\\"],\\n\\\"return\\\": \\\"InChI Keys of the resultant compounds in the reactions\\\",\\n\\\"depend\\\": \\\"ChEMBL web resource client\\\"\\n}\"", "description": "tool development"}
{"input persona": "The major of a small town in regional Australia facing population decline", "synthesized text": "\"{\\n\\\"name\\\": \\\"Population Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface forecasts the population trend in a region based on historical data using Facebook's Prophet forecasting model.\\\",\\n\\\"function_name\\\": \\\"forecast_population\\\",\\n\\\"input_args\\\": {\\n    \\\"data_path\\\": \\\"The path to the CSV file with historical population data.\\\",\\n    \\\"period\\\": \\\"The number of years to forecast (default is 5).\\\"\\n},\\n\\\"return\\\": \\\"A CSV file named 'forecast.csv' with the forecasted population data.\\\",\\n\\\"depend\\\": \\\"This function depends on the pandas and fbprophet Python libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A habitant of Vittone, a town in Italy.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Earthquake Information Interface\\\",\\n\\\"description\\\": \\\"Use the U.S. Geological Survey's Earthquake Data API to get information about recent earthquakes near a specific location. The location is specified by latitude and longitude. The function returns a list of earthquakes, each represented by a dictionary containing the earthquake's magnitude, place, and time.\\\",\\n\\\"function_name\\\": \\\"get_recent_earthquakes\\\",\\n\\\"input_args\\\": {\\\"latitude\\\": \\\"float\\\", \\\"longitude\\\": \\\"float\\\", \\\"radius_km\\\": \\\"int (optional)\\\"},\\n\\\"return\\\": \\\"list of dictionaries, each representing an earthquake event\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"USGS Earthquake Data API\\\"], \\\"machine learning models\\\": []}\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged woman with chronic pain seeking a second opinion on her existing medical imaging results", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Image Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to analyze medical imaging for a second opinion. It returns a detailed report of potential abnormalities or diseases that may have been missed in the initial diagnosis.\\\",\\n\\\"function_name\\\": \\\"analyze_medical_image\\\",\\n\\\"input_args\\\": \\\"path_to_image - the path to the medical image file\\\",\\n\\\"return\\\": \\\"A dictionary containing the probabilities of abnormal and normal findings in the image\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, Google AIY Vision Classifier\\\"\\n}\"", "description": "tool development"}
{"input persona": "An art historian who questions the monetary valuation of sports artifacts over historical pieces", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Artifact Valuation Interface\\\",\\n\\\"description\\\": \\\"This interface uses eBay's API to get the most recent sold listings for a specified sports artifact and return the average selling price.\\\",\\n\\\"function_name\\\": \\\"get_average_price\\\",\\n\\\"input_args\\\": \\\"sports_artifact\\\",\\n\\\"return\\\": \\\"The average selling price of the most recent listings for the specified sports artifact.\\\",\\n\\\"depend\\\": \\\"eBay's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an experienced Linux kernel developer with expertise in writing device drivers and managing memory for DMA operations.", "synthesized text": "\"{\\n\\\"name\\\": \\\"File System Usage Interface\\\",\\n\\\"description\\\": \\\"An interface to get file system usage (total, used, free space in bytes) of a given path.\\\",\\n\\\"function_name\\\": \\\"get_file_system_usage\\\",\\n\\\"input_args\\\": \\\"path - the path to the file system you want to monitor\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'total', 'used', 'free' representing the total, used, and free space in bytes respectively.\\\",\\n\\\"depend\\\": \\\"Python os and shutil libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Japanese hotelier whose hotel was affected by the disaster", "synthesized text": "\"{\\n\\\"name\\\": \\\"Disaster Impact Report Interface\\\",\\n\\\"description\\\": \\\"This interface uses NASA's Disasters Mapping Portal API and a Huggingface transformer model to generate a comprehensive report about a disaster's impact on a specified location and date.\\\",\\n\\\"function_name\\\": \\\"generate_disaster_report\\\",\\n\\\"input_args\\\": {\\n  \\\"location\\\": \\\"A tuple of latitude and longitude representing the location of the hotel.\\\",\\n  \\\"date\\\": \\\"The date of the disaster in the format 'YYYY-MM-DD'.\\\"\\n},\\n\\\"return\\\": \\\"A summary report detailing the disaster's impact on the specified location and date.\\\",\\n\\\"depend\\\": {\\n  \\\"python_libraries\\\": [\\\"requests\\\", \\\"transformers\\\"],\\n  \\\"web_apis\\\": [\\\"NASA's Disasters Mapping Portal API\\\"],\\n  \\\"machine_learning_models\\\": [\\\"Huggingface's transformer model for text summarization\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A young farmer from another state who seeks advice on implementing rotational grazing techniques", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pasture Rotation Calendar Interface\\\",\\n\\\"description\\\": \\\"This interface creates a schedule for rotating livestock between pastures. It takes as input the number of pastures, the number of days each pasture should be grazed, and the starting date. It returns a schedule that specifies which pasture should be grazed on each date, or if it should be a rest day.\\\",\\n\\\"function_name\\\": \\\"create_rotation_schedule\\\",\\n\\\"input_args\\\": [\\\"num_pastures\\\", \\\"grazing_days\\\", \\\"start_date\\\"],\\n\\\"return\\\": \\\"A dictionary indexed by dates. For each date, it specifies which pasture should be grazed or if it should be a rest day.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"datetime\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a casual fan of baseball who has limited knowledge about the MLB organizational structure", "synthesized text": "\"{\\n\\\"name\\\": \\\"Team Information Retrieval Interface\\\", \\n\\\"description\\\": \\\"This interface retrieves detailed information about a Major League Baseball team using the MLB's StatsAPI. The user needs to input the team name, and the interface will return details such as the team's full name, abbreviation, venue name, city, league, and division.\\\", \\n\\\"function_name\\\": \\\"get_team_info\\\", \\n\\\"input_args\\\": \\\"team_name\\\", \\n\\\"return\\\": \\\"A dictionary with team details or a string 'Team not found' if the team is not in the MLB database.\\\", \\n\\\"depend\\\": \\\"requests library, MLB StatsAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "A deaf actress who embodies the power of representation and inclusion on stage", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Real-Time Speech to Text Translation Interface\\\",\\n  \\\"description\\\": \\\"This interface transcribes speech from audio files into text in real-time. It allows deaf individuals to understand spoken language by reading the transcription.\\\",\\n  \\\"function_name\\\": \\\"transcribe_audio\\\",\\n  \\\"input_args\\\": {\\n    \\\"path_to_audio_file\\\": \\\"The path to the audio file to transcribe.\\\"\\n  },\\n  \\\"return\\\": \\\"Returns a list of transcriptions, with each item in the list being a transcription of a segment of speech in the audio file.\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"google-cloud-speech\\\"],\\n    \\\"Web APIs\\\": [],\\n    \\\"machine learning models\\\": []\\n  }\\n}\"", "description": "tool development"}
{"input persona": "An experienced organic farmer sharing tips and advice on sustainable cotton farming", "synthesized text": "\"{\\n\\\"name\\\": \\\"Crop Disease Detection Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to classify crop diseases. The user only needs to input the path to an image file of the cotton plant, and the interface will return the predicted disease affecting the cotton crop.\\\",\\n\\\"function_name\\\": \\\"detect_crop_disease\\\",\\n\\\"input_args\\\": \\\"path_to_img - A string representing the path to the image file.\\\",\\n\\\"return\\\": \\\"predicted_disease - An integer representing the predicted disease affecting the cotton crop.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "An expectant mother who isn't sold on the idea of using a baby sling.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Baby Sling Safety Information Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the Python 'requests' library to scrape information about baby sling safety from reliable parenting and health websites\\\",\\n  \\\"function_name\\\": \\\"get_sling_safety_info\\\",\\n  \\\"input_args\\\": [],\\n  \\\"return\\\": \\\"A string containing a summary of the most important safety points from several sources.\\\",\\n  \\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\", \\\"re (Python standard library for regex)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A politics-crazed Russian who loves cranking out election analyses.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Election Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface loads and processes election data, and produces statistical analyses and visualizations.\\\",\\n\\\"function_name\\\": \\\"analyze_election_data\\\",\\n\\\"input_args\\\": {\\n\\\"path_to_csv\\\": \\\"The path to a .csv file with the election data.\\\"\\n},\\n\\\"return\\\": {\\n\\\"stats\\\": \\\"A DataFrame with basic statistical analyses (like average, median, mode, etc.) of the election data.\\\",\\n\\\"vote_distribution_image_path\\\": \\\"The path to a saved pie chart showing the percentage of votes each candidate received.\\\"\\n},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\", \\\"matplotlib\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A schoolmate of Dulin, O’Connor, and Ockenden who is a big fan of basketball", "synthesized text": "\"{\\n\\\"name\\\": \\\"Basketball Player Stats Interface\\\",\\n\\\"description\\\": \\\"This interface provides detailed stats for a specified basketball player. It uses the Sports Open Data API to fetch the information.\\\",\\n\\\"function_name\\\": \\\"get_basketball_player_stats\\\",\\n\\\"input_args\\\": \\\"player_name\\\",\\n\\\"return\\\": \\\"A dictionary that includes the player's name, team, position, points per game, rebounds per game, and assists per game.\\\",\\n\\\"depend\\\": \\\"requests library, Sports Open Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired veterinary nurse who offers pet-sitting services and helps manage the Husky's needs", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Husky Health Status Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a pre-trained model to analyze the text description about the Husky's behavior and symptoms provided by the pet owner, and returns a health status and possible needed actions.\\\",\\n  \\\"function_name\\\": \\\"analyze_husky_health_status\\\",\\n  \\\"input_args\\\": \\\"description - a text description about the Husky's behavior and symptoms\\\",\\n  \\\"return\\\": \\\"Health status ('normal' or 'abnormal') and action needed ('No special action needed.' or 'Please consult a vet.')\\\",\\n  \\\"depend\\\": \\\"huggingface transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A scholar of Islamic theology and philosophy, specializing in the Maturidi school of thought.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Quran Verse Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves a specific verse from the Quran based on the input Surah and verse number. The output includes the Arabic text of the verse and its English translation.\\\",\\n\\\"function_name\\\": \\\"get_quran_verse\\\",\\n\\\"input_args\\\": [\\\"surah_number\\\", \\\"verse_number\\\"],\\n\\\"return\\\": \\\"A dictionary with Arabic text of the verse and its English translation.\\\",\\n\\\"depend\\\": \\\"Al-Quran Cloud API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A business owner in need of data replication solutions to ensure business continuity", "synthesized text": "\"{\\n\\\"name\\\": \\\"Data Replication Interface\\\",\\n\\\"description\\\": \\\"This interface helps to replicate data from one AWS S3 bucket to another for backup and disaster recovery purposes.\\\",\\n\\\"function_name\\\": \\\"aws_s3_data_replication\\\",\\n\\\"input_args\\\": {\\n    \\\"aws_access_key_id\\\": \\\"Your AWS access key ID\\\",\\n    \\\"aws_secret_access_key\\\": \\\"Your AWS secret access key\\\",\\n    \\\"source_bucket\\\": \\\"The name of the source S3 bucket\\\",\\n    \\\"destination_bucket\\\": \\\"The name of the destination S3 bucket\\\"\\n},\\n\\\"return\\\": \\\"A message indicating the completion of data replication.\\\",\\n\\\"depend\\\": \\\"boto3 library (AWS SDK for Python)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A speech therapist who provides guidance on feeding techniques for children with swallowing difficulties", "synthesized text": "\"{\\n\\\"name\\\": \\\"Food Texture Classification Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to classify the texture of food from images, which can be used by a speech therapist to provide guidance on feeding techniques for children with swallowing difficulties.\\\",\\n\\\"function_name\\\": \\\"classify_food_texture\\\",\\n\\\"input_args\\\": \\\"path_to_img - A string that represents the path to the image file of the food.\\\",\\n\\\"return\\\": \\\"A string representing the predicted texture of the food.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, a pre-trained model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "a fan of John Travolta and action films", "synthesized text": "\"{\\n\\\"name\\\": \\\"Action Movie Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Movie Database (TMDB) API to recommend action movies based on the user's favorite actor and preferred genre.\\\",\\n\\\"function_name\\\": \\\"recommend_action_movies\\\",\\n\\\"input_args\\\": [\\\"favorite_actor\\\", \\\"genre\\\"],\\n\\\"return\\\": \\\"A list of recommended action movies\\\",\\n\\\"depend\\\": \\\"TMDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A student considering joining the IE Business School", "synthesized text": "\"{\\n\\\"name\\\": \\\"University Information Interface\\\",\\n\\\"description\\\": \\\"This interface provides detailed information about universities, including global ranking, subject-specific rankings, tuition fees, number of students, faculty members, and more.\\\",\\n\\\"function_name\\\": \\\"get_university_info\\\",\\n\\\"input_args\\\": \\\"university_name\\\",\\n\\\"return\\\": \\\"A dictionary containing information about the specified university.\\\",\\n\\\"depend\\\": \\\"QS World University Rankings API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A business major actively working on starting a mobile application that connects patients with physiotherapists", "synthesized text": "\"{\\n\\\"name\\\": \\\"Appointment Scheduling Interface\\\",\\n\\\"description\\\": \\\"An interface to schedule appointments with physiotherapists using Google Calendar API.\\\",\\n\\\"function_name\\\": \\\"schedule_appointment\\\",\\n\\\"input_args\\\": [\\\"physiotherapist_email\\\", \\\"desired_date\\\", \\\"desired_time\\\", \\\"duration_minutes\\\"],\\n\\\"return\\\": \\\"URL to the created appointment event on the physiotherapist's Google Calendar.\\\",\\n\\\"depend\\\": [\\\"Python Libraries (googleapiclient, google_auth_oauthlib, datetime, pytz)\\\", \\\"Google Calendar API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An importer of handmade textiles and furniture from various countries", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface is designed to convert an amount from one currency to another. It uses the Open Exchange Rates API to get up-to-date currency exchange rates.\\\",\\n\\\"function_name\\\": \\\"convert_currency\\\",\\n\\\"input_args\\\": \\n  {\\n    \\\"amount\\\": \\\"The amount of money that you want to convert. It should be a number.\\\",\\n    \\\"from_currency\\\": \\\"The original currency. It should be a string representing the ISO 4217 currency code, such as 'USD' for United States Dollars, 'EUR' for Euro, etc.\\\",\\n    \\\"to_currency\\\": \\\"The currency you want to convert to. It should be a string representing the ISO 4217 currency code, such as 'USD' for United States Dollars, 'EUR' for Euro, etc.\\\"\\n  },\\n\\\"return\\\": \\\"The converted amount in the target currency. It will be a number.\\\",\\n\\\"depend\\\": \\\"This function depends on the 'requests' Python library and the Open Exchange Rates API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An OCR software engineer seeking input and suggestions for improving their algorithm", "synthesized text": "\"{\\n\\\"name\\\": \\\"OCR Improvement Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface takes as input a suggestion text for improving an OCR algorithm, and classifies the suggestion into categories. This helps OCR software engineers to easily categorize and prioritize the improvements to be made.\\\",\\n\\\"function_name\\\": \\\"classify_suggestion\\\",\\n\\\"input_args\\\": \\\"suggestion\\\",\\n\\\"return\\\": \\\"A category string from the following: Improve Text Recognition, Improve Layout Analysis, Improve Noise Reduction, Improve Handwriting Recognition, Other.\\\",\\n\\\"depend\\\": \\\"HuggingFace's Transformers library (BertForSequenceClassification, BertTokenizer)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A devoted \"Brooklyn Nine-Nine\" superfan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Brooklyn Nine-Nine Episode Guide Interface\\\",\\n\\\"description\\\": \\\"This interface fetches detailed information about a specific episode from a specific season of the TV show 'Brooklyn Nine-Nine'.\\\",\\n\\\"function_name\\\": \\\"get_episode_info\\\",\\n\\\"input_args\\\": {\\n    \\\"season\\\": \\\"The season number of the episode.\\\",\\n    \\\"episode\\\": \\\"The episode number.\\\"\\n    },\\n\\\"return\\\": {\\n    \\\"episode_name\\\": \\\"The name of the episode.\\\",\\n    \\\"airdate\\\": \\\"The airdate of the episode.\\\",\\n    \\\"summary\\\": \\\"A summary of the episode.\\\"\\n    },\\n\\\"depend\\\": \\\"TVmaze API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a former gymnastics coach who has followed Wills' career.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Athlete Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to analyze the performance of gymnasts using pose estimation. Users provide the path to a video file, and the interface returns a set of key points representing the pose for each frame in the video.\\\",\\n\\\"function_name\\\": \\\"analyze_performance\\\",\\n\\\"input_args\\\": \\\"path_to_video\\\",\\n\\\"return\\\": \\\"pose_estimations\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, cv2, TensorFlow Hub Model: 'https://tfhub.dev/google/movenet/singlepose/lightning/1'\\\"\\n}\"", "description": "tool development"}
{"input persona": "A high school science buff using astronomical calculations for a science fair project", "synthesized text": "\"{\\n\\\"name\\\": \\\"Solar System Planetary Position Interface\\\",\\n\\\"description\\\": \\\"This interface calculates and returns the position of a planet in the solar system at a given date and time.\\\",\\n\\\"function_name\\\": \\\"get_planet_position\\\",\\n\\\"input_args\\\": [\\\"planet_name\\\", \\\"datetime\\\"],\\n\\\"return\\\": \\\"A dictionary including right ascension (RA), declination (DEC), and distance from earth to the planet in kilometers.\\\",\\n\\\"depend\\\": \\\"Skyfield API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former professional Ukrainian football player who knows Kostyantyn Vivcharenko personally.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Player Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface helps to fetch a football player's statistics such as total goals, assists, appearances, etc. using the 'football-data' API.\\\",\\n\\\"function_name\\\": \\\"get_football_player_statistics\\\",\\n\\\"input_args\\\": \\\"player_name\\\",\\n\\\"return\\\": \\\"A dictionary containing player's statistics such as total goals, assists, appearances, etc.\\\",\\n\\\"depend\\\": \\\"requests, football-data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow junior software engineer also struggling with Typescript, forming a study group to collaborate and share knowledge", "synthesized text": "\"{\\n\\\"name\\\": \\\"Typescript Code Validator Interface\\\",\\n\\\"description\\\": \\\"A function to validate Typescript code using the Typescript compiler. It returns a list of errors found in the code, if any.\\\",\\n\\\"function_name\\\": \\\"validate_typescript_code\\\",\\n\\\"input_args\\\": [\\\"code\\\"],\\n\\\"return\\\": [\\\"List of strings representing errors in the code\\\"],\\n\\\"depend\\\": [\\\"Typescript Compiler\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An Italian filmmaker who lives in Trieste and whose last two films were co-productions.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Budget Estimation Interface\\\",\\n\\\"description\\\": \\\"An interface to estimate the budget for a film based on the director, location, co-production, and previous films' budgets.\\\",\\n\\\"function_name\\\": \\\"estimate_film_budget\\\",\\n\\\"input_args\\\": [\\\"director\\\", \\\"location\\\", \\\"co_production\\\", \\\"previous_film_budgets\\\"],\\n\\\"return\\\": \\\"Estimated budget for the film.\\\",\\n\\\"depend\\\": \\\"Huggingface Transformers library, bert-base-cased-finetuned-mrpc model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A private investigator who respects her resilience but worries about her safety", "synthesized text": "\"{\\n\\\"name\\\": \\\"Geo-Location Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to track the geolocation of an IP address using the 'ip-api' web service.\\\",\\n\\\"function_name\\\": \\\"get_geolocation\\\",\\n\\\"input_args\\\": {\\\"ip_address\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"lat\\\": \\\"float\\\", \\\"lon\\\": \\\"float\\\", \\\"city\\\": \\\"string\\\", \\\"region\\\": \\\"string\\\", \\\"country\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"web APIs\\\": [\\\"ip-api\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A software tester responsible for ensuring the quality and reliability of Python code and iPython notebook outputs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Python Code Quality Check Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze Python code and highlight potential issues in a standardized report format. The interface accepts Python code as a string or a file path and returns a quality report.\\\",\\n\\\"function_name\\\": \\\"check_python_code_quality\\\",\\n\\\"input_args\\\": [\\\"code_or_file_path\\\"],\\n\\\"return\\\": \\\"A report containing potential issues in the code. If no issues are found, the function returns 'No issues found'.\\\",\\n\\\"depend\\\": \\\"Python library: pylint\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an elderly librarian with a passion for onomatology (the study of the history and origin of names) and an affinity for asteroids and astrology.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Asteroid Information Interface\\\",\\n\\\"description\\\": \\\"An interface to get detailed information about a specific asteroid, including its size, velocity, and close approach data. The information is retrieved from NASA's NeoWs API.\\\",\\n\\\"function_name\\\": \\\"get_asteroid_info\\\",\\n\\\"input_args\\\": \\\"asteroid_name\\\",\\n\\\"return\\\": \\\"{Size (in meters), Velocity (in km/s), Close Approach Data}\\\",\\n\\\"depend\\\": \\\"requests, NASA's NeoWs API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A manufacturing consultant who advises on product development and customization", "synthesized text": "\"{\\n  \\\"name\\\": \\\"3D Model Customization Interface\\\",\\n  \\\"description\\\": \\\"An interface to customize 3D models using OpenSCAD.\\\",\\n  \\\"function_name\\\": \\\"create_custom_model\\\",\\n  \\\"input_args\\\": [\\\"parameters\\\", \\\"base_model_path\\\", \\\"output_model_path\\\"],\\n  \\\"return\\\": \\\"Path to the customized 3D model\\\",\\n  \\\"depend\\\": [\\\"OpenSCAD\\\", \\\"subprocess\\\", \\\"os\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A sculptor who creates intricate sculptures inspired by the flavors and aromas of wine and food", "synthesized text": "\"{\\n\\\"name\\\": \\\"Food and Wine Pairing Interface\\\",\\n\\\"description\\\": \\\"An interface that provides food and wine pairing suggestions. Users only need to input a type of food or wine, and the interface will return a detailed description of the flavors and aromas of that item, as well as suggestions for other foods or wines that pair well with it.\\\",\\n\\\"function_name\\\": \\\"get_food_wine_pairing\\\",\\n\\\"input_args\\\": [\\\"food_or_wine\\\"],\\n\\\"return\\\": \\\"A string containing detailed descriptions of the flavors and aromas of the input food or wine, as well as suggestions for other foods or wines that pair well with it.\\\",\\n\\\"depend\\\": [\\\"Spoonacular API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A graduate student who is conducting research on the use of colors in advertising", "synthesized text": "\"{\\n\\\"name\\\": \\\"Color Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze and visualize the dominant colors in an image using OpenCV and matplotlib. The user needs to provide the path to the image file and optionally the number of dominant colors to consider. The function will return a pie chart showing the distribution of the dominant colors in the image.\\\",\\n\\\"function_name\\\": \\\"analyze_image_colors\\\",\\n\\\"input_args\\\": [\\\"image_path\\\", \\\"number_of_colors\\\"],\\n\\\"return\\\": \\\"A pie chart showing the color distribution\\\",\\n\\\"depend\\\": [\\\"cv2\\\", \\\"sklearn.cluster.KMeans\\\", \\\"matplotlib.pyplot\\\", \\\"numpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A successful NFT collector and investor who provides guidance on marketing and pricing strategies", "synthesized text": "\"{\\n\\\"name\\\": \\\"NFT Price Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface fetches historical sales data of an NFT (Non-Fungible Token) from OpenSea and uses a regression model to predict the future price.\\\",\\n\\\"function_name\\\": \\\"predict_nft_price\\\",\\n\\\"input_args\\\": [\\\"nft_id\\\"],\\n\\\"return\\\": \\\"Predicted future price of the input NFT.\\\",\\n\\\"depend\\\": [\\\"OpenSea API\\\", \\\"scikit-learn\\\", \\\"requests\\\", \\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A charismatic and ambitious junior officer known for their networking skills and ability to outperform others in promotions", "synthesized text": "\"{\\n  \\\"name\\\": \\\"LinkedIn Profile Scraper Interface\\\",\\n  \\\"description\\\": \\\"Fetches the user's LinkedIn profile information including name, headline, company, school, and location using LinkedIn's API.\\\",\\n  \\\"function_name\\\": \\\"get_linkedin_profile_info\\\",\\n  \\\"input_args\\\": \\\"profile_url\\\",\\n  \\\"return\\\": \\\"A dictionary with the keys 'name', 'headline', 'company', 'school', and 'location'.\\\",\\n  \\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a sports journalist with a career-long bias against Princeton University", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Score Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the game score between two teams based on their past games. It fetches the past games data of the two teams from a sports data API, applies a linear regression model to predict the score.\\\",\\n\\\"function_name\\\": \\\"predict_game_score\\\",\\n\\\"input_args\\\": [\\\"team1\\\", \\\"team2\\\"],\\n\\\"return\\\": \\\"The predicted game score between the two teams.\\\",\\n\\\"depend\\\": \\\"requests, pandas, sklearn.linear_model, Sports Open Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A clinical psychologist specializing in the connection between mental health and gut health", "synthesized text": "\"{\\n\\\"name\\\": \\\"Microbiome Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze the microbiome data from a FASTA file. It returns the top 5 most abundant species in the microbiome.\\\",\\n\\\"function_name\\\": \\\"analyze_microbiome\\\",\\n\\\"input_args\\\": \\\"path_to_fasta\\\",\\n\\\"return\\\": \\\"A list of tuples. Each tuple contains a species and its corresponding count.\\\",\\n\\\"depend\\\": \\\"Biopython library, Scikit-learn library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An environmentally-conscious supporter of local produce who likes strawberries.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Local Produce Finder\\\",\\n\\\"description\\\": \\\"An interface to find local markets that sell strawberries using the USDA National Farmers Market Directory API.\\\",\\n\\\"function_name\\\": \\\"get_local_markets\\\",\\n\\\"input_args\\\": [\\\"city\\\", \\\"state\\\"],\\n\\\"return\\\": \\\"A list of local markets that sell strawberries.\\\",\\n\\\"depend\\\": \\\"requests library, USDA National Farmers Market Directory API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow graphic designer who has already found the perfect chair and can provide recommendations", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Furniture Recommendation Interface\\\",\\n  \\\"description\\\": \\\"A high-level interface to get recommendations for similar furniture based on an item the user likes using Amazon Product Advertising API.\\\",\\n  \\\"function_name\\\": \\\"get_similar_furniture\\\",\\n  \\\"input_args\\\": \\\"ASIN - Amazon Standard Identification Number of the product\\\",\\n  \\\"return\\\": \\\"A list of similar product names\\\",\\n  \\\"depend\\\": \\\"bottlenose Python library, Amazon Product Advertising API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young and playful manufacturing engineer obsessed with superlatives.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Properties Comparison Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches material properties from MatWeb API and compares them, returning the material with superior properties.\\\",\\n\\\"function_name\\\": \\\"compare_material_properties\\\",\\n\\\"input_args\\\": \\n    {\\n    \\\"material1\\\": \\\"Name of the first material\\\",\\n    \\\"material2\\\": \\\"Name of the second material\\\"\\n    },\\n\\\"return\\\": \\\"A dictionary where keys are property names and values are the material with superior property.\\\",\\n\\\"depend\\\": \\\"MatWeb API\\\"\\n}\"", "description": "tool development"}
{"input persona": "an employee at Nigerian Postal Service (NIPOST)", "synthesized text": "\"{\\n\\\"name\\\": \\\"Postal Code Lookup Interface\\\",\\n\\\"description\\\": \\\"This interface returns the city and state of a given Nigerian postal code. The user only needs to input the postal code.\\\",\\n\\\"function_name\\\": \\\"get_postal_code_info\\\",\\n\\\"input_args\\\": \\\"postal_code: A string representing the postal code.\\\",\\n\\\"return\\\": \\\"A tuple (city, state) where both are strings representing the city and state of the postal code. Returns (None, None) if no information is found.\\\",\\n\\\"depend\\\": \\\"Python requests library, Zippopotam.us API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Nevada businessman who values education but is strict with budget management", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tuition Fee Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the future tuition fees based on the historical data for a given university.\\\",\\n\\\"function_name\\\": \\\"predict_tuition\\\",\\n\\\"input_args\\\": {\\n    \\\"university_name\\\": \\\"The name of the university for which to predict tuition fees.\\\"\\n},\\n\\\"return\\\": \\\"A dictionary mapping from year to predicted tuition fee for that year.\\\",\\n\\\"depend\\\": \\\"pandas, scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A film historian who focuses on the technical aspects and evolution of filmmaking", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Frame Extraction Interface\\\",\\n\\\"description\\\": \\\"Extract frames from a video file at a specified rate\\\",\\n\\\"function_name\\\": \\\"extract_frames\\\",\\n\\\"input_args\\\": {\\n    \\\"video_path\\\": \\\"Path to the video file\\\",\\n    \\\"frame_rate\\\": \\\"Number of frames to extract per second\\\"\\n},\\n\\\"return\\\": \\\"List of paths to the extracted frame images\\\",\\n\\\"depend\\\": \\\"OpenCV library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A rational engineer who loves to debunk myths and legends with scientific principles", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Scientific Fact Checking Interface\\\",\\n    \\\"description\\\": \\\"A Python interface for fact-checking scientific statements using the Google Fact Check Tools API.\\\",\\n    \\\"function_name\\\": \\\"fact_check_statement\\\",\\n    \\\"input_args\\\": {\\\"statement\\\": \\\"string\\\"},\\n    \\\"return\\\": \\\"list of dictionaries containing fact-checking results\\\",\\n    \\\"depend\\\": \\\"Google Fact Check Tools API\\\"\\n}\"", "description": "tool development"}
{"input persona": "As a passionate local sports journalist in Chester, I've been closely following Chester City F.C. for years, capturing their ups and downs through my articles.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Fixture Information Interface\\\",\\n\\\"description\\\": \\\"This interface uses the football-data.org API to fetch the latest fixture and result for a specific football team.\\\",\\n\\\"function_name\\\": \\\"get_team_fixtures\\\",\\n\\\"input_args\\\": {\\\"team_id\\\": \\\"A unique identifier for each team in the API\\\"},\\n\\\"return\\\": {\\\"upcoming_fixtures\\\": \\\"A list of upcoming matches, each represented as a dictionary containing information about the match\\\", \\n            \\\"past_results\\\": \\\"A list of past match results, each represented as a dictionary containing the match information and score\\\"},\\n\\\"depend\\\": {\\\"python_libraries\\\": [\\\"requests\\\"], \\\"web_APIs\\\": [\\\"football-data.org API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "Un giovane avventuroso che sogna di fare il giro dell'Italia in bicicletta e scoprire nuovi luoghi nascosti", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Planner Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google Maps API to provide an optimized bike path between two locations.\\\",\\n\\\"function_name\\\": \\\"get_bike_route\\\",\\n\\\"input_args\\\": [\\\"start_location\\\", \\\"end_location\\\"],\\n\\\"return\\\": \\\"List of detailed instructions for each step of the route.\\\",\\n\\\"depend\\\": \\\"Google Maps Directions API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Zagoric-born young adult now living in a bustling city", "synthesized text": "\"{\\n\\\"name\\\": \\\"Noise Level Estimation Interface\\\",\\n\\\"description\\\": \\\"An interface that estimates the noise level from a given sound file.\\\",\\n\\\"function_name\\\": \\\"estimate_noise_level\\\",\\n\\\"input_args\\\": \\\"sound_file\\\",\\n\\\"return\\\": \\\"Estimated average power (noise level) in decibels.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow I/O\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mobile app startup founder looking to implement reliable push notification functionality", "synthesized text": "\"{\\n\\\"name\\\": \\\"Push Notification Interface\\\",\\n\\\"description\\\": \\\"An interface to send push notifications using Firebase Cloud Messaging. The user provides a message, title, and the target device token, and the interface sends the notification.\\\",\\n\\\"function_name\\\": \\\"send_push_notification\\\",\\n\\\"input_args\\\": [\\\"message\\\", \\\"title\\\", \\\"target_token\\\"],\\n\\\"return\\\": \\\"Response from the FCM server\\\",\\n\\\"depend\\\": \\\"requests library, Firebase Cloud Messaging API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Another tech entrepreneur who has been working on a similar job portal and now views the South Asian entrepreneur as a threat to their business", "synthesized text": "\"{\\n\\\"name\\\": \\\"Job Posting Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches job postings data from Glassdoor for a given job title and location and provides analysis on the most common skills required, average salary, and common benefits provided for that job.\\\",\\n\\\"function_name\\\": \\\"get_job_posting_info\\\",\\n\\\"input_args\\\": [\\\"job_title\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"A dictionary with 'common_skills', 'average_salary', and 'common_benefits' as keys.\\\",\\n\\\"depend\\\": [\\\"Glassdoor API\\\", \\\"Hugging Face transformers library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Разработчик веб-сайтов, посвящавший себя решению проблем с mod_rewrite и пониманию .htaccess.", "synthesized text": "\"{\\n\\\"name\\\": \\\"URL Rewrite Tester Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to test and debug their URL rewrite rules used in .htaccess for Apache mod_rewrite. Users simply input their rewrite rule and a URL to test, and our interface returns the result of the URL rewrite.\\\",\\n\\\"function_name\\\": \\\"test_url_rewrite\\\",\\n\\\"input_args\\\": {\\n    \\\"rule\\\": \\\"The rewrite rule split into two strings by a space where the first string is the regex pattern and the second string is the replacement string.\\\",\\n    \\\"test_url\\\": \\\"The URL to be tested.\\\"\\n},\\n\\\"return\\\": \\\"The result of the URL rewrite.\\\",\\n\\\"depend\\\": \\\"Python re library\\\"\\n}\"", "description": "tool development"}
{"input persona": "an Italian design student studying in Milan", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model Viewer Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to load a 3D model from a file and visualize it in a window. They can rotate, zoom in, and zoom out to inspect the model from different perspectives.\\\",\\n\\\"function_name\\\": \\\"view_3d_model\\\",\\n\\\"input_args\\\": [\\\"model_path\\\"],\\n\\\"return\\\": \\\"A window displaying the 3D model will be opened allowing users to interact with it.\\\",\\n\\\"depend\\\": [\\\"pyglet\\\", \\\"PyWavefront\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A highly skilled criminal defense lawyer known for her expertise in drug-related cases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Case Law Search Interface\\\",\\n\\\"description\\\": \\\"This interface uses an API from a legal research platform, such as the Westlaw or LexisNexis, to return the case details or related case laws based on the inputted keywords or case name.\\\",\\n\\\"function_name\\\": \\\"search_case_law\\\",\\n\\\"input_args\\\": \\\"case_name_or_keywords - The case name or relevant keywords to search for.\\\",\\n\\\"return\\\": \\\"A json response containing the relevant case laws or case details.\\\",\\n\\\"depend\\\": \\\"Uses the web API from a legal research platform\\\"\\n}\"", "description": "tool development"}
{"input persona": "an experienced software developer who specializes in open-source electronics design automation suites like KiCAD.", "synthesized text": "\"{\\n\\\"name\\\": \\\"PCB Design File Validation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to validate their PCB design files. It uses KiCad's pcbnew Python scripting interface to perform design rule checks and returns a list of errors if any.\\\",\\n\\\"function_name\\\": \\\"validate_pcb_design\\\",\\n\\\"input_args\\\": \\\"design_file_path\\\",\\n\\\"return\\\": \\\"List of DRC errors or a success message\\\",\\n\\\"depend\\\": \\\"KiCad's pcbnew Python scripting interface\\\"\\n}\"", "description": "tool development"}
{"input persona": "香港电影忠实粉丝", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u7535\\u5f71\\u63a8\\u8350\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u6839\\u636e\\u7528\\u6237\\u559c\\u6b22\\u7684\\u7535\\u5f71\\u7c7b\\u578b\\u3001\\u5bfc\\u6f14\\u6216\\u6f14\\u5458\\u63a8\\u8350\\u7535\\u5f71\\\",\\n\\\"function_name\\\": \\\"recommend_movies\\\",\\n\\\"input_args\\\": [\\\"favorite_genre\\\", \\\"favorite_director\\\", \\\"favorite_actor\\\"],\\n\\\"return\\\": \\\"\\u63a8\\u8350\\u7684\\u7535\\u5f71\\u5217\\u8868\\\",\\n\\\"depend\\\": \\\"The Movie Database (TMDb) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A novice Forex trader seeking guidance on trading exotic currency pairs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Pair Correlation Interface\\\",\\n\\\"description\\\": \\\"This interface returns the correlation coefficient between two currency pairs. The correlation coefficient ranges from -1 to 1. A correlation of 1 means the two currency pairs will move in the same direction 100% of the time. A correlation of -1 means the two pairs will move in the opposite direction 100% of the time.\\\",\\n\\\"function_name\\\": \\\"get_currency_pair_correlation\\\",\\n\\\"input_args\\\": [\\\"pair1\\\", \\\"pair2\\\"],\\n\\\"return\\\": \\\"Correlation coefficient between the two currency pairs\\\",\\n\\\"depend\\\": \\\"yfinance, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "An insurance defense lawyer representing an employer disputing a workers' compensation claim", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Similarity Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained BERT model to compute the cosine similarity between two documents. It can be used to compare a workers' compensation claim with prior similar cases or company guidelines.\\\",\\n\\\"function_name\\\": \\\"document_similarity\\\",\\n\\\"input_args\\\": [\\\"text1\\\", \\\"text2\\\"],\\n\\\"return\\\": \\\"A similarity score between 0 (completely dissimilar) and 1 (identical).\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library, PyTorch, and scipy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired German volleyball player who won the first Super Cup.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wikipedia Information Fetcher\\\",\\n\\\"description\\\": \\\"This function fetches data from a specific person's Wikipedia page using the Wikipedia API.\\\",\\n\\\"function_name\\\": \\\"get_wikipedia_page_data\\\",\\n\\\"input_args\\\": \\\"person_name - The name of the person whose data we want to fetch\\\",\\n\\\"return\\\": \\\"A string that contains all the text data from the person's Wikipedia page or a message stating that no data was found\\\",\\n\\\"depend\\\": \\\"requests library, Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A frequent business traveler seeking advice on how to overcome jet lag and stay comfortable during flights", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Comfort and Jet Lag Advice Interface\\\",\\n\\\"description\\\": \\\"This interface provides personalized advice on combating jet lag and staying comfortable during flights, based on the user's flight details and profile.\\\",\\n\\\"function_name\\\": \\\"get_comfort_and_jet_lag_advice\\\",\\n\\\"input_args\\\": [\\\"flight_number\\\", \\\"date\\\", \\\"user_profile\\\"],\\n\\\"return\\\": \\\"Personalized advice text.\\\",\\n\\\"depend\\\": {\\\"libraries\\\": [\\\"requests\\\", \\\"datetime\\\", \\\"pytz\\\", \\\"tensorflow\\\", \\\"tensorflow_hub\\\"], \\\"Web APIs\\\": [\\\"FlightStats API\\\"], \\\"machine learning models\\\": [\\\"Universal Sentence Encoder from TensorFlow Hub\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A psychologist who applies EMDR (Eye Movement Desensitization and Reprocessing) technique to treat PTSD", "synthesized text": "\"{\\n\\\"name\\\": \\\"EMDR Session Assistant Interface\\\",\\n\\\"description\\\": \\\"This interface uses Speech-to-Text and Text Analysis APIs to transcribe and analyze the patient's speech during EMDR sessions. It can help psychologists to track the patient's progress over time.\\\",\\n\\\"function_name\\\": \\\"emdr_assistant\\\",\\n\\\"input_args\\\": \\\"audio_file_path\\\",\\n\\\"return\\\": \\\"A list of categories and their relevance in the patient's speech.\\\",\\n\\\"depend\\\": \\\"Google's Speech-to-Text API, MeaningCloud's Text Classification API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional kabaddi player from India", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fitness Level Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the fitness level of a person based on their physical attributes using a deep learning model.\\\",\\n\\\"function_name\\\": \\\"predict_fitness_level\\\",\\n\\\"input_args\\\": [\\\"height\\\", \\\"weight\\\", \\\"age\\\", \\\"gender\\\"],\\n\\\"return\\\": \\\"Predicted fitness level as a string\\\",\\n\\\"depend\\\": [\\\"PyTorch library\\\", \\\"Pretrained Fitness model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A meteorologist who always compares the intensity of storms to Tampa Bay's games on television", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Weather Forecast to Game Intensity Comparison Interface\\\",\\n  \\\"description\\\": \\\"An interface that compares the intensity of the weather with the intensity of the game, based on predefined rules of intensity. The weather intensity is calculated using the OpenWeatherMap API and the game intensity is calculated using the SportsRadar API.\\\",\\n  \\\"function_name\\\": \\\"compare_intensity\\\",\\n  \\\"input_args\\\": {\\n    \\\"city\\\": \\\"The city where the weather intensity is to be checked.\\\",\\n    \\\"team\\\": \\\"The team whose game intensity is to be checked.\\\"\\n  },\\n  \\\"return\\\": \\\"A string describing the comparison of weather and game intensity.\\\",\\n  \\\"depend\\\": [\\\"OpenWeatherMap API\\\", \\\"SportsRadar API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A new resident in Sendai City, Miyagi Prefecture who frequently sends goods back to her family in the USA.", "synthesized text": "\"{\\n\\\"name\\\": \\\"International Shipping Cost Calculator Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the estimated cost of shipping a package internationally. It uses APIs from major shipping carriers.\\\",\\n\\\"function_name\\\": \\\"calculate_international_shipping_cost\\\",\\n\\\"input_args\\\": [\\\"weight\\\", \\\"origin\\\", \\\"destination\\\"],\\n\\\"return\\\": \\\"Estimated shipping cost or error message\\\",\\n\\\"depend\\\": \\\"requests library, Shipping carrier's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A chief technical officer with expertise in wind and solar energy resources", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Solar and Wind Energy Forecast Interface\\\",\\n  \\\"description\\\": \\\"An interface for forecasting the potential solar and wind energy that could be harvested at a specific location. It fetches the current solar radiation and wind speed data from OpenWeatherMap.\\\",\\n  \\\"function_name\\\": \\\"get_solar_wind_forecast\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"A tuple of latitude and longitude representing the location\\\"\\n  },\\n  \\\"return\\\": \\\"A dictionary with the current values of solar radiation (in W/m\\u00b2) and wind speed (in meter/sec)\\\",\\n  \\\"depend\\\": \\\"OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An expert in programming languages and software development seeking advice on formal language theory", "synthesized text": "\"{\\n\\\"name\\\": \\\"Regular Expression Tester Interface\\\",\\n\\\"description\\\": \\\"An interface to test a regular expression against a string using Python's built-in 're' library.\\\",\\n\\\"function_name\\\": \\\"test_regex\\\",\\n\\\"input_args\\\": {\\n    \\\"regex\\\": \\\"The regular expression to test.\\\",\\n    \\\"string\\\": \\\"The string to test the regular expression against.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"matches\\\": \\\"A boolean indicating whether the regular expression matches the string.\\\",\\n    \\\"groups\\\": \\\"A list of any matched groups.\\\"\\n},\\n\\\"depend\\\": \\\"Python re Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A homeless individual with a passion for writing, seeking guidance in finding stable housing and pursuing a career in journalism", "synthesized text": "\"{\\n\\\"name\\\": \\\"Job and Housing Assistance\\\",\\n\\\"description\\\": \\\"This interface provides functionalities to search for job opportunities and affordable housing options.\\\",\\n\\\"function_name\\\": [\\\"search_job\\\", \\\"get_affordable_housing\\\"],\\n\\\"input_args\\\": {\\n    \\\"search_job\\\": [\\\"job_title\\\", \\\"location\\\"],\\n    \\\"get_affordable_housing\\\": [\\\"location\\\"]\\n},\\n\\\"return\\\": {\\n    \\\"search_job\\\": \\\"List of job opportunities\\\",\\n    \\\"get_affordable_housing\\\": \\\"List of affordable housing options\\\"\\n},\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Indeed API\\\", \\\"Housing Urban Development API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A globetrotting couple who have been to the Greek Islands multiple times and can provide insider tips and recommendations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Travel Recommendations Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Yelp API to get information about top-rated places of a certain type (restaurants, hotels, etc.) in a specific destination. It requires the Yelp API key to function.\\\",\\n\\\"function_name\\\": \\\"get_top_rated_places\\\",\\n\\\"input_args\\\": [\\\"destination\\\", \\\"type_of_place\\\"],\\n\\\"return\\\": \\\"A list of top 10 places of the specified type in the destination, sorted by rating, each represented as a tuple (name, rating).\\\",\\n\\\"depend\\\": \\\"Yelp API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young entrepreneur creating a clothing line inspired by classic Hollywood styles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fashion Trend Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that predicts future fashion trends based on a given classic Hollywood style or era.\\\",\\n\\\"function_name\\\": \\\"predict_fashion_trend\\\",\\n\\\"input_args\\\": [\\\"style_input\\\"],\\n\\\"return\\\": \\\"A list of top 10 predicted fashion trends.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"pandas\\\", \\\"numpy\\\"], \\\"machine learning models\\\": [\\\"Universal Sentence Encoder from TensorFlow Hub\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A dedicated master's degree candidate specializing in propulsion systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rocket Propulsion Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface simulates rocket propulsion and returns the specific impulse of the rocket's propulsion system. The specific impulse is a measure of how effectively a rocket uses propellant.\\\",\\n\\\"function_name\\\": \\\"rocket_propulsion_simulation\\\",\\n\\\"input_args\\\": [\\\"propellant_1\\\", \\\"propellant_2\\\"],\\n\\\"return\\\": \\\"Specific impulse of the rocket propulsion system\\\",\\n\\\"depend\\\": [\\\"PyPROPEP library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A literature enthusiast who recommends a wide range of authors and helps with research on Robert E. Howard's works", "synthesized text": "\"{\\n\\\"name\\\": \\\"Author Work Analyzer Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch an author's works from Google Books API including the titles and publication dates.\\\",\\n\\\"function_name\\\": \\\"search_author_works\\\",\\n\\\"input_args\\\": \\\"author_name\\\",\\n\\\"return\\\": \\\"List of dictionaries containing 'title' and 'published_date' of each book by the author.\\\",\\n\\\"depend\\\": \\\"Google Books API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a first-time individual exhibitor from a small European publishing firm which has recently entered the American literature market.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates a book from one language to another using a pre-trained machine translation model from HuggingFace.\\\",\\n\\\"function_name\\\": \\\"translate_book\\\",\\n\\\"input_args\\\": {\\\"path_to_book\\\": \\\"Path to the text file (the book)\\\", \\\"from_lang\\\": \\\"ISO code of the source language\\\", \\\"to_lang\\\": \\\"ISO code of the target language\\\"},\\n\\\"return\\\": \\\"Translated version of the book as a string.\\\",\\n\\\"depend\\\": \\\"HuggingFace's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A spiritual inspirational speaker who encourages each individual's unique journey towards understanding the universe.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Astrology Chart Generator Interface\\\",\\n\\\"description\\\": \\\"An interface using the astro-charts library to generate a person's astrology birth chart based on their birth details (date, time, and place).\\\",\\n\\\"function_name\\\": \\\"birth_chart_generator\\\",\\n\\\"input_args\\\": [\\\"date\\\", \\\"time\\\", \\\"place\\\"],\\n\\\"return\\\": \\\"Astrology birth chart\\\",\\n\\\"depend\\\": [\\\"astrocharts library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a migratory worker in China, with limited access to internet or technology, but loves to listen to stories about celebrities.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Celebrity News Reader\\\",\\n\\\"description\\\": \\\"Fetches the latest news about a given celebrity and converts it into an audio file for offline listening.\\\",\\n\\\"function_name\\\": \\\"convert_news_to_audio\\\",\\n\\\"input_args\\\": \\\"celebrity - The name of the celebrity.\\\",\\n\\\"return\\\": \\\"Path to the audio file containing the news.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, gTTS. Web APIs: NewsAPI.org\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young history enthusiast eager to learn about their family's roots in Laois county", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ancestry Data Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to retrieve the historical records of their family from Laois county by inputting their family surname.\\\",\\n\\\"function_name\\\": \\\"get_ancestry_data\\\",\\n\\\"input_args\\\": \\\"surname\\\",\\n\\\"return\\\": \\\"A JSON response containing the family's historical records.\\\",\\n\\\"depend\\\": \\\"requests library, Ancestry.com API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A career counselor focusing on personality-based career recommendations, believing in 'do what you love'", "synthesized text": "\"{\\n    \\\"ENTJ\\\": [\\\"Lawyer\\\", \\\"Judge\\\", \\\"Business Manager\\\"],\\n    \\\"INTP\\\": [\\\"Software Developer\\\", \\\"Data Scientist\\\", \\\"Research Scientist\\\"],\\n    \\\"ESFP\\\": [\\\"Sales Manager\\\", \\\"Event Coordinator\\\", \\\"Public Relations Specialist\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A fellow team member who believes in lucky charms and rituals for success", "synthesized text": "\"{\\n\\\"name\\\": \\\"Luck Number Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that predicts a 'lucky' number for the day within a given range.\\\",\\n\\\"function_name\\\": \\\"predict_lucky_number\\\",\\n\\\"input_args\\\": [\\\"range_start\\\", \\\"range_end\\\"],\\n\\\"return\\\": \\\"An integer within the range [range_start, range_end] which is considered as the 'lucky' number for the day.\\\",\\n\\\"depend\\\": [\\\"Python Standard Library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A software engineer who uses the alias \"Harold Reynolds\" online", "synthesized text": "\"{\\n  \\\"name\\\": \\\"User Activity Tracker Interface\\\",\\n  \\\"description\\\": \\\"An interface that tracks and logs all user activity on a Flask web application. It stores the IP, endpoint, user agent, and timestamp of each request in an SQLite database.\\\",\\n  \\\"function_name\\\": \\\"log_request\\\",\\n  \\\"input_args\\\": {\\n    \\\"app\\\": \\\"A Flask instance of a web application.\\\"\\n  },\\n  \\\"return\\\": \\\"The same Flask instance, modified to log all incoming requests.\\\",\\n  \\\"depend\\\": {\\n    \\\"Python libraries\\\": [\\\"flask\\\", \\\"sqlite3\\\", \\\"datetime\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A supervisor committed to implementing policies and practices that prioritize the well-being of shift workers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Shift Schedule Optimizer Interface\\\",\\n\\\"description\\\": \\\"An interface that takes the number of workers, the number of shifts, a list of preferred shifts for each worker, and the required number of workers per shift, and returns an optimal shift schedule that tries to assign everyone their preferred shifts while meeting the requirements.\\\",\\n\\\"function_name\\\": \\\"optimize_shift_schedule\\\",\\n\\\"input_args\\\": [\\\"num_workers\\\", \\\"num_shifts\\\", \\\"preferences\\\", \\\"required_workers\\\"],\\n\\\"return\\\": \\\"An optimal shift schedule as a 2D list where the row represents a worker and each column represents a shift. A value of 1 means the worker is assigned to that shift, and 0 means they are not. None is returned if no solution is found.\\\",\\n\\\"depend\\\": \\\"Python library: pulp\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mischievous parrot who loves to imitate the playful banter between the cat and the golden retriever", "synthesized text": "\"{\\n\\\"name\\\": \\\"Parrot Speech Synthesis Interface\\\",\\n\\\"description\\\": \\\"This interface converts text, specifically dialogues between a cat and a golden retriever, into an audio file imitating a parrot's voice using Google's Text-to-Speech API.\\\",\\n\\\"function_name\\\": \\\"imitate_parrot\\\",\\n\\\"input_args\\\": \\\"text - a string representing the dialogue to be converted to speech.\\\",\\n\\\"return\\\": \\\"A string representing the path to the saved audio file.\\\",\\n\\\"depend\\\": \\\"Google Cloud Text-to-Speech API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A conventional marketing manager who trusts in traditional marketing approaches and intuition for strategic decisions", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Marketing Campaign Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface to fetch and analyze the performance of marketing campaigns from Google Analytics. It requires the Google Analytics View ID and the start and end dates for the period to be analyzed, as well as the location of the key file for authentication with Google Analytics API.\\\",\\n  \\\"function_name\\\": \\\"analyze_campaign_performance\\\",\\n  \\\"input_args\\\": {\\n    \\\"view_id\\\": \\\"The Google Analytics View ID for the website to be analyzed\\\",\\n    \\\"start_date\\\": \\\"The start date for the period to be analyzed (format: yyyy-mm-dd)\\\",\\n    \\\"end_date\\\": \\\"The end date for the period to be analyzed (format: yyyy-mm-dd)\\\",\\n    \\\"key_file_location\\\": \\\"The location of the key file for authentication with Google Analytics API\\\"\\n  },\\n  \\\"return\\\": \\\"A JSON string that represents a list of records, each of which contains the name of a marketing campaign and its performance metrics (number of sessions, number of pageviews, and session duration).\\\",\\n  \\\"depend\\\": {\\n    \\\"googleapiclient\\\": \\\"Used to interact with Google Analytics API\\\",\\n    \\\"pandas\\\": \\\"Used to process and analyze the fetched data\\\",\\n    \\\"google-auth\\\": \\\"Used for authentication with Google Analytics API\\\"\\n  }\\n}\"", "description": "tool development"}
{"input persona": "An aspiring young field hockey player from Australia who idolizes Tim Brand", "synthesized text": "\"{\\n\\\"name\\\": \\\"Field Hockey Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze a field hockey player's performance from a video.\\\",\\n\\\"function_name\\\": \\\"get_performance_metrics\\\",\\n\\\"input_args\\\": \\\"video_path\\\",\\n\\\"return\\\": \\\"A dictionary containing average speed, number of goals, and pass accuracy.\\\",\\n\\\"depend\\\": \\\"cv2, numpy, tensorflow.keras\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young professional who recently moved to the Downers Grove community and is looking to get involved in local charitable initiatives", "synthesized text": "\"{\\n \\\"name\\\": \\\"Charity Search Interface\\\",\\n \\\"description\\\": \\\"This interface provides users with the top-rated local charities based on their location. The data is sourced from the Charity Navigator API.\\\",\\n \\\"function_name\\\": \\\"get_top_charities\\\",\\n \\\"input_args\\\": {\\\"city\\\": \\\"string\\\", \\\"state\\\": \\\"string\\\"},\\n \\\"return\\\": {\\\"top_charities\\\": \\\"list of strings\\\"},\\n \\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"Charity Navigator API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A graduate student studying rhetoric and communication who shares valuable articles and research papers related to Kenneth Burke", "synthesized text": "\"{\\n\\\"name\\\": \\\"Article Summarization Interface\\\", \\n\\\"description\\\": \\\"This interface takes in the URL of an article or research paper as input and returns a summary of it. It uses a pre-trained model from Hugging Face to summarize the article.\\\", \\n\\\"function_name\\\": \\\"summarize_article\\\", \\n\\\"input_args\\\": [\\\"url\\\"], \\n\\\"return\\\": \\\"Summary of the article or research paper.\\\", \\n\\\"depend\\\": [\\\"Hugging Face Transformers\\\", \\\"requests\\\", \\\"BeautifulSoup\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A vocalist known for her soulful voice and interest in cross-genre music projects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Voice Pitch Correction Interface\\\",\\n\\\"description\\\": \\\"This interface adjusts the pitch of an audio file by a specified tuning factor. Positive tuning factor values increase the pitch, while negative values decrease it.\\\",\\n\\\"function_name\\\": \\\"correct_pitch\\\",\\n\\\"input_args\\\": {\\n    \\\"audio_file_path\\\": \\\"Path to the audio file to be pitch-corrected\\\",\\n    \\\"tuning_factor\\\": \\\"Amount by which to adjust the pitch of the audio. Positive values increase the pitch, negative values decrease it.\\\"\\n},\\n\\\"return\\\": \\\"Path to the pitch-corrected audio file\\\",\\n\\\"depend\\\": \\\"Python's Librosa library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A German TV show enthusiast who loves to correct misinformation.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Subtitle Translation and Correction Interface\\\",\\n\\\"description\\\": \\\"This interface translates German subtitles into English and corrects any potential errors in the translation.\\\",\\n\\\"function_name\\\": \\\"translate_and_correct_subtitles\\\",\\n\\\"input_args\\\": \\\"subtitle_file - The path to the subtitle file (.srt)\\\",\\n\\\"return\\\": \\\"A list of translated and corrected English subtitles.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, pysrt; Web APIs: Google Translation API, Spellcheck API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Danish tourist planning to visit Australia", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface returns the current exchange rate between the user's home currency and the destination country's currency.\\\",\\n\\\"function_name\\\": \\\"get_exchange_rate\\\",\\n\\\"input_args\\\": [\\\"home_currency\\\", \\\"destination_currency\\\"],\\n\\\"return\\\": \\\"Exchange rate from home currency to destination currency\\\",\\n\\\"depend\\\": \\\"requests library, Open Exchange Rates API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a newbie Ubuntu user who's facing WiFi problems as well", "synthesized text": "\"{\\n\\\"name\\\": \\\"WiFi Troubleshooter Interface\\\",\\n\\\"description\\\": \\\"An interface that automates common troubleshooting steps for WiFi connectivity issues on Ubuntu systems.\\\",\\n\\\"function_name\\\": \\\"troubleshoot_wifi\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"Prints status messages during troubleshooting. If issues persist after running the function, user is advised to check the available WiFi networks and connect manually.\\\",\\n\\\"depend\\\": \\\"Python's built-in 'os' and 'subprocess' libraries are used to execute system-level commands.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A physician providing tangible examples of patient needs and treatments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Treatment Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes as input a description of symptoms and generates potential medical treatment options.\\\",\\n\\\"function_name\\\": \\\"get_medical_treatments\\\",\\n\\\"input_args\\\": \\\"symptoms - a text description of the patient's symptoms\\\",\\n\\\"return\\\": \\\"A text string containing potential treatment options for the described symptoms\\\",\\n\\\"depend\\\": \\\"HuggingFace transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A conservative politician who believes that consumer protection laws hinder economic growth and competitiveness", "synthesized text": "\"{\\n\\\"name\\\": \\\"Consumer Complaint Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes consumer complaint data from the Consumer Financial Protection Bureau (CFPB) for a specific product or sector. It returns a summary of the number and nature of complaints.\\\",\\n\\\"function_name\\\": \\\"get_complaints_by_product\\\",\\n\\\"input_args\\\": \\\"product - The product or sector to analyze.\\\",\\n\\\"return\\\": \\\"A dictionary with the total number of complaints ('count') and a breakdown of complaint issues ('issues').\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, pandas. Web APIs: Consumer Complaint Database API from the Consumer Financial Protection Bureau.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small business owner managing a family-owned resort in The Bahamas", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"Provides a 5-day weather forecast for a given geographical location\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": {\\\"lat\\\": \\\"Latitude of the location\\\", \\\"lon\\\": \\\"Longitude of the location\\\"},\\n\\\"return\\\": \\\"5-day weather forecast, with each day's forecast including the time and weather description\\\",\\n\\\"depend\\\": {\\\"Python library\\\": [\\\"requests\\\", \\\"json\\\"], \\\"Web API\\\": [\\\"OpenWeatherMap\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A former Vermont varsity hockey player who still keeps a close eye on old team's performances.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Scores Retrieval Interface\\\",\\n\\\"description\\\": \\\"An interface that retrieves the latest game results for a specified team from a sports news website.\\\",\\n\\\"function_name\\\": \\\"get_latest_game_results\\\",\\n\\\"input_args\\\": \\\"team_name - The name of the team for which to retrieve the latest results.\\\",\\n\\\"return\\\": \\\"A string containing the latest game results for the specified team.\\\",\\n\\\"depend\\\": \\\"python libraries - requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "A property developer looking to create a striking and low-maintenance outdoor space for a new housing project", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plant Species Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes in the climate type, soil type, and desired maintenance level for an outdoor space and returns a list of recommended plant species suitable for the space.\\\",\\n\\\"function_name\\\": \\\"recommend_plants\\\",\\n\\\"input_args\\\": [\\\"climate\\\", \\\"soil\\\", \\\"maintenance\\\"],\\n\\\"return\\\": \\\"List of recommended plant species names\\\",\\n\\\"depend\\\": \\\"sklearn, pandas, plant_dataset.csv (a custom dataset of plant species and their characteristics)\\\"\\n}\"", "description": "tool development"}
{"input persona": "a nostalgic video-gamer who experienced the original Metal Gear Solid Snake Eater game.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game OST Downloader Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to get download links for the OSTs of a given game.\\\",\\n\\\"function_name\\\": \\\"get_game_ost_links\\\",\\n\\\"input_args\\\": {\\n    \\\"game_title\\\": \\\"The title of the game\\\"\\n},\\n\\\"return\\\": \\\"A list of download links for the game's OSTs\\\",\\n\\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries, Khinsider API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A healthcare professional knowledgeable about the effects and potential risks of using Kratom as a substitute for opioids", "synthesized text": "\"{\\n\\\"name\\\": \\\"Kratom Effects and Risks Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface fetches compound information of a drug from the PubChem API and uses a pre-trained model to analyze the potential risks. The user only needs to input the name of the drug, and the interface returns a detailed analysis of the effects and potential risks.\\\", \\n\\\"function_name\\\": \\\"analyze_risks\\\",\\n\\\"input_args\\\": \\\"drug_name - string representing the name of the drug\\\",\\n\\\"return\\\": \\\"A dictionary with 'risk_level' and 'drug_info' keys, representing the risk level and detailed information of the drug, respectively\\\",\\n\\\"depend\\\": \\\"Python's requests library for API requests, TensorFlow and HuggingFace's transformers for risk analysis\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young picky eater who learns to appreciate nutritious food through creative recipes and fun activities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recipe Recommendations Interface\\\",\\n\\\"description\\\": \\\"This interface takes a list of preferred ingredients and a maximum calorie amount as input, and returns a list of creative and fun recipes that meet the user's criteria.\\\",\\n\\\"function_name\\\": \\\"get_creative_recipes\\\",\\n\\\"input_args\\\": {\\\"preferred_ingredients\\\": \\\"list of strings\\\", \\\"max_calories\\\": \\\"integer\\\"},\\n\\\"return\\\": \\\"list of dictionaries\\\",\\n\\\"depend\\\": {\\\"libraries\\\": [\\\"requests\\\"], \\\"web_APIs\\\": [\\\"Spoonacular's complex recipe search API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A high-ranking military officer interested in implementing blockchain for secure communication and information sharing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Blockchain Transaction Interface\\\",\\n\\\"description\\\": \\\"This interface allows a user to add a secure, signed transaction to a simple blockchain, ensuring the integrity of the chain before the transaction is added. The sender, recipient, message, and sender's private key are inputs to the function.\\\",\\n\\\"function_name\\\": \\\"add_transaction_to_blockchain\\\",\\n\\\"input_args\\\": [\\\"sender\\\", \\\"recipient\\\", \\\"message\\\", \\\"sender_private_key\\\"],\\n\\\"return\\\": \\\"The updated blockchain, which is a list of blocks. Each block is a dictionary containing the index of the block and the transactions it contains.\\\",\\n\\\"depend\\\": [\\\"pycryptodome\\\", \\\"hashlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Mexican LED lighting enthusiast", "synthesized text": "\"{\\n\\\"name\\\": \\\"LED Color Temperature Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface converts the color temperature between Kelvin and Mired.\\\",\\n\\\"function_name\\\": \\\"convert_color_temperature\\\",\\n\\\"input_args\\\": {\\n  \\\"input_value\\\": \\\"the color temperature value\\\",\\n  \\\"input_unit\\\": \\\"the unit of the input value, either 'Kelvin' or 'Mired'\\\"\\n},\\n\\\"return\\\": \\\"the color temperature value in the other unit or an error message\\\",\\n\\\"depend\\\": \\\"Python standard library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A loyal client who appreciates the prompt and reliable service provided by the technician", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Technician Schedule Interface\\\",\\n  \\\"description\\\": \\\"An interface to schedule a technician's service visit using a service provider or CRM API.\\\",\\n  \\\"function_name\\\": \\\"schedule_technician_visit\\\",\\n  \\\"input_args\\\": [\\\"client_id\\\", \\\"preferred_date\\\"],\\n  \\\"return\\\": \\\"Appointment details as a dictionary\\\",\\n  \\\"depend\\\": \\\"requests library, Service provider or CRM API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced animator who worked on several blockbuster animated movies and now teaches animation techniques", "synthesized text": "\"{\\n\\\"name\\\": \\\"Animation Frame Interpolation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a TensorFlow model to interpolate frames in a video, creating smooth transitions and slow-motion effects.\\\",\\n\\\"function_name\\\": \\\"interpolate_frames\\\",\\n\\\"input_args\\\": [\\\"path_to_video\\\", \\\"desired_fps\\\"],\\n\\\"return\\\": \\\"A video clip with interpolated frames.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, moviepy\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Red Cross volunteer in Florida", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hurricane Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses the APIs from the National Oceanic and Atmospheric Administration (NOAA) to predict the likelihood of hurricanes in a specific region. Users only need to input the name of the region, and the interface will return the probability of a hurricane occurring in that region.\\\",\\n\\\"function_name\\\": \\\"get_hurricane_probability\\\",\\n\\\"input_args\\\": [\\\"region\\\"],\\n\\\"return\\\": \\\"probability\\\",\\n\\\"depend\\\": \\\"NOAA API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An environmental activist who is highly concerned about the impact of power lines on public health.", "synthesized text": "\"{\\n\\\"name\\\": \\\"EMF Measurement Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to interpret electromagnetic field (EMF) data. The user inputs the EMF data file path, and the interface returns the average, peak and standard deviation of EMF values as well as classifies them as safe or unsafe based on WHO guidelines.\\\",\\n\\\"function_name\\\": \\\"analyze_emf\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_data\\\": \\\"string\\\"\\n},\\n\\\"return\\\": {\\n    \\\"average\\\": \\\"float\\\",\\n    \\\"peak\\\": \\\"float\\\",\\n    \\\"standard_deviation\\\": \\\"float\\\",\\n    \\\"classification\\\": \\\"string\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"tensorflow_hub\\\": \\\"https://tfhub.dev/google/universal-sentence-encoder/4\\\",\\n    \\\"pandas\\\": \\\"1.1.5\\\",\\n    \\\"numpy\\\": \\\"1.19.5\\\",\\n    \\\"tensorflow\\\": \\\"2.4.0\\\"\\n}\\n}\"", "description": "tool development"}
{"input persona": "a SUSE Linux administrator who is experienced in troubleshooting dependency issues and can help find a solution.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Package Dependency Checker\\\",\\n\\\"description\\\": \\\"Check the dependencies of a specified package in a SUSE Linux system.\\\",\\n\\\"function_name\\\": \\\"get_package_dependencies\\\",\\n\\\"input_args\\\": {\\\"package_name\\\": \\\"name of the package\\\"},\\n\\\"return\\\": \\\"a list of dependencies or an error message if the package is not installed\\\",\\n\\\"depend\\\": \\\"Python's subprocess module, rpm command in Linux\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Java programming student who just started learning about Java date-time API", "synthesized text": "\"{\\n\\\"name\\\": \\\"Java Date-Time Interface\\\",\\n\\\"description\\\": \\\"This interface performs various date-time operations using Java's built-in date-time API. It includes getting the current date/time, adding or subtracting days from a date, and converting between time zones.\\\",\\n\\\"function_name\\\": [\\\"get_current_date_time\\\", \\\"add_days_to_date\\\", \\\"subtract_days_from_date\\\", \\\"convert_time_zone\\\"],\\n\\\"input_args\\\": [\\\"None\\\", \\\"date_str, days\\\", \\\"date_str, days\\\", \\\"time_str, from_tz, to_tz\\\"],\\n\\\"return\\\": [\\\"Current date and time as string\\\", \\\"New date as string after adding specified days\\\", \\\"New date as string after subtracting specified days\\\", \\\"Converted time as string in the target time zone\\\"],\\n\\\"depend\\\": [\\\"Java date-time API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A materials engineer developing new materials to construct space vehicles that are resistant to orbital debris impacts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Properties Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface takes a chemical formula as input and predicts the properties of the material using a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"get_material_properties\\\",\\n\\\"input_args\\\": [\\\"chemical_formula\\\"],\\n\\\"return\\\": \\\"An array of predicted properties of the material in the chemical formula.\\\",\\n\\\"depend\\\": \\\"Python libraries: torch, pymatgen, matminer; Machine learning model: a pre-trained model (e.g., pretrained_model.pth)\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a seasoned motion designer with over a decade of experience in the industry, and I've always dreamed of winning this prestigious award one day.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Frame Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts frames from a video at a specified frame rate using the OpenCV library in Python.\\\",\\n\\\"function_name\\\": \\\"extract_frames\\\",\\n\\\"input_args\\\": [\\\"video_path\\\", \\\"frame_rate\\\"],\\n\\\"return\\\": \\\"A list of image files representing the extracted frames.\\\",\\n\\\"depend\\\": [\\\"OpenCV library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A representative from the local Small Business Administration office who assists in navigating the grant and loan application process", "synthesized text": "\"{\\n\\\"name\\\": \\\"SBA Loan Eligibility Check Interface\\\",\\n\\\"description\\\": \\\"This interface checks an applicant's eligibility for different loan programs provided by the Small Business Administration (SBA). It uses the SBA's API to return the eligible loan programs based on the provided business information.\\\",\\n\\\"function_name\\\": \\\"check_loan_eligibility\\\",\\n\\\"input_args\\\": {\\n    \\\"business_info\\\": \\\"A dictionary with keys corresponding to the required information for checking loan eligibility.\\\"\\n},\\n\\\"return\\\": \\\"A list of loan programs that the business is eligible for based on the provided information, or an error message if unable to check loan eligibility.\\\",\\n\\\"depend\\\": \\\"requests library, SBA's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired police officer advocating for stronger punishments for animal cruelty", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Animal Cruelty Data Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface that fetches detailed statistics about animal cruelty cases in a specific region from a web API. It can be used to advocate for stronger punishments for animal cruelty.\\\",\\n  \\\"function_name\\\": \\\"get_animal_cruelty_data\\\",\\n  \\\"input_args\\\": {\\n    \\\"region\\\": \\\"The city/state/country for which to fetch animal cruelty data.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"total_cases\\\": \\\"The total number of animal cruelty cases in the specified region.\\\",\\n    \\\"conviction_rate\\\": \\\"The conviction rate for animal cruelty cases in the specified region.\\\",\\n    \\\"most_common_animal_victim\\\": \\\"The animal most commonly victimized in the specified region.\\\",\\n    \\\"most_common_type_of_abuse\\\": \\\"The most common type of abuse inflicted on animals in the specified region.\\\",\\n    \\\"average_jail_time\\\": \\\"The average jail time served for animal cruelty in the specified region.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"requests\\\"],\\n    \\\"Web APIs\\\": [\\\"Pet-Abuse.com API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A novice reader trying to convey a succinct summary of the book review", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Summarization Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained T5 model from Hugging Face Transformers library to summarize book reviews. Users input the text of a book review, and the interface returns a concise summary.\\\",\\n\\\"function_name\\\": \\\"summarize_book_review\\\",\\n\\\"input_args\\\": \\\"review_text\\\",\\n\\\"return\\\": \\\"summary_text\\\",\\n\\\"depend\\\": \\\"Hugging Face Transformers (T5 model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An astronaut recently returned from the International Space Station, sharing their experiences of space travel", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stargazing Guide\\\",\\n\\\"description\\\": \\\"This interface uses NASA's API to fetch data about visible constellations or celestial events from a specific location on a specific date.\\\",\\n\\\"function_name\\\": \\\"stargazing_guide\\\",\\n\\\"input_args\\\": [\\\"date\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"List of visible constellations or celestial events\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"NASA API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an old fan of the Sanremo Tennis Challenger", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Match History Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to fetch a tennis player's match history.\\\",\\n\\\"function_name\\\": \\\"get_player_match_history\\\",\\n\\\"input_args\\\": \\\"player_name - string representing the name of the player\\\",\\n\\\"return\\\": \\\"match history of the player as a text\\\",\\n\\\"depend\\\": \\\"requests library, Tennis Abstract API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A regulatory board member responsible for overseeing the establishment and operation of casinos, providing information and guidance on legal requirements", "synthesized text": "\"{\\n\\\"name\\\": \\\"Casino Regulatory Compliance Check Interface\\\",\\n\\\"description\\\": \\\"This interface checks whether a casino is compliant with the current regulations and laws.\\\",\\n\\\"function_name\\\": \\\"check_casino_compliance\\\",\\n\\\"input_args\\\": \\\"casino_name\\\",\\n\\\"return\\\": \\\"Compliance status of the casino (string)\\\",\\n\\\"depend\\\": \\\"Web API of a regulatory database\\\"\\n}\"", "description": "tool development"}
{"input persona": "A creative event planner specializing in pop-up cinemas in unconventional locations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface provides weather forecast for a given location and date. It is particularly useful for event planners to check weather conditions.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"date\\\"],\\n\\\"return\\\": \\\"Weather forecast for the given location and date.\\\",\\n\\\"depend\\\": \\\"OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A clueless young adult who has just started her first job and has no experience in filing taxes, let alone understand the implications of alimony.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tax Calculation Interface\\\",\\n\\\"description\\\": \\\"An interface utilizing Policy Simulation Library's Tax-Calculator to calculate the user's tax based on gross income, number of children, and alimony paid. The interface helps users to understand their tax obligations without requiring detailed knowledge of tax rules.\\\",\\n\\\"function_name\\\": \\\"calculate_tax\\\",\\n\\\"input_args\\\": {\\\"gross_income\\\": \\\"The user's gross income\\\", \\\"num_children\\\": \\\"The number of children the user has\\\", \\\"alimony_paid\\\": \\\"The amount of alimony the user has paid\\\"},\\n\\\"return\\\": \\\"The calculated tax for the user\\\",\\n\\\"depend\\\": \\\"Policy Simulation Library's Tax-Calculator Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Full-Time JavaScript developer but new to RxJS.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Observable Stream Interface\\\",\\n\\\"description\\\": \\\"A high-level interface for creating and using Observables in RxJS\\\",\\n\\\"function_name\\\": [\\\"create_observable\\\", \\\"subscribe\\\"],\\n\\\"input_args\\\": {\\n\\\"create_observable\\\": [\\\"data\\\"],\\n\\\"subscribe\\\": [\\\"callback\\\"]\\n},\\n\\\"return\\\": {\\n\\\"create_observable\\\": \\\"Observable\\\",\\n\\\"subscribe\\\": \\\"None\\\"\\n},\\n\\\"depend\\\": [\\\"RxJS library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A novice coder trying to learn about Audio Devices in Linux through the ALSA Library", "synthesized text": "\"{\\n\\\"name\\\": \\\"List Audio Devices Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the ALSA library to list all audio devices available in the system.\\\",\\n\\\"function_name\\\": \\\"list_audio_devices\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"A list of names of all available audio devices.\\\",\\n\\\"depend\\\": \\\"Python library: alsaaudio\\\"\\n}\"", "description": "tool development"}
{"input persona": "A speech therapist working in a clinic who wants to enhance their knowledge of pronunciation techniques", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pronunciation Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze the pronunciation of spoken words by comparing them to the correct pronunciation\\\",\\n\\\"function_name\\\": \\\"analyze_pronunciation\\\",\\n\\\"input_args\\\": [\\\"speech_file\\\", \\\"correct_word\\\"],\\n\\\"return\\\": \\\"Similarity ratio between the correct word and the transcribed word\\\",\\n\\\"depend\\\": [\\\"Google Speech-to-Text API\\\", \\\"Python NLTK library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Casual Pythonista and an advocate of computational efficiency.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Parallel Computation Interface\\\", \\n\\\"description\\\": \\\"This interface applies a given function in parallel over a list of inputs, leveraging multiple cores for computational efficiency.\\\", \\n\\\"function_name\\\": \\\"apply_parallel_computation\\\", \\n\\\"input_args\\\": \\n    {\\n    \\\"function\\\": \\\"A function to be applied to each element in the input list\\\", \\n    \\\"input_list\\\": \\\"A list of inputs to which the function will be applied\\\", \\n    \\\"n_cores\\\": \\\"The number of cores to use for parallel computation\\\"\\n    }, \\n\\\"return\\\": \\\"A list of results from applying the function to each element in the input list.\\\", \\n\\\"depend\\\": \\\"joblib library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a softball player and a fan of Stephanie VanBrakle Prothro.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pitch Speed Conversion Interface\\\",\\n\\\"description\\\": \\\"Converts the speed of a softball pitch to the equivalent baseball pitch speed.\\\",\\n\\\"function_name\\\": \\\"convert_softball_speed_to_baseball\\\",\\n\\\"input_args\\\": {\\n    \\\"speed_in_mph\\\": \\\"Speed of the softball pitch in miles per hour.\\\"\\n},\\n\\\"return\\\": \\\"Equivalent baseball pitch speed in miles per hour.\\\",\\n\\\"depend\\\": \\\"None\\\"\\n}\"", "description": "tool development"}
{"input persona": "A reviewer for an academic journal in the field of computer science", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plagiarism Check Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a piece of text and checks it for plagiarism against existing online documents. It returns a report indicating if there are any excessively similar pieces of text found online.\\\",\\n\\\"function_name\\\": \\\"check_plagiarism\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"report\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"sentence_transformers\\\", \\\"sklearn.metrics.pairwise\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A criminologist and a critics of the aggressive \"tough on crime\" policies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Crime Rate Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the crime rate for a specific location given the socio-economic conditions. It uses a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_crime_rate\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"socio_econ_conditions\\\"],\\n\\\"return\\\": {\\\"type\\\": \\\"float\\\", \\\"description\\\": \\\"predicted crime rate\\\"},\\n\\\"depend\\\": {\\\"resources\\\": [\\\"Machine Learning Model\\\", \\\"Scikit-learn\\\", \\\"Pandas\\\", \\\"Pickle\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a long-time friend and business school classmate of Priyank Shah", "synthesized text": "\"{\\n\\\"name\\\": \\\"People Connection Interface\\\",\\n\\\"description\\\": \\\"This interface uses LinkedIn's API to determine whether two people are connected and the nature of the connection. It is useful for non-technical users who want to investigate connections between individuals.\\\",\\n\\\"function_name\\\": \\\"get_connection_between_people\\\",\\n\\\"input_args\\\": [\\\"name1 - the name of the first person\\\", \\\"name2 - the name of the second person\\\"],\\n\\\"return\\\": \\\"A string stating whether the two people are connected and the nature of the connection if one exists.\\\",\\n\\\"depend\\\": \\\"Python's requests library, LinkedIn's People Search API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dedicated fan of Pop Evil who works as a music critic in Cleveland, Ohio", "synthesized text": "\"{\\n\\\"name\\\": \\\"Upcoming Concert Finder Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the Songkick API to find upcoming concerts by a specified artist in a specified location.\\\",\\n\\\"function_name\\\": \\\"get_upcoming_concerts\\\",\\n\\\"input_args\\\": [\\\"artist\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"List of dictionaries. Each dictionary represents an upcoming concert with the venue name, city, and date.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Songkick API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A person who dislikes walls, partitions, and barriers of any kind.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Open Space Finder Interface\\\",\\n\\\"description\\\": \\\"This interface uses the OpenStreetMap API to help users find large, open spaces in their vicinity, such as parks, fields, and squares. Users only need to input their current location, and the interface will return a list of nearby open, unobstructed spaces.\\\",\\n\\\"function_name\\\": \\\"get_open_spaces\\\",\\n\\\"input_args\\\": \\\"location\\\",\\n\\\"return\\\": \\\"List of nearby open spaces\\\",\\n\\\"depend\\\": \\\"OpenStreetMap API, requests, geopy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A statistics major who is conducting research on the correlation between risk factors and decision-making", "synthesized text": "\"{\\n\\\"name\\\": \\\"Correlation Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface takes in two lists (risk factors and decision-making scores) and returns the correlation coefficient and p-value, helping to understand the relationship and the significance level of the correlation.\\\",\\n\\\"function_name\\\": \\\"calculate_correlation\\\",\\n\\\"input_args\\\": [\\\"risk_factors\\\", \\\"decision_making\\\"],\\n\\\"return\\\": [\\\"correlation\\\", \\\"p_value\\\"],\\n\\\"depend\\\": [\\\"pandas\\\", \\\"scipy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A bestselling author who provides guidance on storytelling techniques and the publishing industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Title Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface generates book title suggestions based on a brief description of the book. The user can specify the number of suggestions they want.\\\",\\n\\\"function_name\\\": \\\"generate_book_title\\\",\\n\\\"input_args\\\": [\\\"book_description\\\", \\\"num_suggestions\\\"],\\n\\\"return\\\": \\\"List of suggested book titles\\\",\\n\\\"depend\\\": \\\"huggingface transformers, GPT-2 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a young musician who was just learning to play the guitar in 2009 and was hugely influenced by emo bands:", "synthesized text": "\"{\\n\\\"name\\\": \\\"Song Emotion Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a song's Spotify ID as input and returns the predominant emotion of the song by analyzing its audio features.\\\",\\n\\\"function_name\\\": \\\"predict_emotion\\\",\\n\\\"input_args\\\": \\\"song_id\\\",\\n\\\"return\\\": \\\"emotion\\\",\\n\\\"depend\\\": \\\"Spotify's Web API, TensorFlow, TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "Web developer with hands-on experience on integrating Google Maps with MySQL database.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Map Marker Interface\\\",\\n\\\"description\\\": \\\"This interface provides the capability to store latitude and longitude coordinates into a MySQL database and retrieve them. These coordinates can be used to place markers on Google Maps.\\\",\\n\\\"function_name\\\": {\\\"save_location\\\": \\\"save_location(lat, lng)\\\", \\\"get_all_locations\\\": \\\"get_all_locations()\\\"},\\n\\\"input_args\\\": {\\\"save_location\\\": [\\\"lat\\\", \\\"lng\\\"], \\\"get_all_locations\\\": []},\\n\\\"return\\\": {\\\"save_location\\\": \\\"None, saves location coordinates to a MySQL database\\\", \\\"get_all_locations\\\": \\\"A list of tuples containing latitude and longitude coordinates from the MySQL database\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"mysql.connector\\\"], \\\"web APIs\\\": [\\\"Google Maps API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "Another girl who shares a passion for doll collecting and enjoys organizing doll tea parties with the girl", "synthesized text": "\"{\\n\\\"name\\\": \\\"Doll Collection Organizer Interface\\\",\\n\\\"description\\\": \\\"An interface for managing a doll collection, allowing to add, remove, or view dolls in the collection.\\\",\\n\\\"function_name\\\": [\\\"add_doll\\\", \\\"remove_doll\\\", \\\"view_collection\\\"],\\n\\\"input_args\\\": [\\\"name\\\", \\\"doll_type\\\", \\\"date\\\"],\\n\\\"return\\\": [\\\"None\\\", \\\"None\\\", \\\"DataFrame\\\"],\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A ceramic artist creating handmade dishware that's used in eco-conscious restaurants", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ceramic Color Predictor Interface\\\",\\n\\\"description\\\": \\\"Predicts the color of a ceramic piece given the firing temperature and glaze composition.\\\",\\n\\\"function_name\\\": \\\"predict_ceramic_color\\\",\\n\\\"input_args\\\": [\\\"firing_temp\\\", \\\"glaze_composition\\\"],\\n\\\"return\\\": \\\"RGB color code\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"keras\\\", \\\"sklearn\\\", \\\"pandas\\\", \\\"pickle\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a choirmaster at a German Catholic church", "synthesized text": "\"{\\n\\\"name\\\": \\\"Choir Practice Schedule Interface\\\",\\n\\\"description\\\": \\\"An interface for a choirmaster to manage choir practice schedules using Google Calendar API.\\\",\\n\\\"function_name\\\": \\\"create_event\\\",\\n\\\"input_args\\\": [\\\"date\\\", \\\"start_time\\\", \\\"duration\\\", \\\"description\\\"],\\n\\\"return\\\": \\\"Confirmation message with a link to the event on Google Calendar\\\",\\n\\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A database administrator responsible for optimizing database performance in .NET applications", "synthesized text": "\"{\\n\\\"name\\\": \\\"Database Performance Optimization Interface\\\",\\n\\\"description\\\": \\\"An interface that optimizes the performance of a PostgreSQL database by analyzing the execution plan of an SQL query. The interface uses the psycopg2 library to interact with the database.\\\",\\n\\\"function_name\\\": \\\"optimize_database_performance\\\",\\n\\\"input_args\\\": [\\\"dbname\\\", \\\"user\\\", \\\"password\\\", \\\"host\\\", \\\"port\\\", \\\"query\\\"],\\n\\\"return\\\": \\\"Query execution plan as a list of tuples or error message as a string\\\",\\n\\\"depend\\\": \\\"psycopg2 Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ardent fan of Jerry Lee Lewis, rock 'n' roll music, and Coen Brothers' movies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music and Movie Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a favorite music artist and a favorite movie director as input and returns lists of recommended music tracks and movies respectively.\\\",\\n\\\"function_name\\\": \\\"get_music_and_movie_recommendations\\\",\\n\\\"input_args\\\": {\\\"favorite_music_artist\\\": \\\"A string representing the favorite music artist.\\\", \\\"favorite_movie_director\\\": \\\"A string representing the favorite movie director.\\\"},\\n\\\"return\\\": {\\\"recommended_music\\\": \\\"A list of strings representing recommended music tracks.\\\", \\\"recommended_movies\\\": \\\"A list of strings representing recommended movies.\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"spotipy\\\"], \\\"Web APIs\\\": [\\\"Spotify Web API\\\", \\\"The Movie Database (TMDb) API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A senior android developer with a specialty in using AutoValue.", "synthesized text": "\"{\\n\\\"name\\\": \\\"API Call History Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Android Debug Bridge (adb) to log API calls made by an application. The user inputs the package name of the application, and the interface returns a list of API calls made by the application.\\\",\\n\\\"function_name\\\": \\\"get_api_calls\\\",\\n\\\"input_args\\\": \\\"package_name\\\",\\n\\\"return\\\": \\\"List of API calls made by the application\\\",\\n\\\"depend\\\": \\\"Python library: subprocess, Tool: Android Debug Bridge (adb)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow musician who prefers the warmth and resonance of wooden casings for their instruments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Acoustic Property Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the acoustic properties of different types of wood based on their physical characteristics. The user provides the type of wood and the interface returns the predicted acoustic properties.\\\",\\n\\\"function_name\\\": \\\"predict_acoustic_properties\\\",\\n\\\"input_args\\\": \\\"wood_type\\\",\\n\\\"return\\\": \\\"predicted_properties\\\",\\n\\\"depend\\\": \\\"Python Libraries: pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A passionate young researcher fascinated by the potential impact of decentralization on local governance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Blockchain Transaction Interface\\\",\\n\\\"description\\\": \\\"An interface to send Ether from one Ethereum address to another. Returns the transaction hash.\\\",\\n\\\"function_name\\\": \\\"send_ethereum_transaction\\\",\\n\\\"input_args\\\": {\\n    \\\"sender_address\\\": \\\"The Ethereum address of the sender\\\",\\n    \\\"sender_private_key\\\": \\\"The private key of the sender's Ethereum address\\\",\\n    \\\"recipient_address\\\": \\\"The Ethereum address of the recipient\\\",\\n    \\\"amount\\\": \\\"The amount of Ether to be sent\\\"\\n},\\n\\\"return\\\": \\\"The transaction hash of the performed transaction\\\",\\n\\\"depend\\\": \\\"python's web3 library and Infura API for Ethereum blockchain interaction\\\"\\n}\"", "description": "tool development"}
{"input persona": "A frustrated policyholder advocating for fair compensation for damages caused by a natural disaster", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Damage Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface uses pre-trained machine learning models to estimate the cost of property damage based on images provided by the user. It can be used by policyholders to assess the damage to their property after a natural disaster.\\\",\\n\\\"function_name\\\": \\\"estimate_damage_cost\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_img\\\": \\\"The path to an image file of the damaged property. The image should clearly show the damage.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"damage_type\\\": \\\"The type of damage identified by the model, represented as an integer.\\\",\\n    \\\"estimated_cost\\\": \\\"The estimated cost to repair the damage, in dollars.\\\"\\n},\\n\\\"depend\\\": \\\"This function depends on the TensorFlow Hub and numpy libraries, as well as a pre-trained image recognition model from TensorFlow Hub.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A hotel owner in Tabriz, Iran, who relies on international tourists and is worried about the economic impact of US sanctions.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Exchange Rate Interface\\\",\\n\\\"description\\\": \\\"This interface converts a given amount in Iranian Rials to US dollars using the current exchange rate.\\\",\\n\\\"function_name\\\": \\\"convert_rial_to_usd\\\",\\n\\\"input_args\\\": {\\\"amount_in_rial\\\": \\\"integer\\\"},\\n\\\"return\\\": \\\"float\\\",\\n\\\"depend\\\": \\\"ExchangeRate-API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An artist who incorporates tea leaves and tea stains into their paintings, creating unique works of art", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tea Stain Analysis Interface\\\",\\n\\\"description\\\": \\\"Predicts the color of tea stains based on the type of tea and brewing time\\\",\\n\\\"function_name\\\": \\\"predict_tea_stain_color\\\",\\n\\\"input_args\\\": [\\\"tea_type\\\", \\\"brewing_time\\\"],\\n\\\"return\\\": \\\"Predicted tea stain color in RGB format\\\",\\n\\\"depend\\\": \\\"sklearn, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A healthcare company looking to implement machine learning technology in their operations and seeks the junior developer's expertise", "synthesized text": "\"{\\n\\\"name\\\": \\\"Patient Risk Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the risk of a patient having a particular disease based on their medical history, age, gender, etc.\\\",\\n\\\"function_name\\\": \\\"predict_patient_risk\\\",\\n\\\"input_args\\\": {\\\"patient_data\\\": \\\"dictionary\\\"},\\n\\\"return\\\": \\\"float (risk score)\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"tensorflow\\\", \\\"sklearn\\\"], \\\"machine learning models\\\": [\\\"pre-trained model from TensorFlow or Huggingface\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a Python programmer with a slight preference for using geographic libraries that abstract away the complexity in order to build geographic features.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Geographic Distance Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface takes two locations as input and returns the geographic distance between them.\\\",\\n\\\"function_name\\\": \\\"get_distance\\\",\\n\\\"input_args\\\": {\\n    \\\"location1\\\": \\\"string representing the first location, can be an address, city or country\\\",\\n    \\\"location2\\\": \\\"string representing the second location, can be an address, city or country\\\"\\n},\\n\\\"return\\\": \\\"float representing the geographic distance between the two locations in kilometers\\\",\\n\\\"depend\\\": \\\"geopy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Professor David Hulme, Executive Director of GDI at The University of Manchester", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Similarity Interface\\\",\\n\\\"description\\\": \\\"This interface compares the similarity between two documents by encoding them into high-dimensional vectors using a BERT model, and then computing the cosine similarity between these vectors. It is useful for understanding the overlap between different research papers, articles, or reports.\\\",\\n\\\"function_name\\\": \\\"compare_documents\\\",\\n\\\"input_args\\\": [\\\"path_to_doc1\\\", \\\"path_to_doc2\\\"],\\n\\\"return\\\": \\\"A similarity score between 0 and 1, with 1 being completely identical and 0 being completely dissimilar.\\\",\\n\\\"depend\\\": [\\\"Hugging Face Transformers library, sklearn, torch\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a person who recently had Lap Band surgery", "synthesized text": "\"{\\n\\\"name\\\": \\\"Calorie Counting Interface\\\",\\n\\\"description\\\": \\\"This interface leverages the Edamam API to provide a simple method of obtaining the calorie count of a specific food or meal. It is designed for users who need to monitor their calorie intake, such as someone who recently had Lap Band surgery.\\\",\\n\\\"function_name\\\": \\\"get_calories\\\",\\n\\\"input_args\\\": {\\n    \\\"food\\\": \\\"the name of the food or meal the user consumed\\\"\\n    },\\n\\\"return\\\": \\\"the estimated calorie count of the food or meal\\\",\\n\\\"depend\\\": \\\"Edamam Food Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a resident of Örnsköldsvik Municipality who is active in local politics", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Swedish Parliament Members Information\\\",\\n  \\\"description\\\": \\\"This interface uses the Open Data API provided by the Swedish Parliament (Riksdagen) to get information about the current members of the Swedish Parliament from a specific party.\\\",\\n  \\\"function_name\\\": \\\"get_swedish_parliament_members_by_party\\\",\\n  \\\"input_args\\\": {\\\"party\\\": \\\"String\\\"},\\n  \\\"return\\\": \\\"List of Dictionaries\\\",\\n  \\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"Riksdagen Open Data API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A patient and understanding university staff member tasked with assisting students in financing their education", "synthesized text": "\"{\\n\\\"name\\\": \\\"Student Loan Repayment Plan Estimator Interface\\\",\\n\\\"description\\\": \\\"This interface estimates student loan repayment amounts under each federal student loan repayment plan, based on the loan amount, interest rate, and income.\\\",\\n\\\"function_name\\\": \\\"estimate_student_loan_repayment\\\",\\n\\\"input_args\\\": {\\n    \\\"loan_amount\\\": \\\"The amount of the student loan in dollars.\\\",\\n    \\\"interest_rate\\\": \\\"The interest rate of the student loan as a decimal (e.g., 0.05 for 5%).\\\",\\n    \\\"income\\\": \\\"The annual income of the student in dollars.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"type\\\": \\\"dictionary\\\",\\n    \\\"description\\\": \\\"A dictionary containing details about each federal student loan repayment plan, including the estimated monthly payment and total repayment amount.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"requests\\\"],\\n    \\\"web_APIs\\\": [\\\"Federal Student Aid\\u2019s AidData API\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A fisherman who has noticed changes in fish populations and is interested in understanding the scientific reasons behind these shifts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sea Temperature Data Interface\\\",\\n\\\"description\\\": \\\"This interface fetches sea surface temperature data for a specified location from NOAA's National Centers for Environmental Information. It helps to understand the impact of sea temperature changes on fish populations.\\\",\\n\\\"function_name\\\": \\\"get_sea_temperature\\\",\\n\\\"input_args\\\": {\\n  \\\"location\\\": \\\"A tuple of latitude and longitude of the location\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries each containing the date and sea surface temperature at the specified location\\\",\\n\\\"depend\\\": \\\"requests library, NOAA's National Centers for Environmental Information API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A renowned soundproofing expert sharing his techniques on home DIY forums", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sound Frequency Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze the frequency components of a sound. The user inputs the path to an audio file and the function returns a frequency spectrum of the audio.\\\",\\n\\\"function_name\\\": \\\"analyze_sound_frequency\\\",\\n\\\"input_args\\\": {\\\"audio_file_path\\\": \\\"Path to the audio file to be analyzed.\\\"},\\n\\\"return\\\": \\\"A 2D numpy array where each row corresponds to a frequency bin and each column corresponds to a time frame. The value in each cell represents the decibel level for that frequency at that time.\\\",\\n\\\"depend\\\": \\\"Python's Librosa library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A research-driven expert in thermodynamics with significant contributions to the field of energy conversion and storage", "synthesized text": "\"{\\n\\\"name\\\": \\\"Thermodynamic Property Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to calculate the specific heat at constant pressure (Cp) for a given substance at a specified temperature.\\\",\\n\\\"function_name\\\": \\\"calculate_specific_heat\\\",\\n\\\"input_args\\\": {\\n    \\\"substance\\\": \\\"Name of the substance\\\",\\n    \\\"temperature\\\": \\\"Temperature at which the Cp is needed (Kelvin)\\\"\\n},\\n\\\"return\\\": \\\"Specific heat at constant pressure (Cp) for the given substance at the specified temperature.\\\",\\n\\\"depend\\\": \\\"Python library: CoolProp\\\"\\n}\"", "description": "tool development"}
{"input persona": "A grandchild of an Emory alumnus who enjoys listening to the retiree's stories and feels a strong connection to the university", "synthesized text": "\"{\\n\\\"name\\\": \\\"University History Quiz Interface\\\",\\n\\\"description\\\": \\\"This interface fetches information about a university from Wikipedia and generates a quiz based on the information. It is intended to help individuals learn about a university in an interactive and engaging way.\\\",\\n\\\"function_name\\\": \\\"create_quiz\\\",\\n\\\"input_args\\\": \\\"university_name: Name of the university, num_questions: Number of questions to generate\\\",\\n\\\"return\\\": \\\"A list of question-answer pairs about the university\\\",\\n\\\"depend\\\": \\\"Python's requests library for fetching information from Wikipedia, Huggingface's transformers library for question generation\\\"\\n}\"", "description": "tool development"}
{"input persona": "As a patient with rheumatoid arthritis who has been actively involved in various therapy programs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Predictive Pain Level Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the pain level of rheumatoid arthritis patients based on their medical history, medication, and physical activities.\\\",\\n\\\"function_name\\\": \\\"predict_pain_level\\\",\\n\\\"input_args\\\": [\\\"medical_history_file\\\", \\\"medication_file\\\", \\\"activity_file\\\"],\\n\\\"return\\\": \\\"Predicted pain level (integer)\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"torch\\\", \\\"transformers\\\"], \\\"machine learning models\\\": [\\\"huggingface/your_model\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A bioinformatics specialist who is passionate about using genomics in game development to create more realistic and immersive experiences", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genome Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a path to a FASTA file as input and returns some basic statistics about the genome sequence, such as its length, GC content, and nucleotide distribution.\\\",\\n\\\"function_name\\\": \\\"analyze_genome_sequence\\\",\\n\\\"input_args\\\": {\\\"fasta_file_path\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"length\\\": \\\"integer\\\", \\\"gc_content\\\": \\\"float\\\", \\\"nucleotide_distribution\\\": \\\"dictionary\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"Bio from Biopython\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A history professor teaching a course on Alberta's political history", "synthesized text": "\"{\\n\\\"name\\\": \\\"Political Party Classification Interface\\\",\\n\\\"description\\\": \\\"This interface takes a political speech or document text as input and returns the likely political party affiliation of the speaker or author.\\\",\\n\\\"function_name\\\": \\\"classify_political_party\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"String indicating the likely political party ('Conservative Party', 'New Democratic Party', 'Liberal Party')\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers library and the RoBERTa model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A publisher interested in innovative and unique board game designs, offering opportunities for collaboration and publication", "synthesized text": "\"{\\n\\\"name\\\": \\\"Board Game Idea Generator Interface\\\",\\n\\\"description\\\": \\\"Interface to generate innovative and unique board game ideas based on a specific theme or concept. Powered by a large language model.\\\",\\n\\\"function_name\\\": \\\"generate_board_game_idea\\\",\\n\\\"input_args\\\": [\\\"theme\\\"],\\n\\\"return\\\": \\\"A brief description of a board game idea centered around the input theme.\\\",\\n\\\"depend\\\": \\\"Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A synthetic dye manufacturer trying to convince artisans to switch to their bold, longer-lasting colors", "synthesized text": "\"{\\n\\\"name\\\": \\\"Color Comparison Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that uses a pre-trained TensorFlow model to compare the color intensity and longevity of two images.\\\",\\n\\\"function_name\\\": \\\"compare_colors\\\",\\n\\\"input_args\\\": [\\\"img_path_1\\\", \\\"img_path_2\\\"],\\n\\\"return\\\": \\\"A numpy array representing the comparison of color intensity and longevity of the two images.\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"numpy\\\", \\\"https://tfhub.dev/google/compare_color/1\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An insurance sales agent who relies on visually striking advertisements to attract customers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Image Color Enhancement Interface\\\",\\n\\\"description\\\": \\\"This interface enhances the color and contrast of an image to make it more visually appealing. It takes the path to an image file as input and returns a color enhanced version of the image.\\\",\\n\\\"function_name\\\": \\\"enhance_image_color\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"A color enhanced version of the input image\\\",\\n\\\"depend\\\": \\\"This function depends on the OpenCV library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a software engineer specialized in Python and familiar with abstract syntax tree (AST) transformation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Python Code Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface for analyzing and modifying Python code using abstract syntax tree (AST) transformation. It can replace all instances of a variable name with a new name in a given Python code.\\\",\\n\\\"function_name\\\": \\\"rename_variable_in_code\\\",\\n\\\"input_args\\\": {\\n    \\\"code\\\": \\\"Python code as a string\\\",\\n    \\\"old_name\\\": \\\"Old variable name as a string\\\",\\n    \\\"new_name\\\": \\\"New variable name as a string\\\"\\n},\\n\\\"return\\\": \\\"Modified Python code as a string\\\",\\n\\\"depend\\\": \\\"Python's built-in `ast` and `codegen` libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow renewable energy enthusiast who shares information and resources about Li-ion batteries", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Battery Life Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the remaining lifespan of a Li-ion battery based on its current charge, discharge, and temperature.\\\",\\n  \\\"function_name\\\": \\\"predict_battery_life\\\",\\n  \\\"input_args\\\": {\\n    \\\"charge\\\": \\\"Current charge of the battery\\\",\\n    \\\"discharge\\\": \\\"Current discharge of the battery\\\",\\n    \\\"temperature\\\": \\\"Current temperature of the battery\\\"\\n  },\\n  \\\"return\\\": \\\"Estimated remaining life of the battery in cycles\\\",\\n  \\\"depend\\\": \\\"Pre-trained machine learning model (e.g., a regression model), pandas, sklearn.externals.joblib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow student who is also interested in learning knitting and wants to start a knitting club at school", "synthesized text": "\"{\\n\\\"name\\\": \\\"Knitting Pattern Generator Interface\\\",\\n\\\"description\\\": \\\"Generates a knitting pattern based on the type of item and desired difficulty level.\\\",\\n\\\"function_name\\\": \\\"generate_knitting_pattern\\\",\\n\\\"input_args\\\": [\\\"item_type\\\", \\\"difficulty_level\\\"],\\n\\\"return\\\": \\\"A custom knitting pattern.\\\",\\n\\\"depend\\\": [\\\"Web APIs\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A powerful sports agent known for his unethical practices and resistance to accountability", "synthesized text": "\"{\\n\\\"name\\\": \\\"Suspicious Activity Detection Interface\\\",\\n\\\"description\\\": \\\"An interface for detecting suspicious activities based on a user's historical transaction data. It inputs a CSV file and outputs any suspicious activities.\\\",\\n\\\"function_name\\\": \\\"detect_suspicious_activities\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"string representing the path to the CSV file\\\"},\\n\\\"return\\\": \\\"DataFrame containing the suspicious activities\\\",\\n\\\"depend\\\": \\\"Python's pandas and Scikit-learn libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "An enthusiastic fan of Rajneesh Karnatak, who idolizes him for his achievements in the banking sector of India", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Market Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the trend of a stock based on a synthetic news headline for the stock symbol. The prediction 'Bullish' implies that the stock price might go up, 'Bearish' implies that the stock price might go down, and 'Neutral' implies no significant change in the stock price.\\\",\\n\\\"function_name\\\": \\\"predict_stock_trend\\\",\\n\\\"input_args\\\": {\\n    \\\"stock_symbol\\\": \\\"The symbol of the stock to predict the trend for. E.g., 'AAPL' for Apple Inc.\\\"\\n},\\n\\\"return\\\": \\\"The predicted trend of the stock - 'Bullish', 'Bearish', or 'Neutral'.\\\",\\n\\\"depend\\\": \\\"Uses huggingface transformers (AutoTokenizer, AutoModelForSequenceClassification), torch, and a large language model (LLM)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An older brother who served in the military and offers practical advice for preparation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Physical Fitness Training Interface\\\",\\n\\\"description\\\": \\\"This interface generates a fitness training regimen based on the user's age and gender, referring to the official U.S. Army Physical Fitness Training Standards.\\\",\\n\\\"function_name\\\": \\\"get_fitness_regimen\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"gender\\\"],\\n\\\"return\\\": \\\"A dictionary with the number of push-ups, sit-ups, and the time for a 2-mile run the user should aim for.\\\",\\n\\\"depend\\\": \\\"U.S. Army Physical Fitness Training Standards\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior lecturer in Development Studies who is critical of inequity and interested in technology's role in addressing global challenges.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Global Development Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the World Bank API to fetch relevant data about global development indicators.\\\",\\n\\\"function_name\\\": \\\"get_development_data\\\",\\n\\\"input_args\\\": {\\n    \\\"country\\\": \\\"ISO2 country code (e.g., 'US' for United States)\\\",\\n    \\\"indicator\\\": \\\"Indicator ID according to the World Bank's database (e.g., 'SP.POP.TOTL' for total population)\\\"\\n},\\n\\\"return\\\": \\\"A dictionary containing the year and the corresponding value of the indicator for each available year.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, pandas; Web APIs: World Bank API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a single mother of three, always on a budget, and looking for affordable beauty products that can deliver great results.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Affordable Beauty Product Finder Interface\\\",\\n\\\"description\\\": \\\"An interface to find affordable beauty products within a certain price range using the Amazon Product Advertising API.\\\",\\n\\\"function_name\\\": \\\"get_affordable_beauty_products\\\",\\n\\\"input_args\\\": {\\n    \\\"max_price\\\": \\\"The maximum price (in cents) you are willing to pay for a beauty product.\\\"\\n},\\n\\\"return\\\": \\\"A list of beauty products within the given price range, each represented as a dictionary with keys for title, price, image, and detail_page_url.\\\",\\n\\\"depend\\\": \\\"Python library: bottlenose, xml.etree.ElementTree; Web API: Amazon Product Advertising API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Hindu family that appreciates the efforts of the Muslim individual in fostering harmony and unity", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Interfaith Harmony Message Generator Interface\\\",\\n  \\\"description\\\": \\\"This interface generates a heartwarming message dedicated to a Muslim individual from a Hindu family, appreciating their efforts in fostering harmony and unity.\\\",\\n  \\\"function_name\\\": \\\"generate_interfaith_harmony_message\\\",\\n  \\\"input_args\\\": [\\\"muslim_individual_name\\\"],\\n  \\\"return\\\": \\\"A personalized message expressing appreciation.\\\",\\n  \\\"depend\\\": \\\"large language model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A stay-home mom turned family caregiver for my elderly and disabled father.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medication Schedule Reminder Interface\\\",\\n\\\"description\\\": \\\"This interface allows a user to set up a reminder for administering medication. The user needs to input the medication name and the time of day to administer the medication, and the system will print a reminder message at the specified time each day.\\\",\\n\\\"function_name\\\": \\\"set_medication_reminder\\\",\\n\\\"input_args\\\": {\\n    \\\"medication_name\\\": \\\"Name of the medication\\\",\\n    \\\"reminder_time\\\": \\\"Time to administer the medication in 24-hour format (example: '13:00' for 1 PM)\\\"\\n},\\n\\\"return\\\": \\\"This function does not return anything. It keeps running and prints a reminder message at the specified time daily.\\\",\\n\\\"depend\\\": \\\"Python schedule library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A legendary flamenco guitarist who has inspired generations of musicians with their virtuosity", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chord Progression Generator Interface\\\",\\n\\\"description\\\": \\\"This interface takes the key of a song, the mode (major or minor), and the number of chords desired, and generates a chord progression.\\\",\\n\\\"function_name\\\": \\\"generate_chord_progression\\\",\\n\\\"input_args\\\": {\\\"key\\\": \\\"string\\\", \\\"mode\\\": \\\"string\\\", \\\"num_chords\\\": \\\"int\\\"},\\n\\\"return\\\": \\\"list of string\\\",\\n\\\"depend\\\": \\\"music21 library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a public safety officer for the Moldova Border Police", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-time Face Recognition Interface\\\",\\n\\\"description\\\": \\\"This high-level interface takes an image file and a database of known faces as inputs, then returns the names of recognized people in the image file using face recognition technology. It is useful for public safety officers to identify people at points of interest like border crossings.\\\",\\n\\\"function_name\\\": \\\"identify_faces_in_image\\\",\\n\\\"input_args\\\": [\\\"image_file\\\", \\\"known_faces_dir\\\"],\\n\\\"return\\\": \\\"names_of_people_in_image\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"face_recognition\\\", \\\"cv2\\\", \\\"numpy\\\", \\\"os\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A brewery owner seeking guidance to reduce water waste and promote sustainable business practices", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Water Usage Reduction Interface\\\",\\n  \\\"description\\\": \\\"Uses the US EPA's WaterSense Water Budget Tool API to calculate the amount of water needed based on location and area of the brewery. Provides recommendations to reduce water usage.\\\",\\n  \\\"function_name\\\": \\\"reduce_water_usage\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"The location of the brewery\\\",\\n    \\\"area\\\": \\\"The area of the brewery in square meters\\\"\\n  },\\n  \\\"return\\\": \\\"A list of conservation tips to reduce water usage.\\\",\\n  \\\"depend\\\": \\\"US EPA's WaterSense Water Budget Tool API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A statistician analyzing data on income distribution and inequality in various African countries", "synthesized text": "\"{\\n\\\"name\\\": \\\"Income Inequality Analysis Interface\\\",\\n\\\"description\\\": \\\"Fetches the income distribution data for a specified African country from the World Bank API, plots the income share held by the lowest 20% over the years, and displays the plot.\\\",\\n\\\"function_name\\\": \\\"plot_income_distribution\\\",\\n\\\"input_args\\\": \\\"country_code - The ISO 3-letter code of the country.\\\",\\n\\\"return\\\": \\\"A plot showing the income share held by the lowest 20% over the years in the specified country.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, pandas, matplotlib; Web APIs: World Bank API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a pirate captain who has a sentimental soft spot for giving children educational opportunities.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Educational Quiz Generator Interface\\\",\\n\\\"description\\\": \\\"Generates a quiz with a specified number of questions for children, leveraging the Open Trivia Database API.\\\",\\n\\\"function_name\\\": \\\"generate_educational_quiz\\\",\\n\\\"input_args\\\": {\\n\\\"number_of_questions\\\": \\\"The number of questions to be included in the quiz. Must be an integer.\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains a trivia question, the correct answer, and a list of incorrect answers.\\\",\\n\\\"depend\\\": \\\"Open Trivia Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A ruthless and power-hungry alien warlord, constantly sabotaging diplomatic efforts and seeking domination over other civilizations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Planet Classification Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to input the name or ID of an exoplanet and returns the classification of the planet, its radius, mass, and distance from its star.\\\",\\n\\\"function_name\\\": \\\"get_planet_classification\\\",\\n\\\"input_args\\\": \\\"planet_id\\\",\\n\\\"return\\\": \\\"Dictionary with keys 'classification', 'radius', 'mass', 'distance_from_star'\\\",\\n\\\"depend\\\": \\\"NASA API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A newly enrolled Master's student in the School of Pharmacy at Newcastle University", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Drug Interaction Checker Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the RxNorm API to check for interactions between two drugs. It takes as input the names of two drugs and returns information about any known interactions between them.\\\",\\n  \\\"function_name\\\": \\\"check_drug_interaction\\\",\\n  \\\"input_args\\\": {\\n    \\\"drug1\\\": \\\"Name of the first drug\\\",\\n    \\\"drug2\\\": \\\"Name of the second drug\\\"\\n  },\\n  \\\"return\\\": \\\"Information about any known interactions between the two drugs\\\",\\n  \\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"requests\\\"],\\n    \\\"Web APIs\\\": [\\\"RxNorm API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A renowned perfumer known for creating unique and captivating scents that evoke specific emotions and memories", "synthesized text": "\"{\\n\\\"name\\\": \\\"Scent Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface recommends a perfume based on the user's preferred scent notes and the emotion they want to evoke. It uses a K-nearest neighbors model trained on a dataset of perfumes and their associated notes and emotions.\\\",\\n\\\"function_name\\\": \\\"recommend_scent\\\",\\n\\\"input_args\\\": [\\\"notes\\\", \\\"desired_emotion\\\"],\\n\\\"return\\\": \\\"A recommended perfume's name\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"sklearn\\\", \\\"pandas\\\"], \\\"machine learning models\\\": [\\\"K-nearest neighbors model\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A hotel owner who has been having trouble managing bookings manually.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Booking Management Interface\\\",\\n\\\"description\\\": \\\"An interface to manage hotel bookings. It allows the hotel owner to add, view, and delete bookings from a SQLite database.\\\",\\n\\\"function_name\\\": [\\\"initialize_db\\\", \\\"add_booking\\\", \\\"view_bookings\\\", \\\"delete_booking\\\"],\\n\\\"input_args\\\": [\\\"guest_name\\\", \\\"room_number\\\", \\\"check_in_date\\\", \\\"check_out_date\\\", \\\"id\\\"],\\n\\\"return\\\": \\\"For add_booking and delete_booking, there is no return. For view_bookings, it returns a list of tuples, each containing the details of a booking (id, guest_name, room_number, check_in_date, check_out_date).\\\",\\n\\\"depend\\\": \\\"sqlite3\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Vietnamese local government official concerned with urban development", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Building Permit Application Status Interface\\\",\\n  \\\"description\\\": \\\"An interface to check the status of a building permit application using the local government's public APIs. The user inputs their building permit application number, and the interface returns the status of their application.\\\",\\n  \\\"function_name\\\": \\\"get_building_permit_status\\\",\\n  \\\"input_args\\\": {\\n    \\\"application_number\\\": \\\"The building permit application number.\\\"\\n  },\\n  \\\"return\\\": \\\"The status of the building permit application, or an 'Application not found.' message if the specified application number does not exist.\\\",\\n  \\\"depend\\\": \\\"requests library, local government's public APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Ruby developer who not very familiar with Vkontakte (VK) API.", "synthesized text": "\"{\\n\\\"name\\\": \\\"VK Post Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of creating a post on a user's VK wall. Users only need to provide their access token, the message to be posted, and (optionally) any attachments.\\\",\\n\\\"function_name\\\": \\\"post_to_vk_wall\\\",\\n\\\"input_args\\\": [\\\"access_token\\\", \\\"message\\\", \\\"attachments\\\"],\\n\\\"return\\\": \\\"A message indicating whether the post was created successfully or not.\\\",\\n\\\"depend\\\": \\\"VK API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A passionate fan of Scott Cooley who has been following his music since the 90s and owns all his albums.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Music Lyrics Search Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to search the lyrics of a song by providing the artist and song title. It leverages the Genius API to fetch the lyrics.\\\",\\n  \\\"function_name\\\": \\\"get_song_lyrics\\\",\\n  \\\"input_args\\\": {\\n    \\\"artist\\\": \\\"Name of the artist\\\",\\n    \\\"song_title\\\": \\\"Title of the song\\\"\\n  },\\n  \\\"return\\\": \\\"Lyrics of the song or 'Song not found' if the song does not exist in the Genius database.\\\",\\n  \\\"depend\\\": \\\"Python's requests library for HTTP requests, Genius API for fetching song lyrics.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A high school student who has experienced both the positive and negative effects of academic competition", "synthesized text": "\"{\\n\\\"name\\\": \\\"Academic Word Frequency Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the NLTK library in Python to assess the frequency of academic words in a student's essay.\\\",\\n\\\"function_name\\\": \\\"academic_word_frequency\\\",\\n\\\"input_args\\\": {\\\"essay_text\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"word\\\": \\\"frequency\\\"},\\n\\\"depend\\\": \\\"Natural Language Toolkit (NLTK)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A ground operations manager ensuring smooth coordination between aircraft and support vehicles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Aircraft and Vehicle Coordination Interface\\\",\\n\\\"description\\\": \\\"This interface provides the real-time distance between an aircraft and a ground support vehicle to ensure their smooth coordination.\\\",\\n\\\"function_name\\\": \\\"get_distance\\\",\\n\\\"input_args\\\": {\\n\\\"aircraft_id\\\": \\\"The ID of the aircraft\\\",\\n\\\"vehicle_id\\\": \\\"The ID of the ground support vehicle\\\"\\n},\\n\\\"return\\\": \\\"The real-time distance in kilometers between the aircraft and the vehicle.\\\",\\n\\\"depend\\\": \\\"Google Maps API, geopy python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An old friend and university classmate of Däulet Muqaev", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates a document from one language to another using Google's Cloud Translation API.\\\",\\n\\\"function_name\\\": \\\"translate_document\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_file\\\": \\\"The path to the text file to be translated.\\\",\\n    \\\"target_language\\\": \\\"The target language to translate the document into.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"original_text\\\": \\\"The original text from the file.\\\",\\n    \\\"translated_text\\\": \\\"The translated text in the target language.\\\"\\n},\\n\\\"depend\\\": \\\"Google's Cloud Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A renowned novelist known for their command of the English language and rich storytelling", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Text Complexity Rating Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the Python library textstat to calculate the complexity and readability of a given text. It returns a dictionary with the Flesch Reading Ease, SMOG Index, Flesch-Kincaid Grade, and Coleman-Liau Index scores.\\\",\\n  \\\"function_name\\\": \\\"assess_text_complexity\\\",\\n  \\\"input_args\\\": \\\"input_text\\\",\\n  \\\"return\\\": \\\"Dictionary with Flesch Reading Ease, SMOG Index, Flesch-Kincaid Grade, and Coleman-Liau Index scores\\\",\\n  \\\"depend\\\": \\\"Python library: textstat\\\"\\n}\"", "description": "tool development"}
{"input persona": "a rural development scholar who is curious about various development schemes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Development Scheme Information Interface\\\",\\n\\\"description\\\": \\\"This interface provides information about a development scheme when queried with the scheme's name. It is aimed at scholars and researchers who wish to study various development schemes.\\\",\\n\\\"function_name\\\": \\\"get_scheme_details\\\",\\n\\\"input_args\\\": \\\"scheme_name - The name of the development scheme.\\\",\\n\\\"return\\\": \\\"A dictionary containing information about the development scheme.\\\",\\n\\\"depend\\\": \\\"requests library, Government Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A digital artist who creates custom wallpapers and themes for Android devices", "synthesized text": "\"{\\n\\\"name\\\": \\\"Theme Color Extraction Interface\\\",\\n\\\"description\\\": \\\"An interface for extracting the dominant colors from an image. Useful for digital artists creating wallpapers and themes.\\\",\\n\\\"function_name\\\": \\\"get_dominant_colors\\\",\\n\\\"input_args\\\": [\\\"image_path\\\", \\\"num_colors\\\"],\\n\\\"return\\\": \\\"List of RGB values of the dominant colors in the image.\\\",\\n\\\"depend\\\": \\\"Python's sklearn library for KMeans clustering algorithm, numpy for array manipulation, PIL (Python Imaging Library) for image processing\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small business owner in Grand Forks, North Dakota, specializing in supplying construction materials.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Price Comparison Interface\\\",\\n\\\"description\\\": \\\"An interface that compares prices of construction materials from different suppliers. User only needs to input the type of material, and the interface will return the prices from different suppliers.\\\",\\n\\\"function_name\\\": \\\"get_material_prices\\\",\\n\\\"input_args\\\": \\\"material_type - the type of construction material (e.g., 'concrete', 'wood')\\\",\\n\\\"return\\\": \\\"A dictionary where the keys are the supplier names and the values are the prices of the material from each supplier.\\\",\\n\\\"depend\\\": \\\"Uses the APIs of different construction material suppliers.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A donkey-loving farm owner in a rural area", "synthesized text": "\"{\\n\\\"name\\\": \\\"Donkey Sound Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to differentiate between the sounds made by a donkey (like braying) and other farm sounds.\\\",\\n\\\"function_name\\\": \\\"analyse_donkey_sound\\\",\\n\\\"input_args\\\": \\\"path_to_wav - The path to the .wav file to be analyzed.\\\",\\n\\\"return\\\": \\\"A string indicating whether the sound is made by a donkey or not.\\\",\\n\\\"depend\\\": \\\"Python's TensorFlow, TensorFlow Hub, NumPy, and SciPy libraries, as well as a pre-trained sound classification model from TensorFlow Hub.\\\"\\n}\"", "description": "tool development"}
{"input persona": "Another property developer with a similar reputation for innovative design and market competitiveness", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real Estate Market Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to get property details and estimate market value using Zillow's API. Users input an address or location coordinates and get back details such as estimated property value, property size, number of bedrooms and bathrooms, etc.\\\",\\n\\\"function_name\\\": \\\"get_property_details\\\",\\n\\\"input_args\\\": \\\"address\\\",\\n\\\"return\\\": \\\"A dictionary with property details\\\",\\n\\\"depend\\\": \\\"Zillow's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An astrophysicist who worked on satellite design.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Orbit Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the next pass of a satellite over a specific location.\\\",\\n\\\"function_name\\\": \\\"next_satellite_pass\\\",\\n\\\"input_args\\\": [\\\"tle1\\\", \\\"tle2\\\", \\\"latitude\\\", \\\"longitude\\\", \\\"elevation\\\"],\\n\\\"return\\\": \\\"Prints the rise, culmination, and set times of the satellite.\\\",\\n\\\"depend\\\": [\\\"skyfield API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A player on the Boston Bruins who appreciates the unique and creative designs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hockey Jersey Design Interface\\\",\\n\\\"description\\\": \\\"Generates unique and creative designs for hockey jerseys using a pre-trained Generative Adversarial Network (GAN) from TensorFlow Hub.\\\",\\n\\\"function_name\\\": \\\"generate_jersey_design\\\",\\n\\\"input_args\\\": [\\\"colors\\\"],\\n\\\"return\\\": \\\"A unique design for a hockey jersey as a numpy array\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A park ranger familiar with the Morrison Trail", "synthesized text": "\"{\\n\\\"name\\\": \\\"Trail Information Interface\\\",\\n\\\"description\\\": \\\"This interface provides detailed information about hiking trails, including length, elevation, difficulty, and location. Users need to input the name of the trail, and the interface will return the detailed information of the trail.\\\",\\n\\\"function_name\\\": \\\"get_trail_info\\\",\\n\\\"input_args\\\": \\n    {\\n    \\\"trail_name\\\": \\\"Type: str. The name of the hiking trail.\\\"\\n    },\\n\\\"return\\\": \\n    {\\n    \\\"Trail Information\\\": \\\"Type: dict. A dictionary containing the name, length, elevation, difficulty, and location of the trail.\\\"\\n    },\\n\\\"depend\\\": \\\"This function depends on the Hiking Project API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Mageto 2 developer who is skilled in debugging", "synthesized text": "\"{\\n\\\"name\\\": \\\"Magento 2 Log Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface for Magento 2 developers to quickly analyze their log files for errors and warnings.\\\",\\n\\\"function_name\\\": \\\"analyze_magento_log\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"The path to the log file to be analyzed.\\\"},\\n\\\"return\\\": {\\\"CRITICAL\\\": \\\"The count of critical errors in the log file.\\\", \\\"ERROR\\\": \\\"The count of errors in the log file.\\\", \\\"WARNING\\\": \\\"The count of warnings in the log file.\\\"},\\n\\\"depend\\\": {\\\"Python\\\": [\\\"logging\\\", \\\"re\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An herbalist sharing knowledge and experiences about using mushrooms in holistic medicine", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mushroom Species Information Interface\\\",\\n\\\"description\\\": \\\"This interface takes the name of a mushroom species as input and returns information such as scientific name, common names, habitats, and medicinal uses.\\\",\\n\\\"function_name\\\": \\\"get_mushroom_info\\\",\\n\\\"input_args\\\": {\\n    \\\"name\\\": \\\"The name of the mushroom species\\\"\\n},\\n\\\"return\\\": {\\n    \\\"scientific_name\\\": \\\"The scientific name of the mushroom\\\",\\n    \\\"common_names\\\": \\\"The common names of the mushroom\\\",\\n    \\\"habitats\\\": \\\"The typical habitats of the mushroom\\\",\\n    \\\"medicinal_uses\\\": \\\"The medicinal uses of the mushroom (if available)\\\"\\n},\\n\\\"depend\\\": \\\"Python Requests library, Trefle API or similar plant database\\\"\\n}\"", "description": "tool development"}
{"input persona": "German national, heavily invested in Deutsche Post stocks", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Price Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface to predict the future closing price of Deutsche Post stocks for a given number of days using a machine learning model.\\\",\\n\\\"function_name\\\": \\\"stock_price_prediction\\\",\\n\\\"input_args\\\": \\\"days_into_future\\\",\\n\\\"return\\\": \\\"Predicted closing price for Deutsche Post stocks for the given number of days.\\\",\\n\\\"depend\\\": {\\\"Python libraries\\\": [\\\"pandas_datareader\\\", \\\"numpy\\\", \\\"tensorflow\\\", \\\"sklearn.preprocessing\\\"], \\\"Web APIs\\\": [\\\"Yahoo Finance API\\\"], \\\"Machine learning models\\\": [\\\"TensorFlow Sequential Model\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "an old friend and former teammate of Vaishnavi from the Government Sports Academy in Pune", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Stats Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Sportradar API to fetch the statistics of a specified player.\\\",\\n\\\"function_name\\\": \\\"get_player_stats\\\",\\n\\\"input_args\\\": \\\"player_name: The name of the player whose stats are to be fetched.\\\",\\n\\\"return\\\": \\\"A dictionary containing the statistics of the specified player.\\\",\\n\\\"depend\\\": \\\"requests library, Sportradar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer familiar with TypeScript and Azure Resource Management (ARM) templates", "synthesized text": "\"{\\n\\\"name\\\": \\\"ARM Template Validator\\\",\\n\\\"description\\\": \\\"This interface validates Azure Resource Management (ARM) templates using the Azure SDK for Python. It checks if the templates are correctly structured and all resources are defined properly.\\\",\\n\\\"function_name\\\": \\\"validate_arm_template\\\",\\n\\\"input_args\\\": [\\\"template_file_path\\\"],\\n\\\"return\\\": \\\"A boolean value indicating whether the ARM template is valid or not.\\\",\\n\\\"depend\\\": [\\\"Azure SDK for Python\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an engineer who works in a power generation plant", "synthesized text": "\"{\\n\\\"name\\\": \\\"Energy Consumption Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the energy consumption of a power generation plant based on environmental features\\\",\\n\\\"function_name\\\": \\\"predict_energy_consumption\\\",\\n\\\"input_args\\\": [\\\"model\\\", \\\"temperature\\\", \\\"humidity\\\", \\\"pressure\\\"],\\n\\\"return\\\": \\\"Predicted energy consumption (float)\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"numpy\\\", \\\"tensorflow\\\", \\\"keras\\\"], \\\"machine learning model\\\": \\\"energy_consumption_model.h5\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A Bolivian teenager who has been inspired by Brisa De Angulo's journey", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sexual Violence Support Interface\\\",\\n\\\"description\\\": \\\"An interface to provide immediate assistance and resources for sexual violence victims. It uses APIs from various help and support organizations.\\\",\\n\\\"function_name\\\": \\\"get_support_services\\\",\\n\\\"input_args\\\": \\\"location - The current location or country of the user.\\\",\\n\\\"return\\\": \\\"A list of nearby support services and organizations dedicated to helping sexual violence victims, including their names and contact details.\\\",\\n\\\"depend\\\": \\\"Web API: Global Resources API\\\"\\n}\"", "description": "tool development"}
{"input persona": "一个不太了解轻小说文化，但对日本社会现象有所好奇的社会学研究者。", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u8f7b\\u5c0f\\u8bf4\\u98ce\\u683c\\u5173\\u952e\\u8bcd\\u63d0\\u53d6\\\",\\n\\\"description\\\": \\\"\\u4ece\\u65e5\\u672c\\u8f7b\\u5c0f\\u8bf4\\u6587\\u672c\\u4e2d\\u63d0\\u53d6\\u5173\\u952e\\u8bcd\\uff0c\\u5e2e\\u52a9\\u7528\\u6237\\u4e86\\u89e3\\u8f7b\\u5c0f\\u8bf4\\u7684\\u4e3b\\u9898\\u8d8b\\u52bf\\u548c\\u98ce\\u683c\\\",\\n\\\"function_name\\\": \\\"get_light_novel_keywords\\\",\\n\\\"input_args\\\": \\\"\\u65e0\\\",\\n\\\"return\\\": \\\"\\u8fd4\\u56de\\u4e00\\u4e2a\\u5173\\u952e\\u8bcd\\u5217\\u8868\\uff0c\\u5217\\u8868\\u4e2d\\u7684\\u6bcf\\u4e00\\u4e2a\\u5143\\u7d20\\u662f\\u4e00\\u4e2a\\u5143\\u7ec4\\uff0c\\u7b2c\\u4e00\\u4e2a\\u5143\\u7d20\\u662f\\u5173\\u952e\\u8bcd\\uff0c\\u7b2c\\u4e8c\\u4e2a\\u5143\\u7d20\\u662f\\u8be5\\u5173\\u952e\\u8bcd\\u7684\\u5f97\\u5206\\\",\\n\\\"depend\\\": \\\"Python\\u5e93: requests, sklearn, jieba; Web API: \\u65e5\\u672c\\u8f7b\\u5c0f\\u8bf4\\u6570\\u636e\\u5e93API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An old schoolmate who followed, but did not have much contact with, Rougier-Lagane", "synthesized text": "\"{\\n\\\"name\\\": \\\"Twitter Public Posts Collection Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches the 200 most recent public posts from a specific Twitter account. Please note that this function will not work if the account is private or does not exist.\\\",\\n\\\"function_name\\\": \\\"get_public_tweets\\\",\\n\\\"input_args\\\": \\\"username - The username of the Twitter account\\\",\\n\\\"return\\\": \\\"A list of the 200 most recent public posts from the specified Twitter account\\\",\\n\\\"depend\\\": \\\"Python library - tweepy\\\"\\n}\"", "description": "tool development"}
{"input persona": "an energetic ghost tour operator in Ireland", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Ghost Sightings Database Interface\\\",\\n  \\\"description\\\": \\\"An interface to query a database of ghost sightings based on location or type of ghost. Data includes date, location, type of ghost, and description of the sighting.\\\",\\n  \\\"function_name\\\": \\\"get_ghost_sightings\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"String (optional)\\\",\\n    \\\"type_of_ghost\\\": \\\"String (optional)\\\"\\n  },\\n  \\\"return\\\": \\\"List of dictionaries with each dictionary representing a ghost sighting\\\",\\n  \\\"depend\\\": \\\"Web API (Ghosts and Haunts API)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A photographer who needs a secure cloud storage solution to store and share high-resolution images", "synthesized text": "\"{\\n\\\"name\\\": \\\"Secure Cloud Storage Interface\\\",\\n\\\"description\\\": \\\"An interface for the Google Cloud Storage API that allows users to upload, download, and share images by providing the path to their image file.\\\",\\n\\\"function_name\\\": [\\\"initialize_storage\\\", \\\"upload_image\\\", \\\"download_image\\\"],\\n\\\"input_args\\\": {\\\"initialize_storage\\\": [\\\"bucket_name\\\"], \\\"upload_image\\\": [\\\"bucket_name\\\", \\\"source_file_name\\\", \\\"destination_blob_name\\\"], \\\"download_image\\\": [\\\"bucket_name\\\", \\\"source_blob_name\\\", \\\"destination_file_name\\\"]},\\n\\\"return\\\": {\\\"initialize_storage\\\": \\\"bucket\\\", \\\"upload_image\\\": \\\"public_url\\\", \\\"download_image\\\": \\\"destination_file_name\\\"},\\n\\\"depend\\\": [\\\"google-cloud-storage\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A huge fan of Colin Farrell from his hometown Dublin, Ireland.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Celebrity Facts Interface\\\",\\n  \\\"description\\\": \\\"An interface that pulls information about a specific actor from IMDb. Returns a dictionary of information about the actor.\\\",\\n  \\\"function_name\\\": \\\"get_actor_info\\\",\\n  \\\"input_args\\\": [\\\"actor_name\\\"],\\n  \\\"return\\\": \\\"Dictionary of actor's information\\\",\\n  \\\"depend\\\": \\\"IMDbPy Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A healthcare organization seeking to implement fair and unbiased algorithms for patient care", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Healthcare Fairness Check Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses the Aequitas Bias toolkit to assess the fairness and bias of healthcare algorithms across different demographic groups.\\\",\\n  \\\"function_name\\\": \\\"generate_fairness_report\\\",\\n  \\\"input_args\\\": {\\n    \\\"df\\\": \\\"A pandas DataFrame containing actual and predicted values, along with protected attributes such as race, gender, and age.\\\"\\n  },\\n  \\\"return\\\": \\\"A fairness report in the form of a pandas DataFrame, with metrics for each attribute and demographic group.\\\",\\n  \\\"depend\\\": \\\"Python library: Aequitas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A reporter intrigued by the unique bookstore events, wanting to write an article about the owner's puzzle-solving competitions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bookstore Event Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google Books API and Scikit-learn's machine learning models to analyze patterns in bookstore events. The input is a list of ISBNs for the books used in the events, and the output is an analysis of the genres and authors that are most prevalent.\\\",\\n\\\"function_name\\\": \\\"analyze_bookstore_events\\\",\\n\\\"input_args\\\": [\\\"isbn_list\\\"],\\n\\\"return\\\": \\\"Dictionary containing 'Top Authors' and 'Top Genres'\\\",\\n\\\"depend\\\": \\\"Google Books API, requests, pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A health and safety manager responsible for implementing protocols to prevent chemical-related illnesses", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chemical Hazard Identification Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to retrieve hazard information for a chemical compound by inputting the compound's name.\\\",\\n\\\"function_name\\\": \\\"get_chemical_hazard_info\\\",\\n\\\"input_args\\\": {\\\"chemical_name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"hazard_information\\\": \\\"string\\\"},\\n\\\"depend\\\": [\\\"ChemSpiPy library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A former military medic who encourages determination and discipline in their child's studies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Homework Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to track their child's homework and study progress by inputting the due date, subject, task, time spent, and whether the task is complete or not.\\\",\\n\\\"function_name\\\": [\\\"init_homework_tracker\\\", \\\"update_homework_tracker\\\"],\\n\\\"input_args\\\": [\\\"due_date\\\", \\\"subject\\\", \\\"task\\\", \\\"time_spent\\\", \\\"completed\\\"],\\n\\\"return\\\": \\\"Pandas DataFrame that shows the updated homework and study log.\\\",\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An automotive reporter seeking clear, timely, and accurate information about new models and company announcements", "synthesized text": "\"{\\n\\\"name\\\": \\\"Car News Aggregation Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches the latest news for a specified car company from multiple trusted car news websites.\\\",\\n\\\"function_name\\\": \\\"get_latest_car_news\\\",\\n\\\"input_args\\\": \\\"car_company - a string representing the name of the car company\\\",\\n\\\"return\\\": \\\"A list of links to the latest news articles about the specified car company\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"beautifulsoup4\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A pregnant woman seeking guidance on maintaining a plant-based diet during pregnancy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plant-Based Diet Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the Spoonacular API to return healthy, plant-based recipe recommendations suitable for pregnancy, based on the user's input of their current cravings or desired ingredients.\\\",\\n\\\"function_name\\\": \\\"get_plant_based_recipes\\\",\\n\\\"input_args\\\": \\\"ingredient - a string representing the user's current craving or desired ingredient\\\",\\n\\\"return\\\": \\\"A list of titles of healthy, plant-based recipe recommendations that are suitable for pregnancy.\\\",\\n\\\"depend\\\": \\\"Python requests library, Spoonacular API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cosmetic surgeon who specializes in skin rejuvenation procedures to reverse sun damage", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Skin Health Checker Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a pre-trained model from TensorFlow Hub to analyze an image of skin and return a heatmap highlighting possible areas of concern. Originally trained for skin cancer detection, this interface can be used to assess overall skin health and possible sun damage.\\\",\\n  \\\"function_name\\\": \\\"analyze_skin\\\",\\n  \\\"input_args\\\": \\\"path_to_img - a string representing the file path to an image of the skin area to be analyzed\\\",\\n  \\\"return\\\": \\\"a numpy array representing a heatmap of the analyzed skin image, with possible areas of concern highlighted\\\",\\n  \\\"depend\\\": \\\"tensorflow, tensorflow_hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "a loyal fan of the Indiana University Hoosiers basketball team", "synthesized text": "\"{\\n\\\"name\\\": \\\"Basketball Game Schedule Interface\\\",\\n\\\"description\\\": \\\"This interface returns the upcoming game schedules for a given basketball team.\\\",\\n\\\"function_name\\\": \\\"get_upcoming_games\\\",\\n\\\"input_args\\\": [\\\"team_name\\\"],\\n\\\"return\\\": \\\"List of dictionaries representing upcoming games. Each dictionary includes 'opponent', 'date', and 'location'.\\\",\\n\\\"depend\\\": \\\"requests, datetime, SportsOpenData API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A research institute director who values the professionalism and precision of reports created using LaTeX", "synthesized text": "\"{\\n\\\"name\\\": \\\"LaTeX Document Compilation Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a path to a LaTeX document as input and outputs the compiled PDF document.\\\",\\n\\\"function_name\\\": \\\"compile_latex_document\\\",\\n\\\"input_args\\\": \\\"latex_document_path - A string representing the path to the LaTeX document\\\",\\n\\\"return\\\": \\\"The console output of the `pdflatex` command or raises a `subprocess.CalledProcessError` if there are any errors during the compilation.\\\",\\n\\\"depend\\\": \\\"Python's built-in `subprocess` and `os` modules. A LaTeX distribution like TeX Live or MiKTeX must be installed.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A researcher studying historical ciphers and their impact on communication throughout history", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cipher Decoding Interface\\\",\\n\\\"description\\\": \\\"This interface decodes messages that have been encoded with a Caesar cipher. Users need only to input the encoded message and the shift value used in the cipher, and the interface will return the decoded message.\\\",\\n\\\"function_name\\\": \\\"caesar_cipher_decoding\\\",\\n\\\"input_args\\\": [\\\"encoded_message\\\", \\\"shift\\\"],\\n\\\"return\\\": \\\"Decoded message as a string\\\",\\n\\\"depend\\\": \\\"Python's sympy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An app developer who develops educational tools for complex medical topics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Topic Summary Interface\\\",\\n\\\"description\\\": \\\"This interface takes a medical topic as input and returns a summary of the most recent and relevant articles on that topic using the NCBI Entrez Programming Utilities (E-utilities) API.\\\",\\n\\\"function_name\\\": \\\"get_medical_topic_summary\\\",\\n\\\"input_args\\\": [\\\"topic\\\", \\\"email\\\", \\\"num_results\\\"],\\n\\\"return\\\": \\\"A string containing the summaries of the most relevant articles on the input topic from the PubMed database.\\\",\\n\\\"depend\\\": \\\"BioPython Library, NCBI Entrez Programming Utilities (E-utilities) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local matchmaker who utilizes the mixer events for setting up potential couples", "synthesized text": "\"{\\n\\\"name\\\": \\\"Partner Matching Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the compatibility score of two individuals based on their profiles. The users input two profiles, and the interface returns a compatibility score.\\\",\\n\\\"function_name\\\": \\\"predict_compatibility\\\",\\n\\\"input_args\\\": [\\\"profile1\\\", \\\"profile2\\\", \\\"model\\\"],\\n\\\"return\\\": \\\"compatibility_score\\\",\\n\\\"depend\\\": [\\\"sklearn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A conservative politician in Denmark who greatly admires Aksel Møller", "synthesized text": "\"{\\n\\\"name\\\": \\\"Speech Generator Interface\\\",\\n\\\"description\\\": \\\"This function generates a speech on a given topic using a pre-trained language model from Hugging Face's transformer library.\\\",\\n\\\"function_name\\\": \\\"generate_speech\\\",\\n\\\"input_args\\\": {\\\"topic\\\": \\\"The topic of the speech to be generated.\\\", \\\"length\\\": \\\"The desired length of the generated speech.\\\"},\\n\\\"return\\\": \\\"A string representing the generated speech.\\\",\\n\\\"depend\\\": \\\"Hugging Face's GPT2 model and tokenizer\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a lifelong, dedicated supporter of RC Strasbourg.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Live Football Match Score Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the api-football API to get the live score of the ongoing match of a specified team.\\\",\\n\\\"function_name\\\": \\\"get_live_match_score\\\",\\n\\\"input_args\\\": \\\"team\\\",\\n\\\"return\\\": \\\"A dictionary with team names and their respective scores if there is an ongoing match, else a message saying no ongoing match found.\\\",\\n\\\"depend\\\": \\\"RapidAPI's api-football\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nursing student preparing for pediatric nursing exams", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pediatric Drug Dosage Calculator Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the drug dosage for pediatric nursing based on the child's weight, the standard dosage, and the frequency.\\\",\\n\\\"function_name\\\": \\\"calculate_pediatric_dosage\\\",\\n\\\"input_args\\\": [\\\"std_dosage_mg_per_kg\\\", \\\"weight_kg\\\", \\\"frequency_per_day\\\"],\\n\\\"return\\\": \\\"The calculated dosage for the child.\\\",\\n\\\"depend\\\": \\\"No dependencies\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am Kiista P. Isaksen, a novelist with a deeply reflective personality, often finding symbolic meaning in names and titles.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Name Symbolism Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a name as input and returns the symbolic meaning of the name by finding words that are meaningful similar to the name.\\\",\\n\\\"function_name\\\": \\\"get_symbolic_meaning\\\",\\n\\\"input_args\\\": [\\\"name\\\"],\\n\\\"return\\\": \\\"A dictionary where the keys are words that are meaningful similar to the name and the values are the scores indicating the degree of similarity.\\\",\\n\\\"depend\\\": \\\"Datamuse API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Mexican mother living in Tijuana trying to find a safer place for her family", "synthesized text": "\"{\\n\\\"name\\\": \\\"Safe City Finder Interface\\\",\\n\\\"description\\\": \\\"An interface that returns a list of cities sorted by safety in the desired countries. The safety is determined by the Numbeo Crime Index.\\\",\\n\\\"function_name\\\": \\\"get_safest_cities\\\",\\n\\\"input_args\\\": \\\"A list of countries\\\",\\n\\\"return\\\": \\\"A list of tuples, each containing a city name and its safety index, sorted in descending order of safety index\\\",\\n\\\"depend\\\": \\\"Numbeo Crime Index API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A very big fan of Anne McClain and has been following her journey since she joined NASA.", "synthesized text": "\"{\\n\\\"name\\\": \\\"International Space Station (ISS) Current Location Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch the current location of the International Space Station (ISS). No inputs are required from the user. The function returns the latitude and longitude of the ISS.\\\",\\n\\\"function_name\\\": \\\"get_iss_current_location\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"The current location of the ISS in the format 'The ISS is currently at latitude [latitude] and longitude [longitude]'.\\\",\\n\\\"depend\\\": \\\"requests library, Open Notify's ISS Current Location API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Another supply chain expert who works for a different company but shares insights and best practices with the supply chain expert", "synthesized text": "\"{\\n\\\"name\\\": \\\"Product Demand Forecasting Interface\\\",\\n\\\"description\\\": \\\"Predicts product demand using historical sales data\\\",\\n\\\"function_name\\\": \\\"predict_sales\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"DataFrame with the predicted sales for the next 30 days\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired lawyer who has always dreamed of singing on stage and finally decided to pursue it later in life", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vocal Range Detection Interface\\\",\\n\\\"description\\\": \\\"This interface determines the vocal range of a user from an audio file of them singing.\\\",\\n\\\"function_name\\\": \\\"get_vocal_range\\\",\\n\\\"input_args\\\": \\\"audio_file - path to the audio file\\\",\\n\\\"return\\\": \\\"A tuple (min_pitch, max_pitch) in Hz representing the user's vocal range\\\",\\n\\\"depend\\\": \\\"Python's librosa library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A casino manager who enjoys discussing the allure and mechanics behind casino games", "synthesized text": "\"{\\n\\\"name\\\": \\\"Card Probability Calculation Interface\\\",\\n\\\"description\\\": \\\"Calculates the probability of getting a certain poker hand\\\",\\n\\\"function_name\\\": \\\"card_probability\\\",\\n\\\"input_args\\\": {\\\"hand_type\\\": \\\"The type of poker hand to calculate the probability for\\\"},\\n\\\"return\\\": \\\"The probability of getting the specified poker hand\\\",\\n\\\"depend\\\": {\\\"libraries\\\": [\\\"itertools\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A working-class British man who has always aspired, but never had the means, to travel and stand atop a mountain peak.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mountain Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface provides a detailed weather forecast for a specific mountain peak. The user just needs to input the latitude and longitude of the mountain.\\\",\\n\\\"function_name\\\": \\\"get_mountain_weather\\\",\\n\\\"input_args\\\": [\\\"lat\\\", \\\"lon\\\"],\\n\\\"return\\\": \\\"Weather description string\\\",\\n\\\"depend\\\": [\\\"requests\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A product manager relying on the backend engineer to deliver an efficient and reliable system", "synthesized text": "\"{\\n\\\"name\\\": \\\"System Health Check Interface\\\",\\n\\\"description\\\": \\\"An interface to monitor the system's health, including CPU usage, memory usage, disk usage, and network status. No input is required from the user.\\\",\\n\\\"function_name\\\": \\\"get_system_health\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": {\\n    \\\"type\\\": \\\"Dictionary\\\",\\n    \\\"description\\\": \\\"A dictionary containing information about system health, including CPU usage, memory usage, disk usage, bytes sent, and bytes received.\\\",\\n    \\\"example\\\": {\\n        \\\"CPU Usage (%)\\\": 12.9,\\n        \\\"Memory Usage (%)\\\": 78.1,\\n        \\\"Disk Usage (%)\\\": 55.7,\\n        \\\"Bytes Sent\\\": 2345678,\\n        \\\"Bytes Received\\\": 1234567\\n    }\\n},\\n\\\"depend\\\": \\\"Python library: psutil\\\"\\n}\"", "description": "tool development"}
{"input persona": "A successful entrepreneur who dropped out of high school but later achieved great success", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Entrepreneur Document Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses Natural Language Processing (NLP) machine learning models from Hugging Face to extract important entities, topics and summaries from documents.\\\",\\n  \\\"function_name\\\": \\\"analyze_document\\\",\\n  \\\"input_args\\\": \\\"path_to_doc\\\",\\n  \\\"return\\\": \\\"A dictionary with 'summary' and 'entities' keys\\\",\\n  \\\"depend\\\": \\\"Hugging Face NLP models\\\"\\n}\"", "description": "tool development"}
{"input persona": "A person who loves tranquility and has no interest in trains or any noisy means of transportation.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Quiet Place Finder\\\",\\n\\\"description\\\": \\\"Finds parks and libraries, which are typically quiet places, near a given location.\\\",\\n\\\"function_name\\\": \\\"find_quiet_places\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": \\\"A dictionary with two keys: 'Parks' and 'Libraries'. The values for these keys are lists of the names of parks and libraries, respectively, near the given location.\\\",\\n\\\"depend\\\": \\\"Google Places API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data scientist analyzing the effectiveness of international institutions in promoting fair trade", "synthesized text": "\"{\\n\\\"name\\\": \\\"Trade Agreement Analysis Interface\\\",\\n\\\"description\\\": \\\"Analyze the impact of an international institution on the trade balance between two countries.\\\",\\n\\\"function_name\\\": \\\"analyze_trade_agreement\\\",\\n\\\"input_args\\\": [\\\"country1\\\", \\\"country2\\\", \\\"institution\\\"],\\n\\\"return\\\": \\\"A dictionary with the average trade balance between the two countries before and after joining the institution.\\\",\\n\\\"depend\\\": [\\\"World Bank API\\\", \\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A forum moderator providing support and answering questions related to CRM and email marketing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Email Send Verification Interface\\\",\\n\\\"description\\\": \\\"An interface to send verification emails. Users only need to input the recipient's email address and the content of the email, our interface will handle the sending process and return the status of the email - whether it has been successfully sent or not.\\\",\\n\\\"function_name\\\": \\\"send_verification_email\\\",\\n\\\"input_args\\\": {\\n    \\\"api_key\\\": \\\"Your SendGrid API key\\\",\\n    \\\"from_email\\\": \\\"Email address from which the email will be sent\\\",\\n    \\\"to_email\\\": \\\"Recipient's email address\\\",\\n    \\\"subject\\\": \\\"Subject of the email\\\",\\n    \\\"content\\\": \\\"Content of the email\\\"\\n},\\n\\\"return\\\": \\\"The status of the email - whether it has been successfully sent or not.\\\",\\n\\\"depend\\\": \\\"SendGrid API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A physical therapist specializing in pelvic floor exercises for OAB patients", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pelvic Floor Exercise Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the effectiveness of different pelvic floor exercises for Overactive Bladder (OAB) patients based on their age, gender, and severity of OAB symptoms, and recommends a set of exercises.\\\",\\n\\\"function_name\\\": \\\"recommend_exercises\\\",\\n\\\"input_args\\\": \\n  {\\n    \\\"age\\\": \\\"Age of the patient\\\",\\n    \\\"gender\\\": \\\"Gender of the patient\\\",\\n    \\\"severity\\\": \\\"Severity of OAB symptoms\\\"\\n  },\\n\\\"return\\\": \\\"A list of recommended pelvic floor exercises\\\",\\n\\\"depend\\\": \\\"Python's sklearn library. A hypothetical dataset of pelvic floor exercises effectiveness and a hypothetical trained RandomForestRegressor model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A no-nonsense nurse who appreciates the receptionist's efficiency in managing patient flow", "synthesized text": "\"{\\n\\\"name\\\": \\\"Patient Appointment Management Interface\\\",\\n\\\"description\\\": \\\"This interface provides functionalities to manage a patient's appointments. It can add a new appointment, delete an existing appointment, or retrieve all appointments for a specific patient.\\\",\\n\\\"function_name\\\": [\\\"add_appointment\\\", \\\"delete_appointment\\\", \\\"get_patient_appointments\\\"],\\n\\\"input_args\\\": [\\\"path_to_csv\\\", \\\"patient_id\\\", \\\"appointment_date\\\", \\\"appointment_time\\\", \\\"doctor_id\\\"],\\n\\\"return\\\": [\\\"None for add_appointment and delete_appointment, DataFrame of patient appointments for get_patient_appointments\\\"],\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A sympathetic and courageous civilian who actively supports the rebel leader's cause, providing shelter and resources", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Secure Message Encryption Interface\\\",\\n  \\\"description\\\": \\\"An interface to encrypt and decrypt messages for secure communication. It uses Fernet symmetric encryption provided by the Cryptography library. The key used for encryption and decryption can be generated using the generate_key function. The encrypt_message function takes a plain text message and a key to return an encrypted message. The decrypt_message function takes an encrypted message and a key to return the decrypted plain text message.\\\",\\n  \\\"function_name\\\": [\\\"generate_key\\\", \\\"encrypt_message\\\", \\\"decrypt_message\\\"],\\n  \\\"input_args\\\": {\\n    \\\"generate_key\\\": [],\\n    \\\"encrypt_message\\\": [\\\"message\\\", \\\"key\\\"],\\n    \\\"decrypt_message\\\": [\\\"cipher_text\\\", \\\"key\\\"]\\n  },\\n  \\\"return\\\": {\\n    \\\"generate_key\\\": \\\"A bytes object representing the key.\\\",\\n    \\\"encrypt_message\\\": \\\"A string representing the encrypted message.\\\",\\n    \\\"decrypt_message\\\": \\\"A string representing the decrypted message.\\\"\\n  },\\n  \\\"depend\\\": [\\\"Python Cryptography library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A data scientist who values detailed logging for comprehensive analysis", "synthesized text": "\"{\\n\\\"name\\\": \\\"Python Logging Interface\\\",\\n\\\"description\\\": \\\"An interface that allows the user to log messages with different severity levels\\\",\\n\\\"function_name\\\": [\\\"initialize_logger\\\", \\\"log_message\\\"],\\n\\\"input_args\\\": {\\\"initialize_logger\\\": [\\\"output_dir\\\"], \\\"log_message\\\": [\\\"severity\\\", \\\"message\\\"]},\\n\\\"return\\\": \\\"No return value, messages are logged in a file and console\\\",\\n\\\"depend\\\": [\\\"Python's built-in logging library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A first-time parent interested in understanding how language development impacts their child's cognitive abilities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Complexity Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the readability and complexity of a text using various indices.\\\",\\n\\\"function_name\\\": \\\"analyze_text_complexity\\\",\\n\\\"input_args\\\": \\\"a string of text\\\",\\n\\\"return\\\": \\\"a dictionary with the calculated scores for various readability indices\\\",\\n\\\"depend\\\": \\\"Textstat library\\\"\\n}\"", "description": "tool development"}
{"input persona": "日本同性恋群体的倡导者，同时是BL漫画的狂热粉丝。", "synthesized text": "\"{\\n\\\"name\\\": \\\"BL Manga Recommendation Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that takes a BL manga name as input and returns a list of related manga recommendations.\\\",\\n\\\"function_name\\\": \\\"get_related_manga\\\",\\n\\\"input_args\\\": \\\"manga_name\\\",\\n\\\"return\\\": \\\"A list of related manga names\\\",\\n\\\"depend\\\": \\\"Jikan API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small business owner whose company was used as a launching pad for one of the hacker's attacks", "synthesized text": "\"{\\n    \\\"name\\\": \\\"IP Address Location Finder Interface\\\",\\n    \\\"description\\\": \\\"An interface to identify the geographical location of an IP address. It helps users trace the origin of any network attacks.\\\",\\n    \\\"function_name\\\": \\\"get_ip_location\\\",\\n    \\\"input_args\\\": {\\n        \\\"ip_address\\\": \\\"A string representing the IP address to be traced\\\"\\n    },\\n    \\\"return\\\": {\\n        \\\"location_info\\\": \\\"An object containing the geographical details of the IP address, which includes city, region, country, and postal code.\\\"\\n    },\\n    \\\"depend\\\": {\\n        \\\"python_libraries\\\": [\\\"geoip2\\\"],\\n        \\\"web_APIs\\\": [],\\n        \\\"pretrained_model\\\": []\\n    }\\n}\"", "description": "tool development"}
{"input persona": "A wealthy patron who commissions the painter to create album covers for their favorite musicians", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Album Cover Art Generation Interface\\\",\\n  \\\"description\\\": \\\"Generates a unique and creative album cover art image file based on the user's input musician's name and theme description. The theme description is used to generate an image using a GAN model, and the musician's name is added to the generated image.\\\",\\n  \\\"function_name\\\": \\\"generate_album_cover_art\\\",\\n  \\\"input_args\\\": [\\\"musician_name\\\", \\\"theme_description\\\"],\\n  \\\"return\\\": \\\"An image file named '{musician_name}_album_cover.png'\\\",\\n  \\\"depend\\\": {\\\"python libraries\\\": [\\\"PIL\\\", \\\"requests\\\"], \\\"machine learning models\\\": [\\\"Runway ML 'biggan-512'\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A tennis blogger who shares insights, statistics, and updates about Ashleigh Barty's matches", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Match Statistics Interface\\\",\\n  \\\"description\\\": \\\"Retrieves match statistics of Ashleigh Barty's tennis matches from the Tennis Data API.\\\",\\n  \\\"function_name\\\": \\\"get_match_statistics\\\",\\n  \\\"input_args\\\": {\\n    \\\"match_date\\\": \\\"The date of the match in YYYY-MM-DD format.\\\",\\n    \\\"opponent\\\": \\\"The name of Ashleigh Barty's opponent in the match.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"description\\\": \\\"A JSON object containing detailed match statistics such as number of aces, double faults, first serve percentage, break points won, etc.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"Python Library\\\": \\\"requests\\\",\\n    \\\"Web API\\\": \\\"Tennis Data API\\\"\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A mathematician who provides insights into the theoretical aspects of electromagnetic radiation shielding", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Electromagnetic Radiation Shielding Efficacy Simulation Interface\\\",\\n  \\\"description\\\": \\\"This interface simulates the shielding efficacy of a material against electromagnetic radiation of a certain frequency and thickness of the material. The permittivity and permeability are given relative to vacuum (they are unitless). The frequency is given in Hertz (Hz), and the thickness in meters (m).\\\",\\n  \\\"function_name\\\": \\\"simulate_shielding_efficacy\\\",\\n  \\\"input_args\\\": {\\n    \\\"frequency\\\": \\\"The frequency of the electromagnetic radiation in Hertz (Hz).\\\",\\n    \\\"thickness\\\": \\\"The thickness of the material in meters (m).\\\",\\n    \\\"permittivity\\\": \\\"The permittivity of the material relative to vacuum.\\\",\\n    \\\"permeability\\\": \\\"The permeability of the material relative to vacuum.\\\"\\n  },\\n  \\\"return\\\": \\\"The absolute value of the transmission coefficient, which gives the proportion of the incident power that is transmitted through the material. A value close to 1 indicates good shielding efficacy, while a value close to 0 indicates poor shielding efficacy.\\\",\\n  \\\"depend\\\": \\\"Python libraries: numpy, scipy\\\"\\n}\"", "description": "tool development"}
{"input persona": "Massimiliano Bartoli, a chef and restauranteur", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Recipe Ingredient Substitution Interface\\\",\\n  \\\"description\\\": \\\"This interface takes an ingredient and returns a list of potential substitutes using a pre-trained language model.\\\",\\n  \\\"function_name\\\": \\\"get_ingredient_substitution\\\",\\n  \\\"input_args\\\": {\\\"ingredient\\\": \\\"string\\\"},\\n  \\\"return\\\": \\\"string\\\",\\n  \\\"depend\\\": {\\\"huggingface\\\": \\\"transformers\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A high school basketball coach, who grew up admiring Linda Page's career.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Basketball Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface to calculate Player Efficiency Rating (PER), a measure of a player's per-minute productivity. The coach only needs to input the number of points, assists, rebounds, steals, and blocks their player made in a game.\\\",\\n\\\"function_name\\\": \\\"calculate_player_efficiency_rating\\\",\\n\\\"input_args\\\": {\\n    \\\"points\\\": \\\"Number of points scored by the player\\\",\\n    \\\"assists\\\": \\\"Number of assists made by the player\\\",\\n    \\\"rebounds\\\": \\\"Number of rebounds made by the player\\\",\\n    \\\"steals\\\": \\\"Number of steals made by the player\\\",\\n    \\\"blocks\\\": \\\"Number of blocks made by the player\\\",\\n    \\\"turnovers\\\": \\\"Number of turnovers by the player\\\",\\n    \\\"field_goal_attempts\\\": \\\"Number of field goal attempts by the player\\\",\\n    \\\"field_goals\\\": \\\"Number of successful field goals by the player\\\",\\n    \\\"free_throw_attempts\\\": \\\"Number of free throw attempts by the player\\\",\\n    \\\"free_throws\\\": \\\"Number of successful free throws by the player\\\",\\n    \\\"minutes_played\\\": \\\"Number of minutes the player played\\\",\\n    \\\"team_total_points\\\": \\\"Total points scored by the team\\\",\\n    \\\"opponent_total_points\\\": \\\"Total points scored by the opponent\\\"\\n},\\n\\\"return\\\": \\\"Player Efficiency Rating (PER) for the given player\\\",\\n\\\"depend\\\": \\\"No dependencies\\\"\\n}\"", "description": "tool development"}
{"input persona": "A meticulous archivist responsible for maintaining the orchestra's extensive sheet music collection", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sheet Music Classification Interface\\\",\\n\\\"description\\\": \\\"This interface uses Optical Music Recognition (OMR) API to automatically classify the sheet music based on the information extracted from the sheet music image. Users only need to input the path to a sheet music image file, and the interface will return the classified information of this sheet music.\\\",\\n\\\"function_name\\\": \\\"classify_sheet_music\\\",\\n\\\"input_args\\\": \\\"sheet_music_image_path\\\",\\n\\\"return\\\": \\\"classified information of the sheet music\\\",\\n\\\"depend\\\": \\\"Audiveris API, cv2, requests, json\\\"\\n}\"", "description": "tool development"}
{"input persona": "An aerospace company that requires precision components for their aircrafts", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface loads a 3D model and calculates the volume and surface area of the model. It is useful for aerospace companies that require precise calculations for their 3D models.\\\",\\n\\\"function_name\\\": \\\"analyze_3d_model\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"A dictionary with the volume and surface area of the 3D model.\\\",\\n\\\"depend\\\": \\\"trimesh library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Soy un desarrollador de software con años de experiencia utilizando Vagrant para proporcionar entornos de desarrollo uniformes.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Vagrant Environment Setup Interface\\\",\\n  \\\"description\\\": \\\"An interface to setup and destroy Vagrant environments. Users can easily manage Vagrant environments by providing the location of the Vagrantfile.\\\",\\n  \\\"function_name\\\": [\\\"setup_vagrant_environment\\\", \\\"destroy_vagrant_environment\\\"],\\n  \\\"input_args\\\": [\\\"vagrantfile_path\\\"],\\n  \\\"return\\\": \\\"Boolean indicating whether the operation was successful or not\\\",\\n  \\\"depend\\\": [\\\"Python's subprocess module\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A data analyst using statistical methods to compare recidivism rates in various criminal justice systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recidivism Rate Comparison Interface\\\",\\n\\\"description\\\": \\\"An interface that uses statistical methods to compare recidivism rates in different criminal justice systems. The input should be CSV files containing recidivism data for different justice systems, and the interface will return a statistical comparison of the recidivism rates.\\\",\\n\\\"function_name\\\": \\\"compare_recidivism_rates\\\",\\n\\\"input_args\\\": [\\\"file_path1\\\", \\\"file_path2\\\"],\\n\\\"return\\\": \\\"A string indicating whether the difference in recidivism rates is statistically significant or not, along with the p-value.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"scipy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a sniper expert in the navy seals", "synthesized text": "\"{\\n\\\"name\\\": \\\"Distance Measurement Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the distance between two points on the earth's surface given their longitudes and latitudes. The user only needs to input the coordinates of two places, and our interface will return the distance between them in kilometers.\\\",\\n\\\"function_name\\\": \\\"calculate_distance\\\",\\n\\\"input_args\\\": [\\\"coord1\\\", \\\"coord2\\\"],\\n\\\"return\\\": \\\"The distance (in kilometers) between the two input coordinates.\\\",\\n\\\"depend\\\": \\\"Python's built-in math library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A land surveyor responsible for assessing property boundaries and topography", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Boundary and Topography Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface accepts a GeoTIFF file path and returns the boundary coordinates of the property and statistical analysis of the topography, such as minimum, maximum, mean, and standard deviation of the elevation points.\\\",\\n\\\"function_name\\\": \\\"get_boundary_and_topography\\\",\\n\\\"input_args\\\": \\\"geotiff_path\\\",\\n\\\"return\\\": \\\"A dictionary containing property boundary and topographical statistics\\\",\\n\\\"depend\\\": \\\"GDAL (Geospatial Data Abstraction Library)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A newly relocated insurance adjuster looking for a family-friendly neighborhood", "synthesized text": "\"{\\n\\\"name\\\": \\\"Family-friendly Neighborhood Finder\\\",\\n\\\"description\\\": \\\"This interface fetches and analyzes data related to crime rates, school ratings, etc. to find family-friendly neighborhoods for a given city and state.\\\",\\n\\\"function_name\\\": \\\"get_family_friendly_neighborhood\\\",\\n\\\"input_args\\\": [\\\"city\\\", \\\"state\\\"],\\n\\\"return\\\": \\\"List of family-friendly neighborhoods\\\",\\n\\\"depend\\\": \\\"AreaVibes API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A land use planner responsible for implementing and enforcing land management policies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Land Use Policy Compliance Checker Interface\\\",\\n\\\"description\\\": \\\"This interface allows the land use planner to input the proposed land use policy and a list of geographic coordinates. It returns whether the proposed land use at each location complies with the policy or not.\\\",\\n\\\"function_name\\\": \\\"check_land_use_compliance\\\",\\n\\\"input_args\\\": {\\n    \\\"policy\\\": \\\"The proposed land use policy.\\\",\\n    \\\"locations\\\": \\\"A list of geographic coordinates.\\\"\\n},\\n\\\"return\\\": \\\"A list of tuples with each location and a boolean indicating compliance.\\\",\\n\\\"depend\\\": \\\"Geographic Information System (GIS) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A marketing specialist who plans and manages live tournaments for the fan club", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Tournament Scheduling Interface\\\",\\n  \\\"description\\\": \\\"An interface to generate a round-robin tournament schedule given a list of teams. Each team will play every other team once.\\\",\\n  \\\"function_name\\\": \\\"create_tournament_schedule\\\",\\n  \\\"input_args\\\": [\\\"teams\\\"],\\n  \\\"return\\\": \\\"A list of rounds, where each round is a list of matches, and each match is a tuple of two teams.\\\",\\n  \\\"depend\\\": [\\\"Python Library: round_robin_tournament\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A obstetrician specializing in multiple pregnancies who can monitor the health of both the mother and the babies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fetal Health Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the health of the fetus based on various health parameters of the mother. It uses a pre-trained machine learning model for the prediction.\\\",\\n\\\"function_name\\\": \\\"predict_fetal_health\\\",\\n\\\"input_args\\\": [\\\"mother_age\\\", \\\"systolic_bp\\\", \\\"diastolic_bp\\\", \\\"glucose\\\", \\\"skin_thickness\\\", \\\"insulin\\\", \\\"bmi\\\"],\\n\\\"return\\\": \\\"A predictive score indicating the health of the fetus.\\\",\\n\\\"depend\\\": \\\"Python's joblib and pandas libraries, and a pre-trained machine learning model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data scientist from a research organization looking to leverage Sagemaker for data analysis and model building", "synthesized text": "\"{\\n\\\"name\\\": \\\"Amazon Sagemaker Deployment Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of deploying a machine learning model on Amazon Sagemaker. It manages the creation and deployment of the model, allowing the user to focus on the data analysis and model building aspects of their project.\\\",\\n\\\"function_name\\\": \\\"deploy_model_on_sagemaker\\\",\\n\\\"input_args\\\": [\\\"model_name\\\", \\\"execution_role\\\", \\\"model_data_path\\\"],\\n\\\"return\\\": \\\"endpoint_name\\\",\\n\\\"depend\\\": [\\\"boto3\\\", \\\"sagemaker\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A self-taught programmer who has successfully developed their own operating system", "synthesized text": "\"{\\n\\\"name\\\": \\\"Code Execution Time Measurement Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to measure the execution time of their Python code. Users need to input their Python code as a string, and the interface will return the execution time of the code in seconds.\\\",\\n\\\"function_name\\\": \\\"measure_execution_time\\\",\\n\\\"input_args\\\": \\\"code - A string containing the Python code to be executed.\\\",\\n\\\"return\\\": \\\"The execution time of the input Python code in seconds.\\\",\\n\\\"depend\\\": \\\"Python's built-in 'time' library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dog owner who has successfully trained their own reactive dog to be calm during grooming sessions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dog Behavior Training Interface\\\",\\n\\\"description\\\": \\\"This interface classifies a dog's behavior during grooming sessions based on an image.\\\",\\n\\\"function_name\\\": \\\"classify_dog_behavior\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"A numeric code representing the predicted category of the dog's behavior.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, Image Classification Model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A gynecologist with years of experience in handling complicated childbirth cases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pregnancy Risk Assessment Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to assess the risk of complications during childbirth based on certain health indicators of the pregnant woman. It returns a risk score and the category of risk (low, medium, high).\\\",\\n\\\"function_name\\\": \\\"pregnancy_risk_assessment\\\",\\n\\\"input_args\\\": [\\\"path_to_model\\\", \\\"age\\\", \\\"bmi\\\", \\\"blood_pressure\\\", \\\"gestational_diabetes_history\\\"],\\n\\\"return\\\": [\\\"risk_score\\\", \\\"risk_category\\\"],\\n\\\"depend\\\": [\\\"sklearn\\\", \\\"pandas\\\", \\\"machine learning model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Black father who has seen too much police violence in his community.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Police Activity Reporting Interface\\\",\\n\\\"description\\\": \\\"An interface for reporting police activity in a given area. The user inputs the type of police activity, location, and date/time, and the interface returns a confirmation that the report has been filed.\\\",\\n\\\"function_name\\\": \\\"report_police_activity\\\",\\n\\\"input_args\\\": [\\\"activity_type\\\", \\\"location\\\", \\\"date_time\\\"],\\n\\\"return\\\": \\\"Confirmation message\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Open Police Data API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Un economista che studia l'impatto delle nuove tecnologie sul mercato finanziario", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Market Prediction Interface\\\",\\n\\\"description\\\": \\\"Provides a prediction on stock price movement based on the latest news about the stock.\\\",\\n\\\"function_name\\\": \\\"predict_stock_movement\\\",\\n\\\"input_args\\\": \\\"stock_symbol\\\",\\n\\\"return\\\": \\\"A prediction on the stock price movement (either 'negative', 'neutral', or 'positive').\\\",\\n\\\"depend\\\": \\\"Hugging Face's FinBERT model, a large language model to fetch the latest news about the stock.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A receptionist at a mid-range hotel.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hotel Booking Availability Interface\\\",\\n\\\"description\\\": \\\"This interface checks for room availability in a hotel. Users need to input the type of room and the date range, and the interface will return the availability of the room for those dates.\\\",\\n\\\"function_name\\\": \\\"check_room_availability\\\",\\n\\\"input_args\\\": [\\\"conn\\\", \\\"room_type\\\", \\\"start_date\\\", \\\"end_date\\\"],\\n\\\"return\\\": \\\"Number of available rooms of the specified type for the given date range\\\",\\n\\\"depend\\\": [\\\"SQLite\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a junior IT support engineer not entirely familiar with IIS setups", "synthesized text": "\"{\\n\\\"name\\\": \\\"IIS Log Analyzer Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze IIS logs. It returns the most visited pages and the number of visitors in graphical form.\\\",\\n\\\"function_name\\\": \\\"analyze_iis_log\\\",\\n\\\"input_args\\\": \\\"file_path: The path to the IIS log file.\\\",\\n\\\"return\\\": \\\"Two bar plots showing the most visited pages and the number of visitors.\\\",\\n\\\"depend\\\": \\\"Python's built-in libraries: pandas, matplotlib, re\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired European police officer who advocates for crowd safety and has studied the history of major sporting disasters.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Crowd Density Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface estimates the crowd density in a given scene by using a pre-trained crowd counting model from TensorFlow Hub. The user only needs to input the path to an image file of the scene, and our interface will return the estimated number of people present in the scene.\\\",\\n\\\"function_name\\\": \\\"estimate_crowd_density\\\",\\n\\\"input_args\\\": {\\\"path_to_img\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"estimated_count\\\": \\\"integer\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"tensorflow\\\", \\\"numpy\\\"], \\\"machine learning models\\\": [\\\"CSRNet from TensorFlow Hub\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "I am a mobile app developer frustrated with the limitations and quirks of integrated development environments and logging mechanisms.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Bug Reporting Interface\\\",\\n\\\"description\\\": \\\"An interface that logs the execution of a function, recording any errors or exceptions that occur during its execution. This aids in debugging and understanding the behavior of the function.\\\",\\n\\\"function_name\\\": \\\"log_function_execution\\\",\\n\\\"input_args\\\": {\\n    \\\"func\\\": \\\"The function that needs to be executed and logged\\\",\\n    \\\"args\\\": \\\"The positional arguments for the function\\\",\\n    \\\"kwargs\\\": \\\"The keyword arguments for the function\\\"\\n},\\n\\\"return\\\": \\\"A string indicating whether the function executed successfully or an exception occurred, along with a log file 'app.log' that records the details.\\\",\\n\\\"depend\\\": \\\"Python's built-in logging library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A theme park owner looking to create a jaw-dropping attraction that will leave visitors in awe", "synthesized text": "\"{\\n\\\"name\\\": \\\"Attraction Popularity Predictor Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the popularity of a potential theme park attraction based on its type, thrill level, and age appropriateness.\\\",\\n\\\"function_name\\\": \\\"predict_attraction_popularity\\\",\\n\\\"input_args\\\": [\\\"attraction_type\\\", \\\"thrill_level\\\", \\\"age_appropriate\\\"],\\n\\\"return\\\": \\\"A predicted popularity score for the prospective attraction.\\\",\\n\\\"depend\\\": \\\"Scikit-learn library, a pre-trained Machine Learning model (RandomForestRegressor)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A resident of Jacksonville, Florida, who studied at Florida State University and knew the pastor of the Ortega United Methodist Church", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface uses the OpenWeatherMap API to provide current weather details for a specified city. Optional country code can be provided for cities outside of the USA or for cities with common names.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": [\\\"city_name\\\", \\\"country_code\\\"],\\n\\\"return\\\": \\\"A dictionary with keys 'Weather Description', 'Temperature', 'Humidity', 'Wind Speed' and corresponding values indicating the current weather of the specified city.\\\",\\n\\\"depend\\\": \\\"Python library: requests, Web API: OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A single parent who admires Kendra's work and seeks advice on navigating the child welfare system", "synthesized text": "\"{\\n\\\"name\\\": \\\"Child Welfare Advice Interface\\\",\\n\\\"description\\\": \\\"An interface that enables users to access advice or resources related to child welfare from the Child Welfare Information Gateway's API. Users input a specific topic and receive a list of relevant advice or resources.\\\",\\n\\\"function_name\\\": \\\"get_child_welfare_advice\\\",\\n\\\"input_args\\\": \\\"topic - A specific concern or question related to child welfare.\\\",\\n\\\"return\\\": \\\"A list of advice or resources. Each item in the list is a dictionary containing the title of the advice/resource and its corresponding URL.\\\",\\n\\\"depend\\\": \\\"Web API from Child Welfare Information Gateway\\\"\\n}\"", "description": "tool development"}
{"input persona": "A single parent in Holly Hill, South Carolina, who has just been served divorce papers and is feeling overwhelmed and anxious.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Document Simplification Interface\\\",\\n\\\"description\\\": \\\"This interface extracts text from a PDF legal document and simplifies the legal jargon into more understandable language using a text generation model.\\\",\\n\\\"function_name\\\": \\\"simplify_legal_document\\\",\\n\\\"input_args\\\": \\\"path_to_file - A string that represents the path to a PDF file that contains a legal document.\\\",\\n\\\"return\\\": \\\"A string that represents the simplified version of the legal document.\\\",\\n\\\"depend\\\": \\\"Python PyPDF2 library for PDF processing, Hugging Face's transformer library for text simplification with the 'mrm8488/t5-base-finetune-squadv2' model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional equestrian trainer known for her exceptional skills in dressage", "synthesized text": "\"{\\n\\\"name\\\": \\\"Horse Pose Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to perform pose estimation on horses given an image.\\\",\\n\\\"function_name\\\": \\\"estimate_horse_pose\\\",\\n\\\"input_args\\\": \\\"path_to_img: str\\\",\\n\\\"return\\\": \\\"A 3D numpy array containing the coordinates of the keypoints estimated by the model. Each keypoint is represented by a 3D vector [y, x, visibility], where y and x are the normalized coordinates of the keypoint and visibility is the confidence score of the keypoint detection.\\\",\\n\\\"depend\\\": \\\"Python Libraries: TensorFlow, TensorFlow Hub, cv2, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ambitious and academically-driven student who formed a close bond with the Italian exchange student", "synthesized text": "\"{\\n\\\"name\\\": \\\"Italian to English Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates Italian text to English using Google Cloud Translation API. It simplifies the communication with Italian speaking individuals.\\\",\\n\\\"function_name\\\": \\\"translate_italian_to_english\\\",\\n\\\"input_args\\\": \\\"text\\\",\\n\\\"return\\\": \\\"The input Italian text and its English translation\\\",\\n\\\"depend\\\": \\\"Google Cloud Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An amateur electronic musician creating their own synth-driven tracks at home", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sound Synthesizer Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to generate and play a sinusoidal sound wave by specifying the frequency, duration and amplitude of the sound.\\\",\\n\\\"function_name\\\": \\\"sound_synthesizer\\\",\\n\\\"input_args\\\": {\\n    \\\"frequency\\\": \\\"The frequency of the tone in Hz (type: float or int)\\\",\\n    \\\"duration\\\": \\\"The duration of the sound in seconds (type: float or int)\\\",\\n    \\\"amplitude\\\": \\\"The amplitude of the sound wave (type: float or int)\\\"\\n},\\n\\\"return\\\": \\\"No return value. The function plays the generated sound wave.\\\",\\n\\\"depend\\\": \\\"This function uses the Sounddevice and Numpy libraries in Python.\\\"\\n}\"", "description": "tool development"}
{"input persona": "影评人，专注于社会历史及电影艺术融合的作品，对于历史事实的准确性有苛刻标准", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Fact Checker\\\",\\n\\\"description\\\": \\\"This interface checks the accuracy of historical events depicted in movies by comparing them with the corresponding Wikipedia entries.\\\",\\n\\\"function_name\\\": \\\"get_movie_fact_check\\\",\\n\\\"input_args\\\": \\\"movie_name\\\",\\n\\\"return\\\": \\\"A dictionary mapping historical events in the movie to a comparison between the movie's representation and the historical fact from Wikipedia.\\\",\\n\\\"depend\\\": \\\"Wikipedia API, IMDb API, Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young novice wrestling with maintaining the rigorous regimen of the monastic life", "synthesized text": "\"{\\n\\\"name\\\": \\\"Meditation Reminder Interface\\\",\\n\\\"description\\\": \\\"An interface for setting daily reminders for meditation. User specifies the times they wish to be reminded, and the program prints a reminder at those times.\\\",\\n\\\"function_name\\\": \\\"set_meditation_reminders\\\",\\n\\\"input_args\\\": \\\"times - a list of strings representing the times (in 24-hour format) the user wishes to be reminded\\\",\\n\\\"return\\\": \\\"No return value; function runs indefinitely until program is stopped, printing a reminder at the specified times each day\\\",\\n\\\"depend\\\": [\\\"Python's schedule library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am a retired military officer and an ardent supporter of the Army Black Knights.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Team Game Score Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the game scores for the Army Black Knights based on the opposing team's name\\\",\\n\\\"function_name\\\": \\\"predict_game_score\\\",\\n\\\"input_args\\\": [\\\"opposing_team\\\"],\\n\\\"return\\\": {\\\"Army Black Knights\\\": \\\"predicted_score\\\", \\\"opposing_team\\\": \\\"opposing_team\\\"},\\n\\\"depend\\\": [\\\"sklearn\\\", \\\"pandas\\\", \\\"past_games.csv\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An active participant of the South Dakota community without a deep understanding of technical issues related to public utilities, mostly attending community events about public utilities to stay informed and updated on the issues that could potentially affect his daily life and well-being of his neighborhood.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Public Utility Outage Alert Interface\\\",\\n  \\\"description\\\": \\\"An interface to fetch any ongoing or scheduled utility outages in a particular zip code area. The information includes type of utility (electricity, water, gas), expected resolution time, and the number of affected households.\\\",\\n  \\\"function_name\\\": \\\"get_utility_outages\\\",\\n  \\\"input_args\\\": {\\n    \\\"zip_code\\\": \\\"A string representing the zip code of the area to fetch the outage information for.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"outages\\\": \\\"A list of dictionaries, each containing information about a particular outage.\\\"\\n  },\\n  \\\"depend\\\": \\\"Python's requests library, Public utilities provider's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software sales representative pitching a comprehensive data protection solution", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Data Protection Health Check Interface\\\",\\n    \\\"description\\\": \\\"This interface checks the integrity of the files in a directory by calculating their hash values.\\\",\\n    \\\"function_name\\\": \\\"data_protection_health_check\\\",\\n    \\\"input_args\\\": [\\\"directory_path\\\"],\\n    \\\"return\\\": \\\"A dictionary with filenames as keys and their corresponding hash values as values.\\\",\\n    \\\"depend\\\": [\\\"Python's os library\\\", \\\"Python's hashlib library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A creative director who oversees multiple graphic design projects and ensures the team's work aligns with the company's brand", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Brand Alignment Check Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to analyze an image and return the predicted category. This can help a creative director check if a design aligns with the brand's image.\\\",\\n  \\\"function_name\\\": \\\"check_brand_alignment\\\",\\n  \\\"input_args\\\": {\\n    \\\"path_to_img\\\": \\\"The path to the image file that you want to check.\\\"\\n  },\\n  \\\"return\\\": \\\"The predicted category of the image. This can be used to check if a design aligns with the brand's image.\\\",\\n  \\\"depend\\\": {\\\"python libraries\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\"], \\\"machine learning models\\\": [\\\"https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A fellow government employee who respects your determination to uphold integrity in the workplace", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Similarity Interface\\\",\\n\\\"description\\\": \\\"This interface computes the similarity between two text documents using cosine similarity.\\\",\\n\\\"function_name\\\": \\\"document_similarity\\\",\\n\\\"input_args\\\": [\\\"doc1\\\", \\\"doc2\\\"],\\n\\\"return\\\": \\\"similarity_score\\\",\\n\\\"depend\\\": [\\\"sklearn.feature_extraction.text.TfidfVectorizer\\\", \\\"sklearn.metrics.pairwise.cosine_similarity\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A mischievous twin who constantly challenges their pranks and tries to outdo them", "synthesized text": "\"{\\n\\\"name\\\": \\\"Prank Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face's transformers library to classify the severity of pranks based on a description.\\\",\\n\\\"function_name\\\": \\\"prank_severity_analysis\\\",\\n\\\"input_args\\\": \\\"prank_description - A string that describes the prank\\\",\\n\\\"return\\\": \\\"A tuple with two elements. The first element is a string that represents the severity rating ('POSITIVE' or 'NEGATIVE'). The second element is a float that represents the confidence score of the prediction.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a fan of the Virginia Tech Hokies women's soccer team who likes to speculate on the team's performance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Performance Prediction Interface\\\",\\n\\\"description\\\": \\\"Predict the performance of the Virginia Tech Hokies women's soccer team based on past performance data.\\\",\\n\\\"function_name\\\": \\\"train_and_predict\\\",\\n\\\"input_args\\\": \\\"file_path, target_column\\\",\\n\\\"return\\\": \\\"Predictions for the next match, Mean absolute error between the predictions and the actual results\\\",\\n\\\"depend\\\": \\\"pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A protective parent who is skeptical about the government’s response to the COVID-19 pandemic in Ontario.", "synthesized text": "\"{\\n\\\"name\\\": \\\"COVID-19 Data Visualization Interface\\\",\\n\\\"description\\\": \\\"An interface to visualize the trend of COVID-19 in a specific province using data from the COVID-19 Data Repository by the Center for Systems Science and Engineering (CSSE) at Johns Hopkins University.\\\",\\n\\\"function_name\\\": \\\"plot_covid_trend\\\",\\n\\\"input_args\\\": \\\"province\\\",\\n\\\"return\\\": \\\"A plot showing the COVID-19 trend in the specified province.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"matplotlib\\\", \\\"COVID-19 Data Repository by CSSE at Johns Hopkins University\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A rebellious younger sister who experiments with avant-garde culinary techniques", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recipe Ingredient Substitution Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a large language model (LLM) to suggest possible ingredient substitutions in a recipe. The user inputs the name of a recipe or list of ingredients, and the interface returns a list of alternative ingredients that could be used to experiment with the recipe.\\\",\\n\\\"function_name\\\": \\\"suggest_substitutions\\\",\\n\\\"input_args\\\": \\\"recipe - a string containing the name of a recipe or list of ingredients\\\",\\n\\\"return\\\": \\\"A string of alternative ingredients that could be used to experiment with the recipe.\\\",\\n\\\"depend\\\": \\\"Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A person who has never played video games.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Game Recommendation Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the IGDB (Internet Game Database) API to recommend games based on user preferences such as category, platform, and age rating.\\\",\\n  \\\"function_name\\\": \\\"get_game_recommendations\\\",\\n  \\\"input_args\\\": [\\\"category\\\", \\\"platform\\\", \\\"age_rating\\\"],\\n  \\\"return\\\": \\\"A list of game names based on the input preferences.\\\",\\n  \\\"depend\\\": \\\"IGDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An administrator who is supportive but cautious of the professor's teaching approach", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plagiarism Detection Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Turnitin API to detect plagiarism in a document. The user inputs the file path of a document, and the interface returns a plagiarism score indicating the percentage of the document that matches other sources.\\\",\\n\\\"function_name\\\": \\\"plagiarism_detection\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"path to the document file\\\"},\\n\\\"return\\\": {\\\"plagiarism_score\\\": \\\"percentage of the document that matches other sources\\\"},\\n\\\"depend\\\": {\\\"requests\\\": \\\"Python library\\\", \\\"Turnitin API\\\": \\\"Web API\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A rival business owner in the same industry, who also deals with tariffs and customs regulations", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Trade Tariff Lookup Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to input a product's Harmonized System (HS) code and the target country, then our interface will return the corresponding tariff and regulation information.\\\",\\n  \\\"function_name\\\": \\\"get_tariff_and_regulation\\\",\\n  \\\"input_args\\\": {\\n    \\\"hs_code\\\": \\\"A string that represents the Harmonized System code of the product\\\",\\n    \\\"country\\\": \\\"A string that represents the target country\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"tariff\\\": \\\"A string that represents the tariff rate\\\",\\n    \\\"regulation\\\": \\\"A string that represents the regulation\\\",\\n    \\\"error\\\": \\\"A string that indicates no data found for input HS code and country\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"Python Library\\\": [\\\"requests\\\"],\\n    \\\"Web API\\\": [\\\"Trade Tariff Lookup API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A skeptic of natural treatments for any illness, including diabetes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Diabetes Risk Predictor Interface\\\",\\n\\\"description\\\": \\\"Predicts the risk of diabetes based on certain parameters like age, BMI, blood pressure, glucose level.\\\",\\n\\\"function_name\\\": \\\"predict_diabetes_risk\\\",\\n\\\"input_args\\\": {\\n    \\\"age\\\": \\\"Age of the person\\\",\\n    \\\"bmi\\\": \\\"Body Mass Index of the person\\\",\\n    \\\"blood_pressure\\\": \\\"Blood pressure level of the person\\\",\\n    \\\"glucose_level\\\": \\\"Glucose level of the person\\\"\\n},\\n\\\"return\\\": \\\"Risk of having diabetes\\\",\\n\\\"depend\\\": \\\"Machine Learning Model (diabetes_predictor_model.pkl), Python Libraries (pickle, numpy)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A passionate cinephile and film history enthusiast who is particularly fond of Spike Lee's work.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Information Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface fetches detailed information about a movie from the Open Movie Database (OMDB). It uses the OMDB API to retrieve information such as director, actors, plot, IMDB rating, etc.\\\",\\n\\\"function_name\\\": \\\"get_movie_info\\\",\\n\\\"input_args\\\": \\\"title: A string that represents the title of the movie\\\",\\n\\\"return\\\": \\\"A dictionary that contains detailed information about the movie\\\",\\n\\\"depend\\\": \\\"requests library, OMDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A currently-active women's basketball player on the Hamilton Honey Badgers team who played under coach Vallée.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch and analyze the performance statistics of a player. The user only needs to input the player's name, and the interface will return the player's performance statistics.\\\",\\n\\\"function_name\\\": \\\"get_player_performance_stats\\\",\\n\\\"input_args\\\": \\\"player_name -> A string representing the name of the player\\\",\\n\\\"return\\\": \\\"A dictionary containing the player's performance statistics including games played, points per game, rebounds per game, and assists per game\\\",\\n\\\"depend\\\": \\\"A web API from a basketball statistics provider\\\"\\n}\"", "description": "tool development"}
{"input persona": "An editor responsible for reviewing and publishing research articles in the field of plant physiology", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plagiarism Detection Interface\\\",\\n\\\"description\\\": \\\"This interface helps detect possible plagiarism in research articles by comparing texts and returning a similarity score. A high score indicates potential plagiarism.\\\",\\n\\\"function_name\\\": \\\"calculate_text_similarity\\\",\\n\\\"input_args\\\": [\\\"text1\\\", \\\"text2\\\"],\\n\\\"return\\\": \\\"A float number between 0 and 1 representing the similarity between the input texts. Closer to 1 indicates higher similarity.\\\",\\n\\\"depend\\\": \\\"Python library: textdistance\\\"\\n}\"", "description": "tool development"}
{"input persona": "As a fan of sports but unfamiliar with lawn bowling in particular", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lawn Bowling Score Calculator Interface\\\",\\n\\\"description\\\": \\\"This interface accepts the number of rounds played and the points scored in each round as inputs and calculates the total lawn bowling score.\\\",\\n\\\"function_name\\\": \\\"calculate_lawn_bowling_score\\\",\\n\\\"input_args\\\": [\\\"rounds\\\", \\\"points\\\"],\\n\\\"return\\\": \\\"total_score\\\",\\n\\\"depend\\\": [\\\"Python built-in functions\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An admirer of successful individuals climbing career ladders", "synthesized text": "\"{\\n\\\"name\\\": \\\"LinkedIn Job Posting Analysis Interface\\\",\\n\\\"description\\\": \\\"Fetch and analyze job postings from LinkedIn for a specific role in a specified location, summarizing the common requirements such as skills, qualifications, and experiences.\\\",\\n\\\"function_name\\\": \\\"analyze_linkedin_job_postings\\\",\\n\\\"input_args\\\": [\\\"access_token\\\", \\\"role\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"A dictionary with the keys 'top_skills', 'top_qualifications', 'top_experiences', each containing a list of the 10 most common corresponding items found in the analyzed job postings.\\\",\\n\\\"depend\\\": [\\\"python libraries: requests, json, collections.Counter\\\", \\\"Web APIs: LinkedIn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A hardware engineer working in a nuclear power plant in the Czech Republic.", "synthesized text": "\"{\\n    \\\"sensor_id\\\": \\\"123\\\",\\n    \\\"radiation_level\\\": \\\"3.4\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Chicago Council on Global Affairs employee and proud Chicago resident.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Chicago Crime Data Analysis Interface\\\",\\n  \\\"description\\\": \\\"Analyze crime data in Chicago within a given date range. The result includes the number of crimes, the most common type of crime, and the district with the most crimes.\\\",\\n  \\\"function_name\\\": \\\"analyze_chicago_crime_data\\\",\\n  \\\"input_args\\\": {\\n    \\\"start_date\\\": \\\"The start date of the date range in YYYY-MM-DD format.\\\",\\n    \\\"end_date\\\": \\\"The end date of the date range in YYYY-MM-DD format.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"crime_count\\\": \\\"The total number of crimes within the date range.\\\",\\n    \\\"most_common_crime\\\": \\\"The most common type of crime within the date range.\\\",\\n    \\\"most_crime_district\\\": \\\"The district with the most crimes within the date range.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\", \\\"collections.Counter\\\"],\\n    \\\"web APIs\\\": [\\\"Chicago Crime Data API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A recently retired professor of Organic Chemistry who had the opportunity to meet Edward E. Arnett during a conference in the late 1980s.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chemical Reaction Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface takes in a SMILES string of a molecule and returns a prediction of the molecule's most likely reactions using the RDKit library.\\\",\\n\\\"function_name\\\": \\\"predict_reactions\\\",\\n\\\"input_args\\\": [\\\"smiles_string\\\"],\\n\\\"return\\\": \\\"List of SMILES strings of possible products.\\\",\\n\\\"depend\\\": [\\\"rdkit\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A firefighter who conducts joint drills and simulations with the emergency dispatcher to improve response coordination", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Emergency Situation Simulation Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to simulate an emergency situation by specifying the parameters of the simulation such as the number of emergencies, their types, and the time they occur. The simulation results, which include the response times and success rates for different types of emergencies, are returned.\\\",\\n  \\\"function_name\\\": \\\"run_emergency_simulation\\\",\\n  \\\"input_args\\\": \\\"file_path - The path to the simulation configuration file.\\\",\\n  \\\"return\\\": \\\"A dictionary containing the simulation state after running, which includes the response times and success rates for different types of emergencies.\\\",\\n  \\\"depend\\\": \\\"SimPy - a Python simulation library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An avid fan of Richard Marx who loves to sing along to his songs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lyrics Fetching Interface\\\",\\n\\\"description\\\": \\\"Fetches the lyrics of a specified song using the Genius API.\\\",\\n\\\"function_name\\\": \\\"get_song_lyrics\\\",\\n\\\"input_args\\\": [\\\"song_title\\\"],\\n\\\"return\\\": \\\"string (song lyrics)\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"beautifulsoup4\\\", \\\"Genius API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A local farmer who wants to convert their farming equipment to run on biodiesel", "synthesized text": "\"{\\n\\\"name\\\": \\\"Biodiesel Price Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface uses APIs from various fuel price data providers to provide the price per gallon of the specified biodiesel type from different providers at a given location.\\\",\\n\\\"function_name\\\": \\\"get_biodiesel_prices\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"The current location of the user.\\\",\\n    \\\"biodiesel_type\\\": \\\"The type of biodiesel the user is interested in (e.g., B20, B100).\\\"\\n},\\n\\\"return\\\": \\\"A dictionary where the keys are the names of the biodiesel providers and the values are the corresponding price per gallon of the specified biodiesel type.\\\",\\n\\\"depend\\\": \\\"requests library, Fuel Price APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "A taxi driver who engages in lively debates about football with their passengers, including the dedicated Jets fan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Football-API to fetch latest football match or team statistics. Ideal for football fans who want to stay updated with their favorite team's performance.\\\",\\n\\\"function_name\\\": [\\\"get_football_team_stats\\\", \\\"get_football_match_stats\\\"],\\n\\\"input_args\\\": {\\\"get_football_team_stats\\\": [\\\"team_name\\\"], \\\"get_football_match_stats\\\": [\\\"match_id\\\"]},\\n\\\"return\\\": {\\\"get_football_team_stats\\\": \\\"team statistics\\\", \\\"get_football_match_stats\\\": \\\"match statistics\\\"},\\n\\\"depend\\\": [\\\"requests\\\", \\\"RapidAPI's Football-API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A regular customer who always orders the same coffee and pastry combination", "synthesized text": "\"{\\n\\\"name\\\": \\\"Coffee and Pastry Order Interface\\\",\\n\\\"description\\\": \\\"This interface stores and retrieves a customer's favorite coffee and pastry order in a coffee shop. \\\",\\n\\\"function_name\\\": [\\\"store_order\\\", \\\"get_favorite_order\\\"],\\n\\\"input_args\\\": [[\\\"name\\\", \\\"order\\\"], [\\\"name\\\"]],\\n\\\"return\\\": [\\\"None (stores the order)\\\", \\\"Customer's favorite order or error message if the customer is not found\\\"],\\n\\\"depend\\\": \\\"None\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired opera singer who also suffers from tinnitus and shares coping strategies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Audio Frequency Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes an audio file as input and returns the dominant frequency components in the audio. This can be used to analyze the frequency of tinnitus sounds in different environments.\\\",\\n\\\"function_name\\\": \\\"analyze_frequency\\\",\\n\\\"input_args\\\": [\\\"audio_file_path\\\"],\\n\\\"return\\\": \\\"A numpy array of dominant frequencies in the audio file.\\\",\\n\\\"depend\\\": \\\"librosa\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ambitious entrepreneur from a neighboring country who aims to surpass Sweden's tech achievements", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Company Information Extraction Interface\\\",\\n  \\\"description\\\": \\\"Extracts and returns information about top tech companies in Sweden. The information includes the company's name, a brief description, and its website link.\\\",\\n  \\\"function_name\\\": \\\"get_sweden_tech_companies_info\\\",\\n  \\\"input_args\\\": {\\n    \\\"num_companies\\\": \\\"The number of top tech companies in Sweden that the user wants to know about.\\\"\\n  },\\n  \\\"return\\\": \\\"A list of dictionaries. Each dictionary contains the name, brief description, and website link of a top tech company in Sweden.\\\",\\n  \\\"depend\\\": \\\"Python libraries: requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "Dorte, an independent Danish historian and language enthusiast specializing in onomastics, the study of the history and origin of proper names.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Name Origin and Meaning Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Behind The Name API to provide information about the history and meaning of first names. Users input a name, and the interface returns the origin and meaning of the name.\\\",\\n\\\"function_name\\\": \\\"get_name_origin_and_meaning\\\",\\n\\\"input_args\\\": {\\\"name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"name\\\": \\\"string\\\", \\\"gender\\\": \\\"string\\\", \\\"usage\\\": \\\"string\\\", \\\"origin\\\": \\\"string\\\", \\\"meaning\\\": \\\"string\\\"},\\n\\\"depend\\\": \\\"Behind The Name API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a fresh graduate nurse from Luna, Apayao who is seeking employment opportunities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Job Search Interface\\\",\\n\\\"description\\\": \\\"This interface returns a list of available job openings based on user input job title and location by leveraging Indeed.com's job search API.\\\",\\n\\\"function_name\\\": \\\"get_job_openings\\\",\\n\\\"input_args\\\": [\\\"job_title\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains information about a job opening: job title, company, city, state, country, date of posting, job description snippet, and URL of the full job posting.\\\",\\n\\\"depend\\\": \\\"requests library, xml.etree.ElementTree library, Indeed.com API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a candidate preparing for the upcoming Consolidated Election", "synthesized text": "\"{\\n\\\"name\\\": \\\"Candidate Election Research Interface\\\",\\n\\\"description\\\": \\\"This interface uses the ProPublica Congress API to provide users with information about their current representative and their recent legislative activities.\\\",\\n\\\"function_name\\\": [\\\"get_current_representative\\\", \\\"get_recent_legislative_activities\\\"],\\n\\\"input_args\\\": [[\\\"state\\\", \\\"district\\\"], [\\\"member_id\\\"]],\\n\\\"return\\\": [\\\"Current representative information\\\", \\\"Recent legislative activities\\\"],\\n\\\"depend\\\": [\\\"ProPublica Congress API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired IRS agent who volunteers to help fellow retirees with tax-related questions", "synthesized text": "\"{\\n\\\"name\\\": \\\"IRS Tax Calculator Interface\\\", \\n\\\"description\\\": \\\"An interface to calculate tax liability using the IRS Tax Calculator API. The user needs to input their gross income, filing status, and number of dependents, and the interface will return their estimated tax liability.\\\", \\n\\\"function_name\\\": \\\"calculate_tax_liability\\\", \\n\\\"input_args\\\": [\\\"gross_income\\\", \\\"filing_status\\\", \\\"dependents\\\"],\\n\\\"return\\\": \\\"Estimated tax liability or an error message.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"IRS Tax Calculator API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A data scientist who shares interesting mathematical puzzles and challenges on social media", "synthesized text": "\"{\\n\\\"name\\\": \\\"Problem Solving Interface\\\",\\n\\\"description\\\": \\\"This interface uses the sympy library to solve a wide variety of mathematical problems. The user only needs to input the problem as text and our interface will return the solution.\\\",\\n\\\"function_name\\\": \\\"solve_equation\\\",\\n\\\"input_args\\\": \\\"equation_str\\\",\\n\\\"return\\\": \\\"solution\\\",\\n\\\"depend\\\": \\\"sympy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a proud mom of two young children who are fascinated by the world of technology", "synthesized text": "\"{\\n\\\"name\\\": \\\"Kid-Friendly Code Compiler Interface\\\",\\n\\\"description\\\": \\\"An interface that accepts a string of Python code, validates it to ensure it's safe and kid-friendly, and executes it.\\\",\\n\\\"function_name\\\": \\\"kid_friendly_code_compiler\\\",\\n\\\"input_args\\\": \\\"code - a string containing the Python code to be executed\\\",\\n\\\"return\\\": \\\"If the code is valid and successfully executed, it returns a success message. If the code is not valid or there's an error in execution, it returns an error message.\\\",\\n\\\"depend\\\": \\\"Built-in Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local supplier who provides the franchise owner with high-quality ingredients and materials for their products", "synthesized text": "\"{\\n\\\"name\\\": \\\"Inventory Management Interface\\\",\\n\\\"description\\\": \\\"An interface that allows a user to manage their inventory by updating the quantity of items based on sales data.\\\",\\n\\\"function_name\\\": \\\"update_inventory\\\",\\n\\\"input_args\\\": {\\\"path_to_csv\\\": \\\"string, path to the inventory CSV file\\\", \\\"sales_data\\\": \\\"dictionary, where key is the item name and value is the quantity sold\\\"},\\n\\\"return\\\": \\\"pandas dataframe, updated inventory after sales\\\",\\n\\\"depend\\\": \\\"Pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "an avid movie enthusiast who has seen “Free State of Jones” and feels that the movie deserves a deeper appreciation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Recommendation Interface\\\",\\n\\\"description\\\": \\\"Recommends movies that are similar in genre to a given movie.\\\",\\n\\\"function_name\\\": \\\"recommend_movies\\\",\\n\\\"input_args\\\": [\\\"title\\\", \\\"top_n\\\"],\\n\\\"return\\\": \\\"List of similar movies\\\",\\n\\\"depend\\\": \\\"pandas, numpy, sklearn, transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "an Australian mom who loves cooking-shows and—judging by the uncountable hours she has spent in front of her TV—considers herself an expert.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recipe Difficulty Estimation Interface\\\",\\n\\\"description\\\": \\\"Estimates the difficulty level of a recipe based on the complexity of the language used, the number of steps, and the quantity of ingredients.\\\",\\n\\\"function_name\\\": \\\"recipe_difficulty_estimation\\\",\\n\\\"input_args\\\": \\\"recipe - A text string containing the recipe steps and ingredients\\\",\\n\\\"return\\\": \\\"A string value representing the difficulty level: 'Easy', 'Medium', or 'Hard'\\\",\\n\\\"depend\\\": \\\"Natural Language Processing (NLP) library NLTK\\\"\\n}\"", "description": "tool development"}
{"input persona": "A founder of a large outdoor sports festival that attracts thousands of participants", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Weather Forecast Interface\\\",\\n  \\\"description\\\": \\\"Provides the weather forecast for a given location and date by leveraging the OpenWeatherMap API.\\\",\\n  \\\"function_name\\\": \\\"get_weather_forecast\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"The location for which to get the weather forecast. Must be a string.\\\",\\n    \\\"date\\\": \\\"The date for which to get the weather forecast. Must be a string in 'YYYY-MM-DD' format.\\\"\\n  },\\n  \\\"return\\\": \\\"A dictionary containing the temperature, weather description, and wind speed for the given date and location.\\\",\\n  \\\"depend\\\": \\\"Python's requests and datetime libraries, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow army officer from their early days who also has a passion for singing and joins the choir to reconnect with their friend", "synthesized text": "\"{\\n\\\"name\\\": \\\"Song Lyrics Generation Interface\\\",\\n\\\"description\\\": \\\"This interface generates song lyrics based on a provided prompt using a pre-trained language model.\\\",\\n\\\"function_name\\\": \\\"generate_song_lyrics\\\",\\n\\\"input_args\\\": [\\\"prompt\\\"],\\n\\\"return\\\": \\\"Prints three versions of the generated song lyrics\\\",\\n\\\"depend\\\": \\\"Hugging Face Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "台灣環保人士", "synthesized text": "\"{\\n\\\"name\\\": \\\"Air Quality Index Interface\\\",\\n\\\"description\\\": \\\"An interface that retrieves real-time air quality index and pollutant levels data from the Environmental Protection Administration of Taiwan. Users only need to enter their location to get the air quality information.\\\",\\n\\\"function_name\\\": \\\"get_air_quality\\\",\\n\\\"input_args\\\": {\\\"location\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"SiteName\\\": \\\"string\\\", \\\"AQI\\\": \\\"string\\\", \\\"Pollutant\\\": \\\"string\\\", \\\"Status\\\": \\\"string\\\", \\\"PM2.5\\\": \\\"string\\\", \\\"PM10\\\": \\\"string\\\", \\\"CO\\\": \\\"string\\\", \\\"NO2\\\": \\\"string\\\", \\\"SO2\\\": \\\"string\\\", \\\"O3\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"Environmental Protection Administration of Taiwan API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A young Italian woman who just started her career as a rally racing driver.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lap Time Predictor Interface\\\",\\n\\\"description\\\": \\\"Predicts the lap time for a rally race based on track conditions, car specifications, and driver details\\\",\\n\\\"function_name\\\": \\\"predict_lap_time\\\",\\n\\\"input_args\\\": [\\\"track_condition\\\", \\\"car_specs\\\", \\\"driver_details\\\"],\\n\\\"return\\\": \\\"Predicted lap time\\\",\\n\\\"depend\\\": [\\\"python libraries: pandas, sklearn, pickle\\\", \\\"Machine learning model: lap_time_predictor_model.pkl, lap_time_predictor_scaler.pkl\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A school principal who organizes annual Christmas charity events and encourages students to volunteer during the holiday season", "synthesized text": "\"{\\n\\\"name\\\": \\\"Volunteer Event Organizer Interface\\\",\\n\\\"description\\\": \\\"An interface for organizing volunteer sign-ups for school events. Allows the principal to create tasks and students to sign up for these tasks.\\\",\\n\\\"function_name\\\": [\\\"create_task\\\", \\\"sign_up_for_task\\\"],\\n\\\"input_args\\\": [\\\"task_name, task_description\\\", \\\"task_id, student_name\\\"],\\n\\\"return\\\": [\\\"task_id\\\", \\\"sign_up_status\\\"],\\n\\\"depend\\\": \\\"Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Thai citizen who greatly admired Rewat Sirinukul", "synthesized text": "\"{\\n\\\"name\\\": \\\"Translate English Text to Thai Language\\\",\\n\\\"description\\\": \\\"This function takes English text as input and translates it into Thai using the translate Python library.\\\",\\n\\\"function_name\\\": \\\"translate_to_thai\\\",\\n\\\"input_args\\\": [\\\"input_text\\\"],\\n\\\"return\\\": \\\"Translated Thai text\\\",\\n\\\"depend\\\": \\\"translate Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a professor of Mechanical Engineering who was Gregory S. Chirikjian's graduate student", "synthesized text": "\"{\\n\\\"name\\\": \\\"Robot Motion Planning Interface\\\",\\n\\\"description\\\": \\\"An interface for robot motion planning. The user inputs the initial and goal states, the robot's model, and the obstacles in the environment. The function returns a feasible path that the robot can take to reach the goal state from the initial state.\\\",\\n\\\"function_name\\\": \\\"plan_motion\\\",\\n\\\"input_args\\\": {\\n    \\\"initial_state\\\": \\\"The initial state of the robot. A list of three elements, representing the x, y, and z coordinates.\\\",\\n    \\\"goal_state\\\": \\\"The goal state of the robot. A list of three elements, representing the x, y, and z coordinates.\\\",\\n    \\\"robot_model\\\": \\\"The robot's model. An object representing the robot, including its size and movement capabilities.\\\",\\n    \\\"obstacles\\\": \\\"The obstacles in the environment. A list of objects representing the obstacles.\\\"\\n},\\n\\\"return\\\": \\\"A feasible path that the robot can take to reach the goal state from the initial state. If no solution is found, the function returns 'No solution found'.\\\",\\n\\\"depend\\\": \\\"The OMPL (Open Motion Planning Library) is used in this function.\\\"\\n}\"", "description": "tool development"}
{"input persona": "Um engenheiro de software brasileiro que é especialista em desenvolvimento de extensões para navegador.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Interface para An\\u00e1lise de Performance de Extens\\u00f5es de Navegador\\\",\\n  \\\"description\\\": \\\"Esta interface permite aos usu\\u00e1rios analisar o desempenho de uma extens\\u00e3o de navegador, incluindo tempo de carregamento, consumo de mem\\u00f3ria e CPU.\\\",\\n  \\\"function_name\\\": \\\"analyze_extension_performance\\\",\\n  \\\"input_args\\\": [\\\"extension_id\\\"],\\n  \\\"return\\\": {\\n    \\\"type\\\": \\\"dict\\\",\\n    \\\"description\\\": \\\"Retorna um dicion\\u00e1rio contendo informa\\u00e7\\u00f5es sobre o tempo de carregamento, o uso de mem\\u00f3ria e o uso de CPU da extens\\u00e3o.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"selenium\\\", \\\"webdriver_manager\\\"],\\n    \\\"web_apis\\\": [],\\n    \\\"ml_models\\\": []\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A warehouse worker who is exhausted from the harsh conditions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Pallet Arrangement Interface\\\",\\n\\\"description\\\": \\\"An interface that provides the sequence of moves needed to rearrange pallets in a warehouse with minimal effort.\\\",\\n\\\"function_name\\\": \\\"get_pallet_moves\\\",\\n\\\"input_args\\\": {\\n    \\\"warehouse_layout\\\": \\\"A 2D list representing the warehouse layout, where 'W' represents a wall\\\",\\n    \\\"start_positions\\\": \\\"A list of tuples representing the current positions of the pallets\\\",\\n    \\\"end_positions\\\": \\\"A list of tuples representing the desired positions of the pallets\\\"\\n},\\n\\\"return\\\": \\\"A list of paths, where each path is a list of tuples representing the moves for a single pallet\\\",\\n\\\"depend\\\": \\\"NetworkX Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A promoter who puts together underground parties and raves, featuring cutting-edge drum & bass artists", "synthesized text": "\"{\\n\\\"name\\\": \\\"Spotify Playlist Generation Interface\\\",\\n\\\"description\\\": \\\"Generates a Spotify playlist featuring a user's favorite drum & bass artist and similar artists.\\\",\\n\\\"function_name\\\": \\\"generate_dnb_playlist\\\",\\n\\\"input_args\\\": {\\\"favorite_artist\\\": \\\"A string representing the user's favorite drum & bass artist.\\\"},\\n\\\"return\\\": \\\"A string representing the URL to the generated Spotify playlist.\\\",\\n\\\"depend\\\": \\\"Spotipy (Python library), Spotify API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A spokesperson for a rideshare company, providing insights on the impact of transportation policies on their operations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Transport Policy Impact Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that analyzes the impact of a transportation policy on the operations of a rideshare company, including estimated changes in fare revenue, ride times, and demand for rides.\\\",\\n\\\"function_name\\\": \\\"analyze_policy_impact\\\",\\n\\\"input_args\\\": [\\\"path_to_csv\\\", \\\"policy_description\\\"],\\n\\\"return\\\": \\\"A dictionary with keys 'fare_impact', 'time_impact', and 'demand_impact', each corresponding to the estimated impact of the policy on fare revenue, ride times, and demand for rides, respectively.\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, numpy, scikit-learn, Tensorflow, tensorflow.keras; Machine learning models: fare_model.h5, time_model.h5, demand_model.h5 (these models are placeholders and should be replaced with real models trained on relevant data)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A rollup.js tutorial writer who is familiar with bundling JavaScript libraries.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"JavaScript Library Bundling Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses Rollup.js to bundle JavaScript files into a single file.\\\",\\n  \\\"function_name\\\": \\\"bundle_javascript\\\",\\n  \\\"input_args\\\": [\\\"input_file_path\\\", \\\"output_file_path\\\"],\\n  \\\"return\\\": \\\"Boolean (True if the bundled file was created successfully, False otherwise)\\\",\\n  \\\"depend\\\": [\\\"rollup.js\\\", \\\"subprocess\\\", \\\"os\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An elderly woman who practiced traditional embroidery and knitting throughout her life and is eager to pass on her skills to the next generation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pattern Recognition Interface\\\",\\n\\\"description\\\": \\\"An interface to convert embroidery or knitting patterns into digital format.\\\",\\n\\\"function_name\\\": \\\"recognize_pattern\\\",\\n\\\"input_args\\\": {\\\"image_path\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"pattern\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"torch\\\", \\\"torchvision\\\", \\\"PIL\\\"], \\\"machine learning models\\\": [\\\"ResNet-50\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A reverse engineer who relies on LIEF to analyze and understand executable files", "synthesized text": "\"{\\n\\\"name\\\": \\\"Executable File Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the LIEF library to parse and manipulate executable files, providing detailed information about the binary.\\\",\\n\\\"function_name\\\": \\\"parse_executable_file\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"An object containing information about the binary in the executable file.\\\",\\n\\\"depend\\\": [\\\"LIEF library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a mother and primary school teacher from a small town in Ireland.", "synthesized text": "\"{\\n\\\"name\\\": \\\"AI Tutor for Primary School Mathematics\\\",\\n\\\"description\\\": \\\"This interface takes a math problem as input and returns the solution step by step using the Sympy library for symbolic mathematics.\\\",\\n\\\"function_name\\\": \\\"solve_math_problem\\\",\\n\\\"input_args\\\": [\\n    {\\n        \\\"name\\\": \\\"problem\\\",\\n        \\\"description\\\": \\\"A string representation of a math problem in Python syntax\\\",\\n        \\\"type\\\": \\\"str\\\"\\n    }\\n],\\n\\\"return\\\": {\\n    \\\"description\\\": \\\"A list of strings representing each step of the solution to the problem\\\",\\n    \\\"type\\\": \\\"list of str\\\"\\n},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"sympy\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A mischievous teenage boy who loves cookies and often tries to sneak an extra batch from the kind elderly lady", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cookie Stock Alert Interface\\\", \\n\\\"description\\\": \\\"This interface monitors a cookie jar by analyzing a video file for any changes in the jar's content, and returns an alert if a change is detected.\\\", \\n\\\"function_name\\\": \\\"cookie_stock_alert\\\", \\n\\\"input_args\\\": [\\\"video_path\\\"], \\n\\\"return\\\": \\\"A string indicating whether a change in the cookie jar's content has been detected.\\\", \\n\\\"depend\\\": [\\\"opencv\\\", \\\"numpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "一个德国体育迷，特别喜欢跳水", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Diving Score Calculation Interface\\\",\\n  \\\"description\\\": \\\"Calculate the final score of a dive based on the scores from each judge, the degree of difficulty, and the type of dive.\\\",\\n  \\\"function_name\\\": \\\"calculate_diving_score\\\",\\n  \\\"input_args\\\": {\\n    \\\"judge_scores\\\": \\\"A list of scores from each judge.\\\",\\n    \\\"difficulty\\\": \\\"The degree of difficulty of the dive.\\\",\\n    \\\"dive_type\\\": \\\"The type of dive, either 'synchronized' or 'individual'.\\\"\\n  },\\n  \\\"return\\\": \\\"The final score of the dive, rounded to 2 decimal places.\\\",\\n  \\\"depend\\\": [\\\"Python built-in functions\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a beginner diver undergoing training", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dive Log Interface\\\",\\n\\\"description\\\": \\\"An interface for beginner divers to log their diving data and visualize their progress over time.\\\",\\n\\\"function_name\\\": [\\\"DiveLog.__init__\\\", \\\"DiveLog.add_dive\\\", \\\"DiveLog.plot_depth_trend\\\"],\\n\\\"input_args\\\": [\\\"self\\\", \\\"date\\\", \\\"location\\\", \\\"max_depth\\\", \\\"duration\\\", \\\"water_temp\\\"],\\n\\\"return\\\": \\\"A dataframe storing the dive log and a plot showing the diving depth trend over time.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"matplotlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A homeowner who regularly witnesses the sanitation worker's dedication and cleanliness on their street", "synthesized text": "\"{\\n\\\"name\\\": \\\"Street Cleaning Schedule Interface\\\",\\n\\\"description\\\": \\\"This interface returns the street cleaning schedule for a given street name. It simplifies the process of finding out when street cleaning will occur, allowing homeowners to plan accordingly.\\\",\\n\\\"function_name\\\": \\\"get_street_cleaning_schedule\\\",\\n\\\"input_args\\\": \\\"street_name\\\",\\n\\\"return\\\": \\\"Street cleaning schedule\\\",\\n\\\"depend\\\": \\\"requests library, City or Municipality API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional software engineer who is experienced in working with IBM Watson Tone Analyzer API.", "synthesized text": "\"{\\n\\\"name\\\": \\\"IBM Watson Tone Analyzer Interface\\\",\\n\\\"description\\\": \\\"An interface to the IBM Watson Tone Analyzer API, which analyzes the tone of a given text.\\\",\\n\\\"function_name\\\": \\\"analyze_tone\\\",\\n\\\"input_args\\\": [\\\"api_key\\\", \\\"url\\\", \\\"text\\\"],\\n\\\"return\\\": \\\"JSON response from the IBM Watson Tone Analyzer API, including the tones detected in the text.\\\",\\n\\\"depend\\\": [\\\"IBM Watson Tone Analyzer API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A young vlogger seeking advice on how to monetize their content without compromising their creativity", "synthesized text": "\"{\\n  \\\"name\\\": \\\"YouTube Video Statistics Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches and returns statistics for a given YouTube video, including views, likes, dislikes, and comments. This can help vloggers understand their audience's preferences and tailor their content accordingly for better monetization.\\\",\\n  \\\"function_name\\\": \\\"get_youtube_video_statistics\\\",\\n  \\\"input_args\\\": \\\"video_url\\\",\\n  \\\"return\\\": \\\"Dictionary with video statistics (views, likes, dislikes, comments)\\\",\\n  \\\"depend\\\": \\\"YouTube Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An entrepreneur who successfully transitioned their business online and can provide guidance on choosing the right web hosting solution", "synthesized text": "\"{\\n\\\"name\\\": \\\"Web Hosting Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that recommends the best web hosting options based on user's requirements using web scraping and machine learning.\\\",\\n\\\"function_name\\\": \\\"predict_best_hosting\\\",\\n\\\"input_args\\\": {\\n    \\\"storage\\\": \\\"The required storage space in GB.\\\",\\n    \\\"bandwidth\\\": \\\"The required bandwidth in GB.\\\",\\n    \\\"budget\\\": \\\"The user's budget in USD.\\\"\\n},\\n\\\"return\\\": \\\"A list of recommended web hosting options sorted by their suitability.\\\",\\n\\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries for web scraping and sklearn for machine learning.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An MU soccer coach who always supports the players unconditionally", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface will load player's performance data from a CSV file, perform a comprehensive analysis, and visualize the performance over time.\\\",\\n\\\"function_name\\\": \\\"analyze_player_performance\\\",\\n\\\"input_args\\\": \\\"csv_path - path to the CSV file which contains player's performance data\\\",\\n\\\"return\\\": \\\"A statistical summary of the player's performance and a performance chart\\\",\\n\\\"depend\\\": \\\"pandas, matplotlib, seaborn\\\"\\n}\"", "description": "tool development"}
{"input persona": "An amateur boxer training for their first local bout, emphasizing discipline and respect in the sport", "synthesized text": "\"{\\n\\\"name\\\": \\\"Boxing Training Plan Interface\\\",\\n\\\"description\\\": \\\"This interface takes user's age, weight, height, preferred boxing style and time until their bout and returns a personalized boxing training plan.\\\",\\n\\\"function_name\\\": \\\"get_boxing_training_plan\\\",\\n\\\"input_args\\\": {\\n    \\\"age\\\": \\\"User's age\\\",\\n    \\\"weight\\\": \\\"User's weight\\\",\\n    \\\"height\\\": \\\"User's height\\\",\\n    \\\"boxing_style\\\": \\\"User's preferred boxing style\\\",\\n    \\\"time_until_bout\\\": \\\"Time until the user's bout\\\"\\n},\\n\\\"return\\\": \\\"A personalized boxing training plan\\\",\\n\\\"depend\\\": \\\"Python's tensorflow and pandas libraries, and a pre-trained machine learning model\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a public health advocate and social activist, deeply concerned with how systemic issues within healthcare influence patient care and societal well-being. I see the socio-political environment as integral to the health of individuals and communities.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Health Disparity Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Social Vulnerability Index (SVI) dataset from the CDC and Python libraries to analyze health disparities within a specific county and state. It can also correlate this data with a health outcome of interest.\\\",\\n\\\"function_name\\\": [\\\"get_svi_data\\\", \\\"correlate_with_health_outcome\\\"],\\n\\\"input_args\\\": [\\\"state\\\", \\\"county\\\", \\\"health_outcome_data\\\"],\\n\\\"return\\\": \\\"For the 'get_svi_data' function, it returns a DataFrame with the SVI data for the specified county and state. The 'correlate_with_health_outcome' function returns a dictionary with the correlation coefficient and p_value from a Pearson correlation between the SVI data and the health outcome data.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"geopandas\\\", \\\"scipy.stats\\\", \\\"CDC SVI Dataset\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an inhabitant of Casel, Germany.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch the current weather forecast for a given city using the OpenWeatherMap API. Users only need to input their city name, and the interface will return the temperature, pressure, humidity, and a brief description of the weather.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": {\\\"city\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"city\\\": \\\"string\\\", \\\"temperature\\\": \\\"float\\\", \\\"pressure\\\": \\\"float\\\", \\\"humidity\\\": \\\"float\\\", \\\"weather_description\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"json\\\"], \\\"web APIs\\\": [\\\"OpenWeatherMap API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A representative from a local employee association offering expertise on best practices in establishing policies and procedures", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Policy Suggestion Interface\\\",\\n  \\\"description\\\": \\\"Provides suggestions on best practices for establishing policies and procedures.\\\",\\n  \\\"function_name\\\": \\\"suggest_policy_improvements\\\",\\n  \\\"input_args\\\": [\\\"policy_draft\\\"],\\n  \\\"return\\\": \\\"String of suggested improvements or best practices to consider.\\\",\\n  \\\"depend\\\": \\\"Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior biologist who has conducted extensive research on alpine plant biodiversity", "synthesized text": "\"{\\n\\\"name\\\": \\\"Species Distribution Modelling Interface\\\",\\n\\\"description\\\": \\\"Uses the Bioclim method from BioPython to generate potential distribution maps for a list of species given their observation coordinates.\\\",\\n\\\"function_name\\\": \\\"get_species_distribution\\\",\\n\\\"input_args\\\": {\\n    \\\"species_list\\\": \\\"A list of species names.\\\",\\n    \\\"coordinates\\\": \\\"A list of coordinates where the species were observed. Each coordinate should correspond to the species in the same position in the 'species_list' argument.\\\"\\n},\\n\\\"return\\\": \\\"A dictionary where each key is a species name and each value is a potential distribution map for that species.\\\",\\n\\\"depend\\\": \\\"BioPython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a radio enthusiast from Grand Portage, Minnesota.", "synthesized text": "\"{\\n\\\"name\\\": \\\"FM Radio Station Search Interface\\\",\\n\\\"description\\\": \\\"This interface enables users to find FM radio stations in their area by simply inputting their country. The returned information includes a list of available FM radio stations.\\\",\\n\\\"function_name\\\": \\\"get_fm_radio_stations\\\",\\n\\\"input_args\\\": \\\"country\\\",\\n\\\"return\\\": \\\"A list of available FM radio stations\\\",\\n\\\"depend\\\": \\\"Radio Browser API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A seasoned BTCC rivalfan who is skeptical about Dan Kirby's debut.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Race Statistics Interface\\\",\\n  \\\"description\\\": \\\"An interface to fetch and display a summary of a race driver's career statistics. User inputs the name of the driver, and the interface returns a summary of the driver's career statistics.\\\",\\n  \\\"function_name\\\": \\\"get_driver_statistics\\\",\\n  \\\"input_args\\\": \\\"driver_name\\\",\\n  \\\"return\\\": \\\"A dictionary containing the driver's full name, nationality, birth date, career start year, teams he has raced for, number of race entries, race starts, wins, podiums, pole positions, fastest laps, and championships.\\\",\\n  \\\"depend\\\": \\\"Ergast Developer API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data analyst who relies on the software engineer's VBA solutions to automate data processing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Excel File Processing Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to automate their data processing tasks in Excel files by inputting the path to an Excel file and a function to process the data. The processed data will be written back to the same file.\\\",\\n\\\"function_name\\\": \\\"process_excel_file\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"The path to the Excel file.\\\",\\n    \\\"process_func\\\": \\\"A function that takes a pandas DataFrame as input and returns a processed DataFrame.\\\"\\n},\\n\\\"return\\\": \\\"A string indicating that processing is complete.\\\",\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am an ageing Italian artist who specializes in the traditional craft of mask-making, and I knew Pierangelo Summa personally.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Artwork Style Transfer Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to transform the style of their artwork according to the style of another artwork. The user provides paths to two images: their artwork (content) and the artwork whose style they want to mimic (style). The interface then returns their artwork rendered in the other artist's style.\\\",\\n\\\"function_name\\\": \\\"style_transfer\\\",\\n\\\"input_args\\\": [\\\"content_path\\\", \\\"style_path\\\"],\\n\\\"return\\\": \\\"A numpy array representing the stylized image.\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a vengeful descendant of King Mahipativarman who is also a history enthusiast", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ancient Script Translation\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face to translate ancient scripts to modern English.\\\",\\n\\\"function_name\\\": \\\"translate_ancient_script\\\",\\n\\\"input_args\\\": {\\\"ancient_script\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"translated_text\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\"], \\\"machine learning models\\\": [\\\"Helsinki-NLP/opus-mt-sanskrit-en\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A hardcore Enid Blyton fan who hates modern twists on old classics.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Similarity Search Interface\\\",\\n\\\"description\\\": \\\"This interface takes the title of a classic book as input and returns a list of books that have a similar writing style or theme, excluding modern reinterpretations.\\\",\\n\\\"function_name\\\": \\\"get_similar_books\\\",\\n\\\"input_args\\\": [\\\"book_title\\\", \\\"num_books\\\"],\\n\\\"return\\\": \\\"A list of similar book titles.\\\",\\n\\\"depend\\\": [\\\"Hugging Face's sentence-transformers library\\\", \\\"pandas\\\", \\\"scikit-learn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A hypertrophic cardiomyopathy (HCM) patient", "synthesized text": "\"{\\n\\\"name\\\": \\\"Heart Rate Variability Analysis Interface\\\",\\n\\\"description\\\": \\\"Analyzes Heart Rate Variability (HRV) from ECG data. Returns Time and Frequency domain features of HRV.\\\",\\n\\\"function_name\\\": \\\"analyze_hrv\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"Tuple of two dictionaries. The first dictionary contains Time domain features of HRV, and the second dictionary contains Frequency domain features of HRV.\\\",\\n\\\"depend\\\": [\\\"biosppy library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A neuroscientist investigating the application of Bayesian statistics in brain imaging research", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bayesian Statistics in Brain Imaging Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the application of Bayesian statistics in brain imaging research. The user inputs the path to their brain image dataset, and the interface returns a Bayesian model fitted to the data.\\\",\\n\\\"function_name\\\": \\\"create_bayesian_model\\\",\\n\\\"input_args\\\": \\\"path_to_dataset\\\",\\n\\\"return\\\": \\\"A Bayesian model (PyMC3 trace object) fitted to the input brain image dataset.\\\",\\n\\\"depend\\\": \\\"Python libraries: PyMC3 for Bayesian statistical modeling, nibabel for loading brain imaging data, numpy for data manipulation\\\"\\n}\"", "description": "tool development"}
{"input persona": "A flurry-hearted social activist", "synthesized text": "\"{\\n\\\"name\\\": \\\"Petition Signature Count Interface\\\",\\n\\\"description\\\": \\\"This interface extracts the current count of signatures for an online petition. The user only needs to input the URL of the petition, and our interface will return the current count of signatures.\\\",\\n\\\"function_name\\\": \\\"get_signature_count\\\",\\n\\\"input_args\\\": \\\"petition_url\\\",\\n\\\"return\\\": \\\"int\\\",\\n\\\"depend\\\": \\\"BeautifulSoup, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young historian researching the political history of the Republic of Bashkortostan, who generally has neutral feelings toward individual politicians but finds them inherently intriguing.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wikipedia Summary Interface\\\",\\n\\\"description\\\": \\\"This interface fetches and returns the summary of a given topic from Wikipedia. Designed for users who need quick and reliable information about various topics.\\\",\\n\\\"function_name\\\": \\\"get_wikipedia_summary\\\",\\n\\\"input_args\\\": \\\"topic - a string that represents the subject of the search on Wikipedia\\\",\\n\\\"return\\\": \\\"A string that contains the summary of the given topic from Wikipedia\\\",\\n\\\"depend\\\": \\\"Python library: wikipedia-api\\\"\\n}\"", "description": "tool development"}
{"input persona": "An up-and-coming actor who emphasizes raw talent and authenticity over image", "synthesized text": "\"{\\n\\\"name\\\": \\\"Script Line Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface takes in a character's situation and emotional state, and suggests a line of dialogue for the character. Useful for actors improvising lines or creating dialogue.\\\",\\n\\\"function_name\\\": \\\"generate_script_line\\\",\\n\\\"input_args\\\": {\\n    \\\"situation\\\": \\\"The current situation in which the character is. (e.g., heated argument)\\\",\\n    \\\"emotion\\\": \\\"The current emotional state of the character. (e.g., angry)\\\"\\n},\\n\\\"return\\\": \\\"A suggested line of dialogue for the character.\\\",\\n\\\"depend\\\": \\\"Huggingface's Transformers library (GPT-2)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A manufacturer specializing in producing premium playing cards used in high-stakes games", "synthesized text": "\"{\\n\\\"name\\\": \\\"Playing Card Quality Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained image classification model to evaluate the quality of printed playing cards.\\\",\\n\\\"function_name\\\": \\\"card_quality_analysis\\\",\\n\\\"input_args\\\": \\\"path_to_img - A string representing the path to the image file of the playing card.\\\",\\n\\\"return\\\": \\\"A string indicating the quality of the playing card ('High Quality', 'Medium Quality', 'Low Quality').\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, Pre-trained Inception v3 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an experienced software engineer, focusing on concurrency issues in embedded systems. I approach problems methodically and value diving deep to understand root causes.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Concurrency Issue Detection Interface\\\",\\n\\\"description\\\": \\\"This interface accepts a Python function and its arguments, then runs the function with multiple threads to simulate concurrency. It returns any exceptions that occur, helping to detect potential concurrency issues.\\\",\\n\\\"function_name\\\": \\\"concurrency_issue_detector\\\",\\n\\\"input_args\\\": [\\\"function\\\", \\\"*args\\\"],\\n\\\"return\\\": \\\"List of exceptions if any occur during the concurrent execution of the function\\\",\\n\\\"depend\\\": [\\\"concurrent.futures Python library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "一位50岁的历史学教授，对科幻和时空穿越小说深感兴趣，但对年轻时代流行的网络剧不太了解。", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Recommendation Interface\\\",\\n\\\"description\\\": \\\"\\u63a8\\u8350\\u7535\\u89c6\\u5267\\u7684\\u63a5\\u53e3\\u3002\\u8f93\\u5165\\u7528\\u6237\\u7684\\u5e74\\u9f84\\u3001\\u804c\\u4e1a\\u548c\\u5174\\u8da3\\uff0c\\u8fd4\\u56de\\u63a8\\u8350\\u7684\\u7535\\u89c6\\u5267\\u5217\\u8868\\u3002\\\",\\n\\\"function_name\\\": \\\"recommend_tv_shows\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"occupation\\\", \\\"interests\\\"],\\n\\\"return\\\": \\\"\\u7535\\u89c6\\u5267\\u5217\\u8868\\\",\\n\\\"depend\\\": [\\\"requests\\u5e93\\\", \\\"MovieLens\\u63a8\\u8350API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A stockbroker who provides investment advice on real estate investment trusts (REITs)", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real Estate Investment Trusts (REITs) Price Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from HuggingFace to predict the future price of a given REIT based on its ticker symbol.\\\",\\n\\\"function_name\\\": \\\"predict_reit_price\\\",\\n\\\"input_args\\\": \\\"reit_ticker\\\",\\n\\\"return\\\": \\\"Predicted future price of the input REIT.\\\",\\n\\\"depend\\\": \\\"HuggingFace's Transformers library (AutoTokenizer, AutoModelForSequenceClassification)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A freelance writer who is considering moving to Switzerland", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cost of Living Comparison Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Numbeo's Cost of Living API to compare the cost of living between two cities.\\\",\\n\\\"function_name\\\": \\\"get_cost_of_living_comparison\\\",\\n\\\"input_args\\\": [\\\"current_city\\\", \\\"target_city\\\"],\\n\\\"return\\\": \\\"A comparison of the cost of living between the two cities.\\\",\\n\\\"depend\\\": \\\"Numbeo's Cost of Living API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A medical professional who provides expert testimony in personal injury cases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Record Summary Interface\\\",\\n\\\"description\\\": \\\"This interface uses Natural Language Processing and Machine Learning to summarize medical records. The user inputs a text file containing a medical record, and the interface returns a summarized version.\\\",\\n\\\"function_name\\\": \\\"summarize_medical_record\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"A string of sentences that summarize the medical record.\\\",\\n\\\"depend\\\": [\\\"Python's Spacy and Scikit-learn libraries\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A 30-year-old freelance film critic who's extremely fond of unity in diversity.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Foreign Film Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes user's preferred language and genre, and recommends a foreign film using a machine learning model. The model is trained on a movie dataset considering various genres, languages, and cultures.\\\",\\n\\\"function_name\\\": \\\"recommend_foreign_film\\\",\\n\\\"input_args\\\": [\\\"preferred_language\\\", \\\"preferred_genre\\\"],\\n\\\"return\\\": \\\"Recommended foreign film\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a MIS student taking a government class.", "synthesized text": "\"{\\n \\\"name\\\": \\\"Government Document Search Interface\\\",\\n \\\"description\\\": \\\"Search for a specific type of government document (like a bill, resolution, or law) by keyword. The interface will then return a list of relevant documents, using the official U.S. government's Congressional Data API.\\\",\\n \\\"function_name\\\": \\\"search_gov_documents\\\",\\n \\\"input_args\\\": {\\n    \\\"doc_type\\\": \\\"Type of the document. For example, 'bill', 'resolution', or 'law'.\\\",\\n    \\\"keyword\\\": \\\"Keyword to search in the documents.\\\"\\n },\\n \\\"return\\\": \\\"This function returns a list of dictionaries. Each dictionary contains the 'title', 'summary', and 'date' of a document.\\\",\\n \\\"depend\\\": \\\"Official U.S. government's Congressional Data API, Python's requests library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young writer who has been overlooked by traditional publishing houses", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Publishing Interface\\\",\\n\\\"description\\\": \\\"An interface that takes the book content and some related information as input, and returns a printable PDF of the book.\\\",\\n\\\"function_name\\\": \\\"publish_book\\\",\\n\\\"input_args\\\": [\\\"title\\\", \\\"author\\\", \\\"chapters\\\"],\\n\\\"return\\\": \\\"PDF file\\\",\\n\\\"depend\\\": [\\\"Python's FPDF library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A tactical strategist specialized in coordinating team movements during airsoft battles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Optimal Route Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the shortest path between two points on a given 2D grid (representing a battlefield) using the A* pathfinding algorithm. The grid is a matrix of 1s and 0s, where 1 represents an obstacle and 0 represents free space. The user inputs the grid and the start and end positions, and the interface returns the optimal path.\\\",\\n\\\"function_name\\\": \\\"calculate_optimal_route\\\",\\n\\\"input_args\\\": {\\n  \\\"battlefield\\\": \\\"A 2D list of integers representing the battlefield. 1s represent obstacles, and 0s represent free space.\\\",\\n  \\\"start_position\\\": \\\"A tuple of two integers representing the starting position on the grid.\\\",\\n  \\\"end_position\\\": \\\"A tuple of two integers representing the target position on the grid.\\\"\\n},\\n\\\"return\\\": \\\"A list of tuples representing the optimal path from the start position to the end position, avoiding obstacles.\\\",\\n\\\"depend\\\": \\\"Python's pathfinding library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former member of the Hatfield College Boat Club (HCBC), graduated 5 years ago.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Rowing Workout Generator Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the Concept2 Logbook API to generate personalized rowing workouts based on the user's age and fitness level.\\\",\\n  \\\"function_name\\\": \\\"generate_rowing_workout\\\",\\n  \\\"input_args\\\": [\\\"age\\\", \\\"fitness_level\\\"],\\n  \\\"return\\\": \\\"A string that describes the personalized workout.\\\",\\n  \\\"depend\\\": \\\"Concept2 Logbook API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an avid road-trip enthusiast, always looking for the next great drive across the United States. I have a particular fondness for historic routes.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historic Route Finder Interface\\\",\\n\\\"description\\\": \\\"This interface provides a detailed, scenic route between two locations. It uses the Open Route Service API to get route details, avoiding tollways and prioritizing scenic routes.\\\",\\n\\\"function_name\\\": \\\"get_scenic_route\\\",\\n\\\"input_args\\\": [\\\"start_location\\\", \\\"end_location\\\"],\\n\\\"return\\\": \\\"A GeoJSON object containing the route details that can be visualized on a map.\\\",\\n\\\"depend\\\": \\\"Open Route Service API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A hopeful single parent undergoing IVF that maintains a wellness blog detailing their journey", "synthesized text": "\"{\\n  \\\"name\\\": \\\"IVF Success Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the success rate of an IVF treatment based on user's age, BMI, number of previous attempts, and other factors.\\\",\\n  \\\"function_name\\\": \\\"predict_ivf_success\\\",\\n  \\\"input_args\\\": {\\n    \\\"age\\\": \\\"The age of the patient.\\\",\\n    \\\"bmi\\\": \\\"The body mass index of the patient.\\\",\\n    \\\"previous_attempts\\\": \\\"The number of previous IVF attempts by the patient.\\\",\\n    \\\"other_factors\\\": \\\"A dictionary of other factors that might affect the success of IVF.\\\"\\n  },\\n  \\\"return\\\": \\\"A floating point number representing the predicted success rate.\\\",\\n  \\\"depend\\\": \\\"pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "An investment banker who follows Margaret Mittelheuser's investment strategies and successes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Market Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the future price of a stock based on its symbol using a deep learning model pretrained on financial news articles.\\\",\\n\\\"function_name\\\": \\\"predict_stock_price\\\",\\n\\\"input_args\\\": \\\"stock_symbol\\\",\\n\\\"return\\\": \\\"A probability between 0 (price decrease) and 1 (price increase).\\\",\\n\\\"depend\\\": \\\"Hugging Face Transformers, Torch\\\"\\n}\"", "description": "tool development"}
{"input persona": "A marine policy advisor seeking their expertise in developing conservation strategies for marine mammal populations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Marine Mammal Population Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface is designed to predict the population of a specific marine mammal species based on a variety of factors such as water temperature, fishing activity, pollution levels, etc.\\\",\\n\\\"function_name\\\": \\\"predict_marine_mammal_population\\\",\\n\\\"input_args\\\": {\\n    \\\"species\\\": \\\"The species of marine mammal\\\",\\n    \\\"water_temp\\\": \\\"The average water temperature in the habitat\\\",\\n    \\\"fishing_activity\\\": \\\"The level of fishing activity in the habitat\\\",\\n    \\\"pollution\\\": \\\"The level of pollution in the habitat\\\"\\n},\\n\\\"return\\\": \\\"An estimate of the marine mammal population\\\",\\n\\\"depend\\\": \\\"A pre-trained machine learning model (Random Forest Regressor) saved as a .joblib file, pandas, sklearn.ensemble, joblib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A rival distributor of high-end bike frames known for their exclusive partnerships with top bike manufacturers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Competitor Product Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface scrapes a competitor's website and returns details about their products.\\\",\\n\\\"function_name\\\": \\\"get_product_details\\\",\\n\\\"input_args\\\": [\\\"url\\\"],\\n\\\"return\\\": \\\"List of dictionaries containing product details (name, price, and description).\\\",\\n\\\"depend\\\": \\\"Python libraries: BeautifulSoup, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A petroleum engineer with years of experience in reservoir modeling and production optimization", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Petroleum Reservoir Simulation Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to input the path to a CSV file containing well log data (e.g., porosity, permeability, etc.) and return a 2D reservoir simulation model.\\\",\\n  \\\"function_name\\\": \\\"reservoir_simulation\\\",\\n  \\\"input_args\\\": \\\"path_to_csv\\\",\\n  \\\"return\\\": \\\"2D grid of the interpolated variable.\\\",\\n  \\\"depend\\\": \\\"Python libraries: pandas, numpy, pykrige\\\"\\n}\"", "description": "tool development"}
{"input persona": "a participant of Ruta Quetzal BBVA 2009", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Planner\\\",\\n\\\"description\\\": \\\"This interface provides users with the optimal route between two locations, including the estimated travel time and distance. The underlying technology is the Google Maps Directions API.\\\",\\n\\\"function_name\\\": \\\"get_optimal_route\\\",\\n\\\"input_args\\\": [\\\"start_point\\\", \\\"end_point\\\"],\\n\\\"return\\\": \\\"A dictionary containing 'distance', 'duration', and 'steps' keys. 'distance' and 'duration' are strings representing the total distance and duration of the trip, and 'steps' is a list of strings, each representing a step in the route.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"Google Maps Directions API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A psychologist who studies the relationship between introversion and creativity", "synthesized text": "\"{\\n\\\"name\\\": \\\"Personality Trait Analysis Interface\\\",\\n\\\"description\\\": \\\"Analyzes a text and returns scores representing the detected levels of introversion and creativity\\\",\\n\\\"function_name\\\": \\\"analyze_personality_traits\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"Dictionary with introversion and creativity scores\\\",\\n\\\"depend\\\": \\\"transformers library (huggingface), OpenAI's GPT-3 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "Compulsive set designer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Image Color Palette Visualization\\\",\\n\\\"description\\\": \\\"An interface that visualizes a color palette based on the most common colors in a given image. Useful for set designers to create a set with a specific mood or theme.\\\",\\n\\\"function_name\\\": \\\"visualize_color_palette\\\",\\n\\\"input_args\\\": [\\\"image_path\\\", \\\"num_colors\\\"],\\n\\\"return\\\": \\\"A color palette visualization\\\",\\n\\\"depend\\\": [\\\"sklearn\\\", \\\"PIL\\\", \\\"numpy\\\", \\\"matplotlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Finnish children's book author who admires Kirsti Tiina Nopola", "synthesized text": "\"{\\n\\\"name\\\": \\\"Story Character Name Generation Interface\\\",\\n\\\"description\\\": \\\"Generate new and unique names for story characters based on a seed name.\\\",\\n\\\"function_name\\\": \\\"generate_character_names\\\",\\n\\\"input_args\\\": {\\\"seed_name\\\": \\\"string\\\", \\\"num_names\\\": \\\"int (optional, default=5)\\\"},\\n\\\"return\\\": \\\"list of strings (new character names)\\\",\\n\\\"depend\\\": \\\"Huggingface Transformers (GPT2LMHeadModel, GPT2Tokenizer)\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Kathmandu local who never voted for Santosh Chalise", "synthesized text": "\"{\\n\\\"name\\\": \\\"Voter Verification Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to check voting history using the citizenship number. It uses the (hypothetical) election commission API to verify if a person has voted in a particular election.\\\",\\n\\\"function_name\\\": \\\"has_voted\\\",\\n\\\"input_args\\\": \\\"citizenship_number - The citizenship number of the person\\\",\\n\\\"return\\\": \\\"A list of elections the person has voted in\\\",\\n\\\"depend\\\": \\\"requests library, Election Commission's public API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former candidate for Kyrgyzstan's presidency who is passionate about human rights", "synthesized text": "\"{\\n\\\"name\\\": \\\"Human Rights News Monitoring Interface\\\",\\n\\\"description\\\": \\\"This interface uses the News API to fetch the latest news articles based on a user-input key phrase, primarily designed for monitoring human rights news.\\\",\\n\\\"function_name\\\": \\\"get_human_rights_news\\\",\\n\\\"input_args\\\": \\\"key_phrase\\\",\\n\\\"return\\\": \\\"List of dictionaries, each containing the 'title' and 'url' of a news article\\\",\\n\\\"depend\\\": \\\"News API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sister who is an international aid worker, appreciating the potential impact of AI technology in crisis response and disaster management", "synthesized text": "\"{\\n\\\"name\\\": \\\"Earthquake Detection Interface\\\",\\n\\\"description\\\": \\\"This interface uses Machine Learning to detect earthquakes from seismic data. Users input the seismic data file, and the interface returns whether an earthquake event has occurred or not.\\\",\\n\\\"function_name\\\": \\\"detect_earthquake\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"earthquake_detected\\\",\\n\\\"depend\\\": \\\"tensorflow\\\"\\n}\"", "description": "tool development"}
